
\ run read-eval-print loop
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

\ NOTE: This is NOT a module but is run as a standalone script by boot.verb

\ at this point, the compiler/init must be loaded, so i can use any words now
\ ( -- )
: repl
	\ set flags instead of assuming defaults are in effect --
	\ i do NOT want host to exit on exception, but restart me
	false set-exit-on-exception
	\ show stacktraces
	true set-stacktrace-on-exception

	"Verbii (" sys-platform + ")" + . CR
	@loop
		">> " prompt
		dup void? if >>eof
		\ ,q and quit also exit
		dup "quit" == if >>exit
		dup ",q" == if >>exit
		\ "GOT: " . . CR
		compile-and-load-string
		safe-run-and-delete-main \ run __main__ then delete it
		.S
		<<loop
	@exit
		drop
		CR "Exiting" . CR return
	@eof
		drop
		CR "Exiting on EOF" . CR
	;

\ load & run file (whole program mode)
\ ( filename -- )
: run-file
	\ i want to exit on exceptions to avoid infinite loops
	true set-exit-on-exception
	\ show stacktraces
	true set-stacktrace-on-exception

	load-file-maybe-cached
	safe-run-and-delete-main
	\ same trick as above to delete __main__ before running
	\ '__main__ .dumpword \ <- for syntax highlight error
	\ '__main__ ,,del
	\ make-lambda call
	;

\ run in test mode (like non-interactive repl)
\ -- keeps going after errors so it can run testcases with intentional errors
\ -- **NOTE**-- cannot use @args and @locals here since they would clash with
\ any tests that use locals
\
\ normally this would be a bad usage of a global, but in test mode
\ i have to stay completely out of the stack & locals for the tests to
\ run correctly so this is the only real option to store my working vars
'TEST_MODE_FILENAME null make-var
'TEST_MODE_STREAM null make-var
'TEST_MODE_STARTLINE null make-var
'TEST_MODE_CURLINE null make-var

\ ( filename -- )
: run-test
	TEST_MODE_FILENAME!
	\ i want to restart on errors so i can continue after the line that crashed
	false set-exit-on-exception
	\ do NOT show stacktraces since i may be running an error case -- I only want to see
	\ the error message -- stack traces are not required to match between platforms.
	\ if a test case crashes, just run without -test to see stacktraces.
	false set-stacktrace-on-exception

	0 TEST_MODE_CURLINE!
	0 TEST_MODE_STARTLINE!
	\ am i restarting after a previous crash?
	TEST_MODE_FILENAME ".lastline" + file-exists? not if >>open-input
	\ read last line# i *tried* to run -- restart at NEXT line since
	\ the last line must have crashed
	TEST_MODE_FILENAME ".lastline" + file-read parse-int 1 + TEST_MODE_STARTLINE!
		\ "RESTARTING AT LINE:" . start-lineno . CR
	@open-input
	\ create & store my stream to stream-in
	TEST_MODE_FILENAME stream-reader-open-file TEST_MODE_STREAM!
	@loop
		TEST_MODE_STREAM stream-reader-next-line nip ( line )
		TEST_MODE_CURLINE 1 + TEST_MODE_CURLINE!
		\ if i haven't reached start-lineno, then skip and continue
		TEST_MODE_CURLINE TEST_MODE_STARTLINE < if >>skip
		\ remember that this was the last line# i *tried* to run
		TEST_MODE_FILENAME ".lastline" + TEST_MODE_CURLINE str file-write		
			\ "** LINE:" . dup . CR
			\ "RUNNING LINE#: " . cur-lineno . CR
		dup void? if >>done \ eof
		dup string-empty? if >>skip \ skip blank lines
		\ print line i'm about to run
		dup ">>" . . CR
		\ compile & run
		compile-and-load-string
		safe-run-and-delete-main
		\ print stack result
		.S
		<<loop
	@skip ( line )
		drop <<loop
	@done ( line )
		\ remove .lastline file since I succeeded
		TEST_MODE_FILENAME ".lastline" + file-delete
		drop
		;

\ parsed from cmdline args - set defaults
'FILENAME void make-var
'TESTMODE false make-var

: repl-main
	\ parse SCRIPT-ARGS and filter out my options
	@locals [ NEWARGS ]
	[ ] NEWARGS! \ new script args being built
	0
	@parse-script-args
		dup SCRIPT-ARGS length >= if >>done 
		SCRIPT-ARGS over get ( i arg[i] )
			\ "REPL ARG:" . .S CR
		dup "--" == if >>got-dashdash \ everything after -- goes to script i'm running
		dup "-test" == if >>set-testmode
		dup file-exists? if >>set-filename
		
		\ want to do a clean exit instead of throwing error so
		\ host side doesn't restart me and i loop on the same error
		"Unrecognized option: " swap + . CR >>exit

	@set-testmode ( i arg[i] )
		drop
		true TESTMODE! 1 + <<parse-script-args
	@got-dashdash ( i "--" )
		drop
		\ these are the args for the script to be run, excluding the '--'
		SCRIPT-ARGS swap 1 + -1 slice NEWARGS swap + NEWARGS! >>end
	@set-filename ( i filename )
		FILENAME void? not if >>have-filename
		FILENAME! 1 + <<parse-script-args
	@have-filename
		"Extra filename given on command line: " swap + . CR
		\ want to do a clean exit instead of throwing error so
		\ host side doesn't restart me and i loop on the same error
		>>exit
	@done ( i )
		drop
	@end
	\ set the filtered SCRIPT-ARGS that the next script will see now
	NEWARGS SCRIPT-ARGS!
		\ "REPL FILTERED ARGS:" . SCRIPT-ARGS . CR

	
	\ "GOT ARGS:" . CR
	\ "	Filename:" . FILENAME . CR
	\ "	Nocache:" . NOCACHE ref . CR

	FILENAME void? if >>do-repl
	\ got filename -- did I get -test or not?
	TESTMODE if >>do-test-mode

	\ no -test - run FILENAME as a program
	FILENAME run-file >>exit

	\ got -test - run filename as a test
	@do-test-mode
		FILENAME run-test >>exit

	\ no filename, run interactive repl loop
	@do-repl
		repl
		\ fall through to exit
	@exit
		return
	;
