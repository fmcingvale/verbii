
\ Hashing & checksum functions
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

\ FNV-1a 32-bit hash function
\
\ This is much faster than fnv-128 since it uses native 32-bit integers.
\
\ Constants from https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
'FNV32-PRIME 16777619 make-var
'FNV32-OFFSET 2166136261 make-var

"numeric" import

\ ( text -- hash, as integer, 32-bits )
: hash-fnv-32 
	\ for each byte:
	\	hash = hash XOR byte
	\	hash = hash * FNV32-PRIME

	\ called with stack: [ hash char ]
	{
		ord bit-xor ( hash^c )
		FNV32-PRIME * ( hash*prime )
	}
	\ init hash = FNV32-OFFSET
	FNV32-OFFSET
	fold
	\ keep 32-bits only
	4294967295 bit-and ( (hash*prime)&0xffffffff )
	;

\ ref: https://theartincode.stanis.me/008-djb2/ (djb2 hash)
\
\ ( string -- hash )
: hash-djb2
	\ for each char in string, hash = hash * 33 + c, with initial value 5381
	{ ord swap 33 * + } 5381 fold
	MAX-INT32 bit-and ( keep 32 bits only )
	;

\ CRC32 algorithm
\
\ Based on: http://www.libpng.org/pub/png/spec/1.2/PNG-CRCAppendix.html

"numeric" import

'CRC32-TABLE null make-var
'CRC32-CONST "edb88320" parse-hex make-var
'CRC32-ALL1s "ffffffff" parse-hex make-var

: initialize-crc32-table ( -- )
	@locals [ c n k ]
	[ ] CRC32-TABLE!
	\ for n = 0..255
	{ ( n )
		n c!
		\ for k = 0..7
		{ ( k )
			IF c 1 bit-and 0 != THEN
				\ c = 0xedb88320L ^ (c >> 1)
				CRC32-CONST c 1 bit-shr bit-xor c!
			ELSE
				\ c = c >> 1
				c 1 bit-shr c!
			END
		} 0 1 8 for-count
		CRC32-TABLE c append drop
	} 0 1 256 for-count
	;
	
: crc32-update ( crc text -- crc )
	CRC32-TABLE null? not if >>begin
	initialize-crc32-table
	@begin
		\ n = 0..len-1
		{ ( n )
			CRC32-TABLE
				\ crc_table[(c ^ buf[n]) & 0xff]
				crc text n get ord bit-xor 255 bit-and get
			crc 8 bit-shr bit-xor
			crc!
		} 0 1 text length for-count
	crc
	;
		
: crc32-calc ( text -- crc )
	CRC32-ALL1s text crc32-update CRC32-ALL1s bit-xor
	;
	
\ Adler32 checksum
\ see e.g. https://en.wikipedia.org/wiki/Adler-32
: adler32-calc ( text )
	@locals [ a b i ]
	1 a!
	0 b!
	0 i!
	@loop
		text i get void? if >>done 
		a text i get ord + 65521 mod a!
		b a + 65521 mod b!
		i 1 + i! <<loop
	@done
		 b 65536 * a +		
	;