( -- default library, loaded at startup -- )
( -- Copyright (c) 2022 Frank McIngvale, see LICENSE -- )

var SP_EMPTY 1
SP SP_EMPTY set!

: depth SP_EMPTY ref SP - 1 - ;

: . str puts 32 .c ;
: CR ( -- , prints CR LF ) 10 .c ;
: clear ( xn ... x1 -- ) SP depth + 1 - SP! ;

: drop ( a -- ) SP 1 + SP! ; 
: dup ( a -- a a ) SP ref ; 
: dup? ( a -- a a, only if a != 0 ) dup 0 == if >>ZERO dup @ZERO ; 
: swap ( a b -- b a ) over >L >L drop L> L> ;
: pick ( Sn .. S1 i -- Sn .. S1 Si ) SP + ref ; 

: over ( a b -- a b a ) SP 1 + ref ; 
: 2dup ( a b -- a b a b ) over over ; 
: 2drop ( a b -- ) SP 2 + SP! ; 
: 2over ( a b c d -- a b c d a b ) 4 pick 4 pick ; 
: 2swap ( a b c d -- c d a b ) 
    >L >L >L >L  
    LP 2 + ref LP 3 + ref LP ref LP 1 + ref LP 4 + LP! ; 

: ndrop ( xn .. x1 N -- ) SP + 1 + SP! ;
: nip ( a b -- b ) >L drop L> ;
: tuck ( a b -- b a b ) swap 2 pick ;
: rot ( a b c -- b c a ) 3 pick >L >L >L drop L> L> L> ;
: -rot ( b c a -- a b c ) 2 pick >L 3 pick >L >L drop drop L> L> L> ;

: true ( -- true ) 1 1 == ;
: false ( -- false ) 1 0 == ;

: not ( a -- not[a] ) if >>true true return @true false ;
: or ( a b -- a|b ) if >>true1 if >>true2 false return @true1 drop @true2 true ;
: and ( a b -- a&b ) if >>true1 drop false return @true1 if >>true2 false return @true2 true ;

: != ( a b -- a!=b ) == not ;
: >= ( a b -- a>=b ) 2dup > -rot == or ;
: < ( a b -- a<b ) swap > ;
: <= ( a b -- a<=b ) > not ;

: neg ( a -- -a ) dup int? if >>int 0 swap - return @int 0 swap - ;
: max ( a b -- max[a,b] ) 2dup > if >>A nip return @A drop ;
: min ( a b -- min[a,b] ) 2dup > if >>B drop return @B nip ;
: abs ( a -- abs[a] ) dup 0 < if >>neg return @neg neg ;
( 'floor' divide like in Python -- integers only )
: // ( a b -- quotient a/b ) /mod swap drop ;
: mod ( a b -- remainder a/b ) /mod drop ;

( .S - print stack without affecting it - good for debugging )
: .S "=>" . depth 
@LOOP 
	dup 0 > if >>true >>done @true dup SP + 1 + ref repr puts 32 .c 1 - <<LOOP @done drop CR ;

: .L ( N -- print first N locals .. meant for debugging, like .S )
	0 ( N index )
	"Locals:" .
	@loop
		( N index )
		2dup == if >>done
		dup str "L" swap + ":" + . dup LP + ref repr puts 32 .c
		1 + <<loop
	@done 2drop
	;

( shortcuts for addresses of first 10 locals )
: L0 LP ;
: L1 LP 1 + ;
: L2 LP 2 + ;
: L3 LP 3 + ;
: L4 LP 4 + ;
: L5 LP 5 + ;
: L6 LP 6 + ;
: L7 LP 7 + ;
: L8 LP 8 + ;
: L9 LP 9 + ;

: get ( sequence i -- obj = i'th object from sequence )
	over list? if >>list
	over string? if >>string
	over symbol? if >>string
	repr "Bad object in get: " swap + error
	@string
		( for string & symbol, slice of 1 item is desired value )
		1 slice return
	@list ( here i want first element of sliced list )
		1 slice unmake drop
	;

: +get ( same as get but leaves obj on stack )
	over swap get ;

: any ( sequence predicate -- true|false if ANY member of sequence satisfies predicate (lambda) )
	>L dup length >L 0 >L ( L0=index, L1=length, L2=predicate )
	@loop ( sequence )
			( 3 .L CR )
		L0 ref L1 ref == if >>noneFound
		L0 ref +get L2 ref call ( get i'th item in sequence and pass to predicate )
		if >>gotTrue ( found a true item, done )
		L0 ref 1 + L0 set! <<loop
	@gotTrue
		drop LP 3 + LP! true return
	@noneFound
		drop LP 3 + LP! false return
	;

: all ( sequence predicate -- true|false if ALL members of sequence satisfy predicate (lambda) )
	>L dup length >L 0 >L ( L0=index, L1=length, L2=predicate )
	@loop ( sequence )
			( 3 .L CR )
		L0 ref L1 ref == if >>allTrue
		L0 ref +get L2 ref call ( get i'th item in sequence and pass to predicate )
		if >>gotTrue 
		( got false item, so result is false )
		drop LP 3 + LP! false return
	@gotTrue
		L0 ref 1 + L0 set! <<loop
	@allTrue
		drop LP 3 + LP! true return
	;

: tostring ( obj -- obj as string -- same as repr except strings don't get double quotes )
	dup string? if >>string
	repr
	@string
	;

( --- reader interface, used by compiler, but may be generally useful
	usage:
		" ... " reader-open-string
		or
		filename reader-open-file

		then reader-next until it returns null
)

( -- fyi -- this can't be in compiler.verb because its __main__ is not run on startup,
	so the vars never get defined 

	TODO - should fix compiler.verb since this really should be there
	-- )

var READER_TEXT 1 ( string )
var READER_TEXT_LEN 1
var READER_POS 1

: string->symbol ( string -- symbol )
	unmake make-symbol
	;

( note - the reader-open-* functions discard any current input )

: reader-open-string ( string )
	READER_TEXT set!
	READER_TEXT ref length READER_TEXT_LEN set!
	0 READER_POS set!
	;

: reader-open-file ( filename )
	read-file reader-open-string
	;
	
: ord ( string -- ascii ; get ASCII value of first char of string )
	0 get unmake drop
	;

: chr ( ASCII -- string ; turn ASCII character value into single-character string )
	1 make-string
	;

: reader-next ( -- word ; get next word from reader stream, or null on eof )
	"" ( word )
	@skipws ( skip leading whitespace )
		READER_POS ref READER_TEXT_LEN ref >= if >>eof
		READER_TEXT ref READER_POS ref get ( word char )
		ord 32 > if >>word-precheck
		READER_POS ref 1 + READER_POS set! ( word char; ++pos )
		<<skipws
		
	@word-precheck ( check for special chars before looking for normal word )
		READER_POS ref READER_TEXT_LEN ref >= if >>eof
		READER_TEXT ref READER_POS ref get ( word char )
		( don't do ++ here, just want to peek at next char without messing up word-loop )
		dup "\" == if >>skip-comment
		( not a special char, drop char and fall through to word-loop )
		drop 

	@word-loop ( word )
		READER_POS ref READER_TEXT_LEN ref >= if >>eof
		READER_TEXT ref READER_POS ref get ( word char )
		READER_POS ref 1 + READER_POS set! ( word char; ++pos )
		( check for whitespace )
		dup ord 32 <= if >>space  ( treat anything from ' ' to NUL as whitespace )
		( not whitespace, append and continue )
		+ <<word-loop
	
	@skip-comment ( word char )
		( "SKIP COMMENT:" . .S CR )
		drop
	@skip-comment-loop ( word )
		( skip to end of line then start again )
		READER_POS ref READER_TEXT_LEN ref >= if >>eof
		READER_TEXT ref READER_POS ref get ( word char )
		READER_POS ref 1 + READER_POS set! ( word char; ++pos )
		dup ord 13 == if >>found-eol
		dup ord 10 == if >>found-eol
		drop <<skip-comment-loop
	
		@found-eol drop <<skipws ( restart, leaving "" on stack )

	@space ( word char )
		drop ( fall through to return word below )

	@eof ( word ) 
		( return word, null on end of file )
		dup length 0 == if >>isnull
		string->symbol return ( return word as symbol )

	@isnull drop null return
	;
