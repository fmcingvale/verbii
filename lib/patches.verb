\ Patches file, loaded at startup.
\
\ To keep this small (since it is parsed on every startup), docs are
\ in bootstrap/READ-ME-BEFORE-RUNNING.txt. MAKE SURE to read that before
\ editing any of the files in lib/
\	
\ Copyright (c) 2022 Frank McIngvale, see LICENSE
\
\ TIP: When changing compiler code, always run with -nocache flag,
\      else compiler would never run when finding .b files.

( ------ boot ----------- )
			
( ------ init ----------- )

\ create a new dictionary as one of:
\
\ 	a list of tuples and makes a dictionary:
\		[ [ "foo" 123 ] [ "bar" 678 ] ] make-dict
\		=>
\		{ "bar" => 678 "foo" => 123 }
\
\	a list of lambdas that returns ( key val ):
\		[ { "a" 10 5 + } { "b" 100 200 + } ]
\		=>
\		{ "a" => 15 "b" => 300 }
\
\	The above forms can be mixed together in the same list
\
\ treating this as experimental so not replacing make-dict yet.
: make-dict* ( pairs -- D )
	,,new-dict D!
	pairs
	{ ( item )
		item list? if >>list
		item lambda? if >>lambda
		item bound-lambda? if >>lambda
		"Bad item passed to make-dict: " item str + error
		
		@list
			D item 0 get item 1 get put D! return
		@lambda
			D item call put D! return
	} for-each
	D
	;
	
\ ( a b c d -- a b c d a b ) 
: 2over SP 3 + ref SP 3 + ref ;

: 2swap ( a b c d -- c d a b ) c d a b ;

: tuck ( a b -- b a b ) b a b ;

: rot ( a b c -- b c a ) b c a ;

: -rot ( b c a -- a b c ) a b c ;

: nip ( a b -- b ) b ;

( ------ compiler ------- )

\ byte-compile source from current reader stream
: byte-compile ( -- names wordlists )
	\ do NOT store compiled words into interpreter since that would prevent compiling
	\  any code that contained a name that was already defined -- for example when
	\  compiling this file
	\
	\ instead, store as a list of [name,wordlist] to COMPILED-NAMELISTS
	@locals [ SP-START ]
	
	0 make-list COMPILED-NAMELISTS!

	\ i need to count the number of parsed words that DID NOT go into COMPILED-NAMELISTS, so
	\ save starting SP so I can count at the end
	SP SP-START!
	@loop
	( read all parsed objects then make into a list )
	syntax-next
	dup void? if >>done 
	dup list? if >>list
	<<loop
	@list
	\ check for [ ,,inline ... ] and flatten
	flatten-if-inline <<loop
	@done
	drop
	( count # items added to stack and make list )
	SP-START SP - 1 - make-list
	( save this code under __main__ )
	'__main__ save-defined-word
	( perform finalization of all words )
	compiler-finalize-all-words
	( leave list of [ name list ] on stack )
	COMPILED-NAMELISTS
	;