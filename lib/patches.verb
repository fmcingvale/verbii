\ Patches file, loaded at startup.
\
\ To keep this small (since it is parsed on every startup), docs are
\ in bootstrap/READ-ME-BEFORE-RUNNING.txt. MAKE SURE to read that before
\ editing any of the files in lib/
\	
\ Copyright (c) 2022 Frank McIngvale, see LICENSE
\
\ TIP: When changing compiler code, always run with -nocache flag,
\      else compiler would never run when finding .b files.

( ------ boot ----------- )
	
( ------ init ----------- )

\ ========================================================================
\ Iteration/looping/functional programming
\
\ Implementation note: A lot of the functions here could be implemented
\ on top of for-each or fold instead of writing their own inner loops.
\ However, the loops are so simple that I decided the performance tradeoff
\ was worth it vs having to create closures to pass to for-each.
\ ========================================================================

\ call func NR times -- does not touch stack; func can use stack in any way
:V2 repeat ( func NR -- )
	\ lambda is allowed to use stack, but not locals, so store my
	\ parameters in locals
	@loop
		NR 0 <= if >>done 
		func call \ call func - stack is in same state as last call to func
		NR 1 - NR! <<loop
	@done
		;

\	for-each -- call a lambda on each element of a sequence [any object that supports
\  	'length' and 'slice' methods]
\
\	lambda is called with current item of sequence on top of stack. for-each does not
\	touch the stack otherwise.
\
\	*NOTE* lambda CANNOT rely on the state of the stack or locals -- bind with state if 
\	data is needed other than the passed elements
\
:V2 for-each ( seq func -- )
	@locals [ i ]
	0 i!
	@loop
		i seq length >= if >>done 
		seq i get func call
		i 1 + i! <<loop
	@done 
		;
	

\
\	for-each-reverse -- same as for-each, but starts at the end
\
:V2 for-each-reverse ( seq func -- )
	@locals [ i ]
	seq length 1 - i!
	@loop
		i 0 < if >>done 
		seq i get func call 
		i 1 - i! <<loop
	@done 
		;

\
\ like for-each, except includes index. lambda is called as:
\	: lambda ( i elem -- ) 
\
\ *NOTE* lambda CANNOT rely on the state of the stack or locals -- bind with state if 
\ data is needed other than the passed ( i elem )
\
:V2 for-each-i ( seq func -- )
	@locals [ i ]
	0 i!
	@loop
		i seq length >= if >>done 
		i seq i get func call 
		i 1 + i! <<loop
	@done 
		;
	
\ variant of for-each that calls func with ( key val )
\ NOTE: iteration order is not guaranteed across platforms
:V2 for-each-dict ( dict func -- )
	@locals [ i keylist ]
	dict keys keylist!
	0 i!
	@loop
		i keylist length >= if >>done 
		keylist i get dup dict swap get func call
		i 1 + i! <<loop
	@done 
		;
		
\ for i=start .. start+incr*(count-1), call fn with args ( i )
\
\ note: count is used instead of an end value to simplify boundary conditions
:V2 for-range ( fn start incr count )
	@locals [ i ]
	
	0 i!
	@loop
		count 0 <= if >>done
		\ call fn with start+i on top of stack
		i start + fn call
		i incr + i!
		count 1 - count!
		<<loop
	@done
	;
	
\ find index of first item in sequence that satisfies test or void if none 
:V2 find ( seq test -- index )
	0 index!
	@loop
		index seq length >= if >>not-found
		seq index get test call if >>found 
		index 1 + index! <<loop
	@found index return
	@not-found void
	;

\ fold - left fold
\	func: called as: ( accum elem -- new-accum ) where accum is the accumulated value and
\		  elem is the next element to be added to the accumulator.
\		  func must leave updated accum on stack
\	init: initial value for accumulator
\
\ 	pseudocode:
\		acc = func(acc, seq[0])
\		acc = func(acc, seq[1])
\		.
\		acc = func(acc, seq[n-1])
:V2 fold ( seq func init -- accum )
	@locals [ i ]
	init accum!
	0 i!
	@loop
		i seq length >= if >>done 
		accum seq i get func call accum!
		i 1 + i! <<loop
	@done
		accum
	;
	
\ call func for each item of list as:
\	( list[i] -- out )
\ make a newlist from the 'out' values
:V2 map-list ( list func -- newlist )
	@locals [ i ]
	0 i!
	[ ] newlist!
	@loop
		i list length >= if >>done 
		list i get func call
		newlist swap append newlist!
		i 1 + i! <<loop
	@done
		newlist
		;

\ call func for each char of string as:
\	( str[i] -- out )
\ make a newlist from the 'out' values
:V2 map-string ( str func -- newstr )
	@locals [ i ]
	0 i!
	"" newstr!
	@loop
		i str length >= if >>done 
		str i get func call
		newstr swap + newstr!
		i 1 + i! <<loop
	@done
		newstr
		;

\
\ map - make new sequence of func[elem] for each elem in sequence
\
\ calls func as:
\	: func ( elem -- new-elem )
\
:V2 map ( seq func -- newseq )
	seq list? if >>list 
	seq string? if >>string 
	"Bad sequence in map:" seq str + error

	@list seq func map-list return
	@string seq func map-string return
	;

:V2 filter-list ( list func -- truelist )
	@locals [ i ]
	[ ] truelist!
	0 i!
	@loop
		i list length >= if >>done 
		list i get func call not if >>next 
		truelist list i get append truelist!
	@next
		i 1 + i! <<loop
	@done
		truelist
	;

:V2 filter-string ( str func -- truestring )
	@locals [ i ]
	"" truestring!
	0 i!
	@loop
		i str length >= if >>done 
		str i get func call not if >>next 
		truestring str i get + truestring!
	@next
		i 1 + i! <<loop
	@done
		truestring
	;

\
\ filter: make new sequence of only elements where func[elem] is true
\
\ calls func with elem on top of stack; func must leave true or false on stack
\
\ ( sequence func -- new-sequence )
:V2 filter
	over list? if >>list 
	over string? if >>string
	drop "Bad sequence in filter: " swap str + error

	@list filter-list return 
	@string filter-string return
	;
	
\
\ take a list of tuples and makes a dictionary:
\	[ [ "foo" 123 ] [ "bar" 678 ] ] make-dict
\
\ ( list-of-pairs -- dict )
:V2 make-dict 
	\ called as: ( dict [ key val ] )
	{ unmake drop put } ,,new-dict fold
	;

\ ( message -- ) ;  print a debug message along with the stack
:V2 debug . .S CR ;
	
\ -------------------------------------------------------------------------
\
\ Stream reader
\
\ -------------------------------------------------------------------------

\ create a new stream for reading from string
\ ( string -- stream )
:V2 stream-reader-open-string 
	\ state = [ #stream TEXT POSITION ]
	'#stream swap 0 3 make-list
	;

\ create a new stream for reading from file
\ ( filename -- stream )
:V2 stream-reader-open-file
	file-read stream-reader-open-string
	;

\ since doing a series of reads is such a common operation,
\ these functions leave the stream on the stack to avoid lots of caller dups
\ and also usually avoids drops here

\ peek next char [as string] from stream or void on eof

:V2 stream-reader-peek-char ( stream -- stream c )
	@locals [ savepos c ]
	stream 2 get savepos!
	stream stream-reader-next-char c!
	2 savepos put ( stream ) c 
	;

\ read next char [as string] from stream or void on eof
:V2 stream-reader-next-char ( stream -- stream c )
	@locals [ c ]
	\ POS >= length?
	stream 2 get stream 1 get length >= if >>eof
	\ POS is OK, get char
	stream 1 get stream 2 get get c!
	\ ++POS
	stream dup 2 get 1 + 2 swap put \ leave stream on TOS
	c return
	
	@eof stream void
	;

\ skip all whitespace from current position
:V2 stream-reader-skip-whitespace ( stream -- stream )
	@locals [ c ]
		stream
	@loop
		stream-reader-peek-char c! ( stream )
		c void? if >>done
		c whitespace? not if >>done
		stream-reader-next-char drop <<loop
	@done
		;

\ read word (non-whitespace chunk) from current position,
\ skipping any leading whitespace. returns void if no more words.
\ ( stream -- stream word )
:V2 stream-reader-next-word 
	stream-reader-skip-whitespace
	"" ( stream word )
	@loop ( stream word )
		over stream-reader-next-char nip ( stream word c )
		dup void? if >>done
		dup whitespace? if >>done
		+ <<loop \ non-ws, append and continue
	@done ( stream word c )
		drop
		dup length 0 == if >>void
		return
	@void
		drop void
	;

:V2 stream-reader-peek-word ( stream -- stream word )
	@locals [ savepos ]
	stream 2 get savepos!
	stream stream-reader-next-word word!
	\ reset stream back to original position
	2 savepos put word
	;

\ get next line from reader or void
\ discards any \r or \n line ending so an empty line will return ""
\ returns void if no more lines
\ ( stream -- stream line )
:V2 stream-reader-next-line
	""
	@loop ( stream s )
		\ "@loop:" . .S CR
		over stream-reader-next-char nip ( stream s c )
		dup void? if >>eof
		dup ord 10 == if >>NL \ \n
		dup ord 13 == if >>CR \ \r
		+ <<loop \ normal char - append and contine
	\ this is gross but i want to be portable so check for
	\ any of: \n, \r, \r\n, \n\r
	@NL ( stream s \n )
		drop over stream-reader-peek-char nip ( stream s c )
		dup void? if >>drop-return
		dup ord 13 == if >>skip-next
		>>drop-return
	@CR ( stream s \r )
		drop over stream-reader-peek-char nip ( stream s c )
		dup void? if >>drop-return
		dup ord 10 == if >>skip-next
		>>drop-return
	@drop-return
		\ just \r or \n
		drop return
	@skip-next ( stream s c )
		\ got CR/LF pair
		\ skip next char
		drop over stream-reader-next-char drop drop return
	@eof ( stream s c )
		drop 
		\ need to distinguish eof at end of string vs. eof at start
		dup length 0 == if >>void \ no chars before eof
		return
	@void ( stream s )
		drop void
		;
		
:V2 stream-reader-peek-line ( stream -- stream line )
	@locals [ savepos ]
	stream 2 get savepos!
	stream stream-reader-next-line line!
	\ reset stream back to start of line
	2 savepos put line
	;

( ------ compiler ------- )
	
	
	
( ------ misc ------- )
\ "System startup time: " . run-time str . CR
