\ Patches file, loaded at startup.
\
\ To keep this small (since it is parsed on every startup), docs are
\ in bootstrap/READ-ME-BEFORE-RUNNING.txt. MAKE SURE to read that before
\ editing any of the files in lib/
\	
\ Copyright (c) 2022 Frank McIngvale, see LICENSE
\
\ TIP: When changing compiler code, always run with -nocache flag,
\      else compiler would never run when finding .b files.

( ------ boot ----------- )
	
'*_NOCACHE false make-var

\ load filename, respecting NOCACHE setting
\ ( filename -- )
:V2 load-file-maybe-cached
	*_NOCACHE if >>nocache
	\ do cached load
	cached-compile-and-load
	return

	\ ignore any .b file - load source file and compile
	@nocache
		file-read
		compile-and-load-string
	;
		
\ load & import module from either name.verb or name.verb.b
\ TODO:
\	* define library paths & add search 
\	* add way to let modules know they are being imported so they
\	  shouldn't run their main code (unless it's required to init the module of course)
\
'*_IMPORTED_MODULES ,,new-dict make-var
 
\ ( name -- )
:V2 import
	\ see if name has been imported already and don't import again
	\ (NOTE this is declared below like the other vars since the parser can't handle
	\ seeing it up here)
	*_IMPORTED_MODULES over get void? not if >>already-imported
	\ not yet imported - go ahead and mark as imported - if the below fails then 
	\ the program will crash anyways
	dup *_IMPORTED_MODULES swap true put drop
	\ import module
	".verb" +
	dup file-exists? if >>good
	"Unable to find file:" swap + error
	@good
		load-file-maybe-cached
		\ module may need to init its own globals, etc., so run it
		safe-run-and-delete-main
		return
	@already-imported ( name )
		\ "ALREADY IMPORTED:" . dup . CR
		drop
	;
	
:V2 boot-main
	\ first, must init interpreter for anything else to work
	\ (no userwords are loaded yet .. no compiler, no init lib)
	init-interpreter

		\ "AT INIT INTERPRETER, STACK:" . .S CR

	\ *VERY BAD VERBII STYLE HERE* ... out of necessity
	\ (1) vars should not be declared inside a function
	\		* since boot-main only runs once, it's ok here
	\ (2) they are out of place .. see below

	\ this belongs with 'import' but again it cannot be parsed sitting up there
	\ var *_IMPORTED_MODULES 1
	\ ,,new-dict *_IMPORTED_MODULES set!

	\ this belongs with load-file-maybe-cached, but again has to sit here to be parsed
	\ var NOCACHE 1
	\ false NOCACHE set!

	\ args that get passed to repl (and on to other scripts after that)
	var SCRIPT-ARGS 1

	>L ( L1 = cmdline args -- pushed from host )
	[ ] >L ( L0 = new script args being built )
	0 
	@parse-cmdline ( i )
		dup LP 1 + ref length >= if >>done 
		LP 1 + ref over get ( i arg[i] )
			\ "BOOT ARG:" . .S CR
		dup "--" == if >>got-dashdash \ ignore everything after --
		dup "-nocache" == if >>set-nocache
		\ keep other args
		LP ref swap append LP set!
		1 + <<parse-cmdline
	@set-nocache ( i arg[i] )
		drop
		true *_NOCACHE! 1 + <<parse-cmdline
	@got-dashdash ( i "--" )
		drop
		LP 1 + ref swap -1 slice LP ref swap + LP set! >>end
	@done ( i )
		drop
	@end
	L> SCRIPT-ARGS set!
	LP 1 + LP! \ drop cmdline-args from locals

		\ "FILTERED SCRIPT ARGS:" . SCRIPT-ARGS ref . CR

	"../lib/repl.verb" load-file-maybe-cached 
	safe-run-and-delete-main

	repl-main
	;

( ------ init ----------- )

( ------ compiler ------- )
