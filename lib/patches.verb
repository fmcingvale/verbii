\ Patches file, loaded at startup.
\
\ To keep this small (since it is parsed on every startup), docs are
\ in bootstrap/READ-ME-BEFORE-RUNNING.txt. MAKE SURE to read that before
\ editing any of the files in lib/
\	
\ Copyright (c) 2022 Frank McIngvale, see LICENSE
\
( ------ boot ----------- )

( ------ init ----------- )

\ join a list of strings by separator string
: string-join ( list separator -- string )
	@args [ list sep ]
	list
	\ self is the separator
	{ ( accum elem ) over length 0 == if >>skip \ skip separator before first string
		swap self + swap
		@skip +
	} sep :: \ bind separator as self to func
	"" fold
	;

\ for each item in seq, call func as:
\	( seq[i] -- )
: for-each ( seq func -- )
	@args [ seq func ]
	@locals [ i ]
	0 i!
	@loop
		i seq length >= if >>done 
		seq i get func call
		i 1 + i! <<loop
	@done 
		;

\ for each item in seq, call func as:
\	( i seq[i] -- )
: for-each-i ( seq func -- )
	@args [ seq func ]
	@locals [ i ]
	0 i!
	@loop
		i seq length >= if >>done 
		i seq i get func call 
		i 1 + i! <<loop
	@done 
		;

: for-each-reverse ( seq func -- )
	@args [ seq func ]
	@locals [ i ]
	seq length 1 - i!
	@loop
		i 0 < if >>done 
		seq i get func call 
		i 1 - i! <<loop
	@done 
		;

\ call func for each item of list as:
\	( list[i] -- out )
\ make a newlist from the 'out' values
: map-list ( list func -- newlist )
	@args [ list func ]
	@locals [ i newlist ]
	0 i!
	[ ] newlist!
	@loop
		i list length >= if >>done 
		list i get func call
		newlist swap append newlist!
		i 1 + i! <<loop
	@done
		newlist
		;

\ call func for each char of string as:
\	( str[i] -- out )
\ make a newlist from the 'out' values
: map-string ( str func -- newstring )
	@args [ str func ]
	@locals [ i newstr ]
	0 i!
	"" newstr!
	@loop
		i str length >= if >>done 
		str i get func call
		newstr swap + newstr!
		i 1 + i! <<loop
	@done
		newstr
		;

: map ( seq func -- newseq )
	@args [ seq func ]
	seq list? if >>list 
	seq string? if >>string 
	"Bad sequence in map:" seq str + error

	@list seq func map-list return
	@string seq func map-string return
	;

\ fold - left fold
\	func: called as: ( accum elem -- new-accum ) where accum is the accumulated value and
\		  elem is the next element to be added to the accumulator.
\		  func must leave updated accum on stack
\	init: initial value for accumulator
\
\ 	pseudocode:
\		acc = func(acc, seq[0])
\		acc = func(acc, seq[1])
\		.
\		acc = func(acc, seq[n-1])
: fold ( seq func init -- accum )
	@args [ seq func init ]
	@locals [ accum i ]
	init accum!
	0 i!
	@loop
		i seq length >= if >>done 
		accum seq i get func call accum!
		i 1 + i! <<loop
	@done
		accum
	;

: filter-list ( list func -- truelist )
	@args [ list func ]
	@locals [ truelist i ]
	[ ] truelist!
	0 i!
	@loop
		i list length >= if >>done 
		list i get func call not if >>next 
		truelist list i get append truelist!
	@next
		i 1 + i! <<loop
	@done
		truelist
	;

: filter-string ( str func -- truestring )
	@args [ str func ]
	@locals [ truestring i ]
	"" truestring!
	0 i!
	@loop
		i str length >= if >>done 
		str i get func call not if >>next 
		truestring str i get + truestring!
	@next
		i 1 + i! <<loop
	@done
		truestring
	;

: filter ( sequence func -- new-sequence )
	over list? if >>list 
	over string? if >>string
	drop "Bad sequence in filter: " swap str + error

	@list filter-list return 
	@string filter-string return
	;

( ------ compiler ------- )

: serialize-escape-string ( string -- string with whitespace escaped )
	{ 
		( char )
		dup ord 32 == if >>space
		dup ord 37 == if >>percent
		dup ord 9 == if >>tab
		dup ord 10 == if >>lf 
		dup ord 13 == if >>cr 
		\ not a special char - return as-is
		return

		\ note -- "%" cannot appear in the strings here nor the serialize/deserialize
		\ loop - would mess up the replacement strings. so use % == chr(37) instead of "%" )
		@space ( char )
			drop 37 chr "32" + ( "%32" )
			return

		@tab ( char )
			drop 37 chr "09" + ( "%09" )
			return

		@percent ( char )
			drop 37 chr "37" + ( "%37" )
			return
			
		@lf ( char )
			drop 37 chr "10" + ( "%10" )
			return
		@cr 
			drop 37 chr "13" + ( "%13" )
	} map
	;

( ------ misc ------- )
\ "System startup time: " . run-time str . CR
