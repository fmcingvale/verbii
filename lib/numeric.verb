 
\ Various numeric functions
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

\ ======================================================================
\ Constants
\ ======================================================================
'PI    3.141592653589793 make-const \ to limit of double precision
'E-VAL 2.718281828459045 make-const

\ max unsigned 32-bit value
'MAX-INT32 4294967295 make-var

\ FLOAT-MAX SHOULD BE: 1.7976931348623157E+308
\ however, chicken seems to not be able to print this and rounds it to 1.79769313486232E+308,
\ which is too large for a double. so if the chicken port creates a .b file containing 1.7976931348623157E+308,
\ it will be serialized as an invalid value and crash the other ports when they try to load it.
\ so the FLOAT-MAX below is the highest exact value that chicken will print correctly.
\
\ random trivia: the real value of FLOAT-MAX, in hex, is 0x7fefffffffffffff
\ so i decremented that until i got a value that ended in 14x instead of 15x.
\ the hex value of the number below is 0x7feffffffffffffb
'FLOAT-MAX 1.7976931348623149E+308 make-const
'FLOAT-MIN -1.7976931348623149E+308 make-const

\ log(10), for changing base below
'LOGN_10 2.30258509299404568 make-var
\ log(2), for changing base below
'LOGN_2  0.69314718055994531 make-var

\ log, base 10
: log10 ( v -- L ) 	v log LOGN_10 / ;
\ log, base 2
: log2 ( v -- L ) v log LOGN_2 / ;

\ ======================================================================
\ More floating point utilities & formatting
\ ======================================================================

\ get sign of x as 1 or -1
: sign ( x -- s )
	x 0 < if >>negative
	1 return
	@negative -1 return
	;

\ get fractional part of v (always positive)
: fp-frac-part ( v -- frac ) v abs v abs floor - ;
	
\ round v to integer
: round ( v -- i )
	@locals [ sgn ]
	v sign sgn! \ do below with positive values then adjust at end
	v abs v!
	
	v fp-frac-part 0.5 >= if >>up
	v floor sgn * return
	@up v floor 1 + sgn * return
	;

\ split value into m (mantissa) [0..1] and p (power), so that:
\	v = m * 10^p
: fp-mantissa ( v -- m p )
	@locals [ sgn ]
	v sign sgn! \ do below with positive values then adjust at end
	v abs v!
	
	v log10 floor 1 + p!
	v 10 p pow / sgn * p
	;
	
\ format V to string with N decimal digits
\ -- it is better to use fmt-float -- this only works for smaller numbers
: fmt-ndecimal ( v n -- s )
	@locals [ D sgn ds ]
	"" sgn!
	v 0 >= if >>nosign
	v neg v!
	"-" sgn!
	@nosign
	10 n pow floor D!	\ shift by N digits (as integer)
	\ "D:" . D . CR
	\ "V:" . v . "N:" . n . CR
	v D * v!
	\ "V*10^N:" . v . CR
	\ "FRAC:" . v fp-frac-part . CR
	v round v!
	\ "ROUNDED:" . v . CR
	\ get decimal part as string
	v D mod str ds!
	\ left pad with zeros until correct width
	@pad
		ds length n >= if >>done-pad
		"0" ds + ds! <<pad
	@done-pad
	sgn
	v D // str +
	"." + ds +
	;
	
\ given a numerical exponent, return appropriate exponent string for floating point format
: fp-exp-string ( e )
	e 0 == if >>zero-exp
	e 0 > if >>plus-exp 
		\ e < 0 => "e-NNN"
		"e" e str + return 
	@plus-exp 
		"e+" e str + return
	@zero-exp		
		""
	;
	
\ format floating point number with more precise control than default str formatting
\
\	NI = number of integer digits (max)
\	ND = number of decimal places (max)
: fmt-float ( v NI ND -- s )
	@locals [ M P newexp sgn ]
	\ "** FMT-FLOAT" . CR
	\ make sign string then do all calcs on positive values
	"" sgn!
	v 0 >= if >>done-sign
	v neg v!
	"-" sgn!
	@done-sign
	
	\ "V:" . v . "NI:" . NI . "ND:" . ND . CR
	v fp-mantissa P! M!
	\ "M:" . M . "P:" . P . CR
	\ see which case I have:
	\ low case:
	\	0 <= v < 1
	\ middle case:
	\	1 <= v < 10^NI
	\ high case:
	\	10^NI < v
	v 1 < if >>low-case
	v 1 >= v 10 NI pow < and if >>middle-case
	>>high-case
	@low-case
		\ i think there are at least two options here:
		\	1. always do M*10 so there is always 1 digit in front of the decimal point
		\	2. allow keeping a certain number of leading 0s in decimals -- sometimes
		\ 		more natural to write 0.003 instead of 3e-3, but e.g. for 0.003456,
		\		it might be more important to keep the trailing digits 
		\
		\ for now just do M*10 and adjust exponent in string -- I *THINK* the 2nd case can
		\ be accomplished by the caller, given this function and fmt-ndecimal
		sgn
		M 10 * ND fmt-ndecimal +
		P 1 - fp-exp-string + 
			\ "RET:" . dup . 
			return
	@high-case
		\ too many integer digits, so multiply M up to NI integer digits,
		\ then round and add adjusted exponent
		sgn
		M 10 NI pow * ND fmt-ndecimal +
		P NI - fp-exp-string +  
			\ "RET:" . dup . 
			return
	@middle-case
		\ integer part fits in NI digits, so just round decimal part
		sgn 
		v ND fmt-ndecimal + \ "RET:" . dup . 
		return	
	;
	
\ takes a calculated percentage [0..1] and formats it as [0..100] with N decimal places (N=0 ...)
: fmt-percent ( p n -- pstr )
	@locals [ s ]
	n 0 == if >>zero
	n 0 < if >>bad
	\ "FMT PERCENT:" . p . CR
	p 10 n 2 + pow * round str s!
	\ "INT:" . s n tail-drop . CR
	\ "DEC:" . s n tail . CR
	s n tail-drop 
	\ check empty int part (i.e. percent < 1)
	dup length 0 == if >>add-leading-zero
	>>leading-done 
	@add-leading-zero
		drop "0"
	@leading-done
	"." + s n tail + return
	\ no decimals places, just do *100 and round
	@zero p 100 * round str return
	@bad "Bad N in fmt-percent: " n str + error
	;
	
\ ======================================================================
\ Binary formatting
\ ======================================================================

\ ( n -- ; format n as binary string )
: str.bin
	32 "" -rot
	@loop ( s n i )
		dup 0 == if >>done ( i==0? )
		over 1 bit-and 0 == if >>zero
			rot "1" swap + -rot >>next ( prepend 1 )
		@zero
			rot "0" swap + -rot ( prepend 0 )
		@next ( s n i )
			swap 1 bit-shr swap 1 - ( s n>>1 --i )
			<<loop
	@done
		drop drop ( leave string on stack )
		\ put in dotted form for readability
		dup 0 8 slice "." + swap
		dup 8 8 slice "." + swap 
		dup 16 8 slice "." + swap 
		24 8 slice
		+ + + 
		;

\ ======================================================================
\ More bit operations (all 32-bit)
\ ======================================================================

\ rotate X left by K bits
: bit-rotl ( x k )
	\ (x << k) | (x >> (32 - k))
	x k bit-shl
	x 32 k - bit-shr
	bit-or
	;
	
\ rotate Y right by K bits
: bit-rotr ( x k )
	\ (x >> k) | (x << (32 - k)) 
	x k bit-shr 
	x 32 k - bit-shl 
	bit-or
	;
	
\ takes any integer and returns lower 32 bits
: bit-low32 ( val ) val 4294967295 bit-and ;

\ count number of 1 bits in low 32 bits of x (slow version, meant for generating lookup table)
: bit-count-ones-slow ( x -- count )
	@locals [ n ]
	32 n!
	0 count!
	@loop
		n 0 == if >>done 
		x 1 bit-and 0 == if >>next 
		count 1 + count!
	@next
		x 1 bit-shr x!
		n 1 - n! <<loop
	@done
		count
	;

\ generated table for fast counting of 1's
'BIT-COUNT-ONES-LOOKUP-TABLE null make-var 

\ generate the above table for all 8 bit values
: generate-bit-count-ones-lookup-table 
	@locals [ list ]
	[ ] list!
	{ ( x )
		list
			x bit-count-ones-slow append!
	} 0 1 256 for-count 
	
	list BIT-COUNT-ONES-LOOKUP-TABLE!
	;
	
\ count number of 1 bits in low 32 bits of x (fast version)
: bit-count-ones ( x -- count )
	BIT-COUNT-ONES-LOOKUP-TABLE null? not if >>ok
	generate-bit-count-ones-lookup-table 
	@ok
	0 count!
	\ count each 8-bit segment of x and sum
	count BIT-COUNT-ONES-LOOKUP-TABLE x 255 bit-and get + count!
	count BIT-COUNT-ONES-LOOKUP-TABLE x 8 bit-shr 255 bit-and get + count!
	count BIT-COUNT-ONES-LOOKUP-TABLE x 16 bit-shr 255 bit-and get + count!
	count BIT-COUNT-ONES-LOOKUP-TABLE x 24 bit-shr 255 bit-and get + count!
	count
	;
	
\ find first (leftmost) 1 bit in low 32 bits of x (slow version meant for pregenerating table)
\ returns as index from left side (so high bit == index 0, lowest bit == index 31)
\
\ return void if no 1 bits
: bit-first-one-slow ( x -- index )
	@locals [ nr ]
	\ quick test first then don't have to count bits later
	x bit-low32 0 == if >>zero
	\ now i know the loop below will end
	0 index!
	@loop
		x 2147483648 bit-and 0 != if >>found 
		x 1 bit-shl x!
		index 1 + index!
		<<loop
	@found
		index return
	@zero 
		void 
	;
		
\ pregenerated lookup table for all 8 bit values
'BIT-FIRST-ONE-LOOKUP-TABLE null make-var

\ create lookup table
: generate-bit-first-one-lookup-table 
	@locals [ list ]
	[ ] list!
	{ ( x ) list
			x 24 bit-shl bit-first-one-slow append!
	} 0 1 256 for-count 
	
	list BIT-FIRST-ONE-LOOKUP-TABLE!
	\ "TABLE:" . list . CR
	;
	
\ find first (leftmost) 1 bit in low 32 bits of x (fast version)
\ returns as index from left side (so high bit == index 0, lowest bit == index 31)
\
\ return void if no 1 bits
: bit-first-one ( x )
	@locals [ i ]
	\ generate table if needed
	BIT-FIRST-ONE-LOOKUP-TABLE null? not if >>ok 
	generate-bit-first-one-lookup-table
	@ok
	\ check from high byte to low byte 
	BIT-FIRST-ONE-LOOKUP-TABLE x 24 bit-shr 255 bit-and get i!
	i void != if >>found1
	BIT-FIRST-ONE-LOOKUP-TABLE x 16 bit-shr 255 bit-and get i!
	i void != if >>found2
	BIT-FIRST-ONE-LOOKUP-TABLE x 8 bit-shr 255 bit-and get i!
	i void != if >>found3
	BIT-FIRST-ONE-LOOKUP-TABLE x 255 bit-and get i!
	i void != if >>found4
	\ no 1 bits
	void return
	@found1 i return
	@found2 i 8 + return
	@found3 i 16 + return
	@found4 i 24 + return
	;	

\ count the number of leading ones in the low 32 bits of x	
: bit-leading-ones-slow ( x -- nr )
	0 nr!
	@loop
		nr 32 == if >>done 
		\ and with high bit
		x 2147483648 bit-and 0 == if >>done \ found zero, stop 
		\ else shift and continue
		x 1 bit-shl x!
		nr 1 + nr! <<loop
	@done
		nr
	;
	
\ pregenerated lookup table for all 8 bit values
'BIT-LEADING-ONES-LOOKUP-TABLE null make-var

\ create lookup table
: generate-bit-leading-ones-lookup-table 
	@locals [ list ]
	[ ] list!
	{ ( x ) list
			x 24 bit-shl bit-leading-ones-slow append!
	} 0 1 256 for-count 
	
	list BIT-LEADING-ONES-LOOKUP-TABLE!
	;
	
\ count the number of leading ones in the low 32 bits of x (fast version)
: bit-leading-ones ( x )
	@locals [ i ]
	\ generate table if needed
	BIT-LEADING-ONES-LOOKUP-TABLE null? not if >>ok 
	generate-bit-leading-ones-lookup-table
	@ok
	\ check from high byte to low byte 
	x 24 bit-shr 255 bit-and dup 255 == if >>2nd \ got all 1's, so continue to 2nd byte
	\ else, count will stop here
	BIT-LEADING-ONES-LOOKUP-TABLE swap get return
	@2nd
	drop \ from dup above
	x 16 bit-shr 255 bit-and dup 255 == if >>3rd \ got all 1's, so continue to 3rd byte
	BIT-LEADING-ONES-LOOKUP-TABLE swap get 8 + return
	@3rd
	drop
	x 8 bit-shr 255 bit-and dup 255 == if >>4th \ got all 1's, so continue to 4th byte
	BIT-LEADING-ONES-LOOKUP-TABLE swap get 16 + return
	@4th
	drop
	BIT-LEADING-ONES-LOOKUP-TABLE x 255 bit-and get 24 + return
	;	
	
\ count the number of leading zeroes in the low 32 bits of x (fast version)
: bit-leading-zeros ( x )
	x bit-not bit-leading-ones
	;
	
\ ======================================================================
\ Statistics
\ ======================================================================

\ calculate average of a list of numbers
: average ( numbers -- avg )
	@locals [ sum i ]
	0 i!
	0.0 sum!
	@loop
		numbers i get void? if >>done 
		numbers i get sum + sum!
		i 1 + i! <<loop
	@done
		sum numbers length /
	;

: *stddev.generic ( numbers NRDIV -- s )
	@locals [ mean sum i ]
	numbers average mean!
	0 sum!
	0 i!
	@loop
		numbers i get void? if >>done-sum
		numbers i get mean - 2 pow sum + sum!
		i 1 + i! <<loop
	@done-sum
		sum NRDIV / sqrt
	;
	
\ calculate standard deviation (total population) of a list of numbers
: stddev.p ( numbers -- s )
	numbers numbers length *stddev.generic
	;
	
\ calculate standard deviation (sample) of a list of numbers
: stddev.s ( numbers -- s )
	numbers length 2 < if >>error
	numbers numbers length 1 - *stddev.generic
	return
	@error "Need at least 2 values in stddev.s, got: " numbers repr + error
	;

\ ======================================================================
\ Byte packing of integers to/from strings
\ ======================================================================

\ pack a 16-bit integer into a string in little-endian order
: pack-int16-LE ( x -- s )
	""
	x #xff bit-and chr +
	x #xff00 bit-and 8 bit-shr chr +
	;
	
\ pack a 16-bit integer into a string in big-endian ('network') order
: pack-int16-BE ( x -- s )
	""
	x #xff00 bit-and 8 bit-shr chr +
	x #xff bit-and chr +
	;

\ pack 32-bit integer into a string in little-endian order
: pack-int32-LE ( x -- s )
	""
	x #x000000ff bit-and            chr +
	x #x0000ff00 bit-and  8 bit-shr chr +
	x #x00ff0000 bit-and 16 bit-shr chr +
	x #xff000000 bit-and 24 bit-shr chr +
	;
		
\ pack 32-bit integer into a string in big-endian ('network') order
: pack-int32-BE ( x -- s )
	""
	x #xff000000 bit-and 24 bit-shr chr +
	x #x00ff0000 bit-and 16 bit-shr chr +
	x #x0000ff00 bit-and  8 bit-shr chr +
	x #x000000ff bit-and            chr +
	;

\ unpack a 16-bit integer from first 2 bytes of string, in big-endian ('network') order
: unpack-int16-BE ( data )
	data 0 get ord 8 bit-shl
	data 1 get ord +
	;

\ unpack a 16-bit integer from first 2 bytes of string, in little-endian order
: unpack-int16-LE ( data )
	data 1 get ord 8 bit-shl
	data 0 get ord +
	;
	
\ unpack a 32-bit integer from first 4 bytes of string, in big-endian ('network') order
: unpack-int32-BE ( data )
	data 0 get ord 24 bit-shl
	data 1 get ord 16 bit-shl
	data 2 get ord 8 bit-shl
	data 3 get ord + + +
	;

\ unpack a 32-bit integer from first 4 bytes of string, in little-endian order
: unpack-int32-LE ( data )
	data 3 get ord 24 bit-shl
	data 2 get ord 16 bit-shl
	data 1 get ord 8 bit-shl
	data 0 get ord + + +
	;
