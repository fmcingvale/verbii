\ File path functions
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

\ for a lib later

\ is c (single char string) alphabetic?
: is-alphabetic? ( c -- result )
	c "a" >= c "z" <= and if >>yes 
	c "A" >= c "Z" <= and if >>yes
	false return
	@yes true return
	;

\ split a path into parts by either \ or / separators
: file-path-split ( path -- parts )
	path "\/" string-split
	;

\ determine the absolute path of the given path, i.e. removing any '.' and '..' parts
: file-path-abspath ( path -- name )
	path os-getcwd file-path-abspath/cwd
	;

\ return just the final component of a path (does not have to be an existing file)
: file-path-basename ( path -- name )
	path os-getcwd file-path-basename/cwd
	;

\ return path EXCEPT for last component, as absolute/normalized path
: file-path-pathname ( path -- name )
	path os-getcwd file-path-pathname/cwd
	;
	
\ the /cwd versions below let you pass the cwd so they can be used easily in unittests

\ return just the final component of a path (does not have to be an existing file)
: file-path-basename/cwd ( path cwd -- name )
	path cwd file-path-abspath/cwd file-path-split -1 get
	;

\ return path EXCEPT for last component, as absolute/normalized path
: file-path-pathname/cwd ( path cwd -- name )
	\ cannot do obvious thing and split the abspath and rejoin, excluding last piece,
	\ since i would have to recreate the logic in file-path-abspath to get first part correct.
	\ so instead, make abspath and trim from end until first / is found
	path cwd file-path-abspath/cwd name!
	@loop
		name length 0 == if >>empty
		name -1 get "/" == if >>found-slash
		name 1 tail-drop name! <<loop
	@found-slash
		name 1 tail-drop return
	@empty
		\ did not find a / so path is pathname
		path
	;

\ this version takes the cwd as an argument so it can be used easily in unittests
: file-path-abspath/cwd ( path cwd -- name )
	@locals [ parts-in char-0 ]
	
	\ pre-normalize -- path must be one of:
	\	./name...
	\	../name...
	\	/name
	\
	\ if NOT then it must be "name..", so prepend "./"
	
	path file-path-split parts-in!
	
		\ "PARTS-IN:" . parts-in . CR
	
	\ does path start with '..' or '.'?
	parts-in 0 get "." == if >>prepend-cwd 
	parts-in 0 get ".." == if >>prepend-cwd
	\ see if path looks like a root directory
	path 0 get "/" == if >>is-root
	path 0 get "\" == if >>is-root
	\ hackish ... win/dos paths start with "letter:\" or "letter:/"
	path 0 get is-alphabetic? path 1 get ":" == path 2 get "\" == and and if >>is-drive-root
	path 0 get is-alphabetic? path 1 get ":" == path 2 get "/" == and and if >>is-drive-root
	\ else it is "name/..." so treat as if "./" is prepended
	>>prepend-cwd 
	
	@is-root
		\ path starts with \ or / so final path must start with /
		"/" char-0!
		>>walk
	
	@is-drive-root
		\ path starts with "letter:\" so final path must as well
		path 0 get char-0!
		>>walk
		
	@prepend-cwd
		\ path starts with '.' or '..', so first char of final path must be first char of cwd
		cwd 0 get char-0!
		\ prepend cwd on parts so ".." can be resolved by removing parts
		cwd file-path-split parts-in + parts-in!
			\ "PREPENDING CWD:" . parts-in . CR
	
	@walk
		\ fold over all parts-in to build parts-out
		parts-in
		{ ( newparts part )
			part ".." == if >>two-dots
			part "." == if >>one-dot
			\ else append to newparts and continue
			newparts part append return
			
			@two-dots
				\ got '..', so remove last piece, checking for errors
				newparts length 0 == if >>too-many-backups \ ran out of parts to back up
				newparts 1 tail-drop return
				
			@one-dot
				\ '.' does nothing
				newparts return
				
			@too-many-backups
				"Too many '..' in path, cannot resolve: " path + error 
		} [ ] fold 
		\ final accumulator on stack
		"/" string-join name!
		\ if didn't end up with char-0 at start, prepend it now (i.e. if i joined 'usr', 'local', 'bin', that will
		\ give 'usr/local/bin' instead of '/usr/local/bin')
		name 0 get char-0 != if >>add-slash
		>>done
		
		@add-slash "/" name + name!
		@done name
	;


