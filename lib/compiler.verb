(
	Work in progress -- seeing if entire language can be parsed by itself and
	then serialized into syntax-free form.

	If this works, eventually this can be used to bootstrap the language to get
	this working as the runtime syntax module.
	
	Copyright (c) 2022 Frank McIngvale, see LICENSE
)

: digit? ( string|symbol -- true|false; is single char a digit? )
	dup string? if >>string
		dup '0 < if >>notdigit
		dup '9 > if >>notdigit
		drop true return  ( symbol match )
	@string
		dup "0" < if >>notdigit
		dup "9" > if >>notdigit
		drop true return
	@notdigit drop false
	;

: any-digits? ( string|symbol -- true|false; does string/symbol contain ANY digits? )
	{ digit? } any
	;

: ltrim-char ( string char -- if char (single-char string) is at front of string, remove it )
	>L 0 +get L> == if >>trim
	return
	@trim 1 -1 slice
	;

: ltrim-sign ( string -- string with leading "+" or "-" removed [max 1] )
	0 +get "+" == if >>trim
	0 +get "-" == if >>trim
	return
	@trim 1 -1 slice
	;

: ltrim-digits ( string -- string with leftmost digits removed )
	@loop
		dup length 0 == if >>done
		0 +get digit? not if >>done
		1 -1 slice <<loop
	@done
	;

: int-string? ( string -- true|false if string can be parsed as integer )
		( "INT-STRING?:" . .S CR )
	dup any-digits? not if >>nodigits ( must have digits, not just +/- )
	ltrim-sign
	ltrim-digits
	length 0 == return
	@nodigits 
		( "@nodigits:" . .S CR )
		drop false
	;

: int-symbol? ( like above but for symbols )
		( "INT-SYMBOL?" . .S CR )
	unmake make-string 
		( "BEFORE CALL:" . .S CR )
	int-string?
	;

: float-string? ( string -- true|false if string can be parsed as float )
	( NOTE - this will ALSO match integers, so use int-string? first to rule those out )
	dup any-digits? not >>nodigits ( must have digits, not just +/-/./e )
	ltrim-sign
	ltrim-digits
	"." ltrim-char
	ltrim-digits
	"e" ltrim-char
	ltrim-sign
	ltrim-digits
	length 0 == return
	@nodigits drop false
	;

: float-symbol? ( as above but for symbols )
	unmake make-string float-string?
	;

: syntax-next ( convert next word from input to runnable object )
		( "syntax-next" . CR )
	reader-next
		( "reader-next" . .S CR )
	dup null? if >>null
	dup '( == if >>comment
	dup '{ == if >>lambda
	dup ': == if >>worddef
	dup 'def == if >>worddef ( synonym for ':' )
	dup 0 get '" == if >>string ( "... )
	( test for correct format before passing to parse-int or parse-float since those functions
	  will happily parse something like "123abc" as 123 )
	dup int-symbol? 
		( "AFTER INT-SYMBOL:" . .S CR )
	if >>integer
	dup 0 get '# != if >>nomatch dup 1 -1 slice float-symbol? if >>float
	@nomatch
	( leave unprocessed word on stack )
	return
	@null
	return ( leave null on stack )
	@worddef
	drop syntax-define-word return
	@comment
	drop syntax-comment return ( skip comment and return NEXT object )
	@lambda
	drop syntax-lambda return
	@string
	syntax-string return
	@integer
	parse-int return
	@float
	1 -1 slice parse-float return
	;

: syntax-define-word
		( "define-word" . CR )
	syntax-next ( name should be next )
		( "read name" . dup . CR )
	dup symbol? not if >>badname
	>L SP >L   ( L0=starting SP, L1=name )
		( 2 .L CR )
	@loop
	syntax-next ( get next processed object - assume it can be more than 1 object )
		( "NEXT" . dup . CR )
	dup '; == if >>endword
	<<loop
	@badname repr "Invalid name for word: " swap + error
	@endword
		( "ENDWORD, stack: " . .S CR )
	drop ( drop ; )
	L> SP - 1 - ( calc number of items )
		( "NR ITEMS:" . dup . " STACK NOW" . .S CR )  
	make-list
		( "MADE LIST:" . .S CR )
	L> 
	( save names of words as I parse them so I can serialize them later )
		( "ADD WORD NAME:" . dup . CR )
	dup DEFINED_WORDS ref swap append DEFINED_WORDS set!
		( "NOW MAKE WORD: " . .S CR )
	make-word
	syntax-next ( make-word has no return value, so return NEXT object )
	;

: syntax-string ( first string part already on stack )
	(
		"syntax-string:" . CR
	)
	>L ( L0 = string in progress )
	L0 ref -1 get '" == if >>endstring ( " see if its all one word )
	@loop
	(
		"string NOW:" . L0 ref . CR
		"stack now:" . .S CR
	)
	L0 ref 32 1 make-symbol + L0 set! ( add space before next piece )
	reader-next 
	(
		"piece:" . dup . CR
		"stack now:" . .S CR
	)
	dup null? if >>eof
	dup L0 ref swap + L0 set! ( string += piece )
	-1 get '" == if >>endstring ( " )
	<<loop
	@eof "Unexpected end of input in string" error
	@endstring
	(
		"POSTPROCESS STRING:" . L0 ref . CR
		"STACK NOW:" . .S CR
	)
	L0 ref dup length 2 - 1 swap slice ( remove quotes )
	unmake make-string ( symbol -> string )
	LP 1 + LP! ( remove locals )
	;

: syntax-lambda ( assumes { was just read & dropped )
	0 make-list 
	@loop
		( note - any inner lambdas will be handled automatically by syntax-next,
			so don't have to check for "{" here )
		syntax-next
		dup null? if >>eof
		dup '} == if >>closebrace
		append ( else append to list and continue ) <<loop
	@eof
		"Unexpected end of input inside { .. }" error
	@closebrace
		drop make-lambda return
		;

: syntax-comment ( assumes open paren just read )
	1 >L ( L0 = nesting )
	@loop
		reader-next ( puts symbol on stack )
		dup null? if >>eof
		dup ') == if >>closeparen
		dup '( == if >>openparen
		drop <<loop ( discard and continue )
	@closeparen
		LP ref 1 - LP set!
		LP ref 0 == if >>end
		drop <<loop
	@openparen
		LP ref 1 + LP set!
		drop <<loop
	@end
		LP 1 + LP!
		drop
		syntax-next return
	@eof
		"End of input inside comment!" error
	;

( 
	for-each -- call a lambda on each element of a sequence [any object that supports
   	'length' and 'slice' methods]

	lambda is called with current item of sequence on top of stack. for-each does not
	touch the stack otherwise.
)
: for-each ( object lambda -- call lambda on each object in string,symbol,list )
	(  "for-each:" . CR )
	>L dup length >L 0 >L ( L0=index, L1=length, L2=lambda )
	@loop
	( "index " . L0 ref . " length " . L1 ref . CR ) 
	L0 ref L1 ref >= if >>done
	L0 ref +get L2 ref 
	call ( call lambda with element on stack )
	L0 ref 1 + L0 set! <<loop
	@done drop LP 3 + LP!
	;

: serialize-escape-string ( string -- string with whitespace escaped )
	( "ESCAPE STRING:" .  CR )
	"" swap  ( escaped string )
	( .S CR )
	{ 
		( escaped string char )
		( "CHAR:" . dup . )
		unmake drop  ( escaped string charcode )
		dup 32 == if >>space
		dup 37 == if >>percent
		dup 10 == if >>lf 
		dup 13 == if >>cr 
		( "NORMAL CHAR:" . .S CR )
		1 make-string ( escaped string char )
		( "MADE STRING:" . .S CR )
		rot swap ( string escaped char )
		( "BEFORE ADD:" . .S CR )
		+ swap ( escaped+char string )
		( "AFTER ADD:" . .S CR )
		return
		@space ( escaped string charcode )
		drop swap "%32" + swap ( escaped+%32 string )
		return
		@percent ( escape % as %% )
		drop swap "%%" + swap ( escaped+%% string )
		return
		@lf drop swap "%10" + swap return ( \n -- %10 )
		@cr drop swap "%13" + swap return ( \r -- %13 )
	} for-each
	( "SERIALIZE FINISHED:" . .S CR )
	;

: serialize-object ( obj -- ; serialize obj to stdout )
	dup null? if >>null
	dup int? if >>int
	dup float? if >>float
	dup bool? if >>bool
	dup string? if >>string
	dup symbol? if >>symbol
	dup list? if >>list
	dup lambda? if >>lambda
	dup array? if >>array
	repr "Unknown obj in serialize-object:" swap + error
	@null ( n )
		"n" puts CR return
	@int ( i NNN )
		"i" . str puts CR return
	@float ( f NN.NNN )
		"f" . str puts CR return
	@bool ( b true|false )
		"b" . str puts CR return
	@string ( s SSS )
		"s" . serialize-escape-string puts CR return
	@symbol ( y SSS - symbols cannot contains spaces, \n, etc. so no escaping needed )
		"y" . repr puts CR return
	@list ( "L length" then serialized items )
		"L" . dup length str puts CR
		{ serialize-object } for-each ( items )
		return
	@lambda ( "F" then list serialized )
		"F" puts CR
		unmake serialize-object ( serialize list )
		return
	@array ( "a" then length serialized then items serialized )
		"a" . CR
		dup length serialize-object ( length )
		{ serialize-object } for-each ( items )
		return
		;

: byte-compile ( byte-compile source from current reader stream )
	( keep a list of all word definitions that I parse; I only want to serialize
	those, not EVERY word that is defined )
	var DEFINED_WORDS 1
	0 make-list DEFINED_WORDS set!
	SP >L ( L0=SP at start )
	@loop
	( read all parsed objects then make into a list )
	syntax-next
	dup null? if >>done <<loop
	@done
	drop
	( count # items added to stack and make list )
	L> SP - 1 - make-list
	( add this list as word __main__ )
	'__main__ make-word
	DEFINED_WORDS ref '__main__ append
	del DEFINED_WORDS
	( leave list of added words on stack )
	;

: byte-compile-file ( filename -- byte-compile filename and write output to stdout )
	reader-open-file byte-compile
	;

: byte-compile-string ( text -- byte-compile text and write output to stdout )
	reader-open-string byte-compile
	;

: serialize-all-words
	( takes list of words on top of stack and serializes them to stdout )
	{ "W" . dup repr puts CR .dumpword serialize-object } for-each 
	;

: compile-and-serialize ( filename )
	byte-compile-file ( this will be all code other than word definitions )
		( "BYTE COMPILE RESULTS:" . .S CR )

	( that left list of compiled words on stack )

	( this will all be written to a list -- will be length of DEFINED_WORDS )
	"L" . dup length str puts CR

	( write word defs first, assuming rest of code depends on them )
	serialize-all-words 
	;

( - check that locals were deleted - )
: sanity-check-locals
	LP LP_START ref != if >>badLP >>okLP
	@badLP
	"*** LOCALS NOT CLEANED UP ***" error
	@okLP
	;

: sanity-check-stack
	depth 0 == if >>okStack	
	"*** Stack not empty at exit ***" error
	@okStack 
	;

( -- watch for locals not being cleaned up -- )
var LP_START 1
LP LP_START set!

cmdline-args 0 get ( get filename to compile )
compile-and-serialize

sanity-check-locals
sanity-check-stack
