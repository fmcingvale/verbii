(
	Verbii compiler, written in verbii
	
	Copyright (c) 2022 Frank McIngvale, see LICENSE
)

( --- reader interface, used by compiler, but may be generally useful
	usage:
		" ... " reader-open-string
		or
		filename reader-open-file

		then reader-next until it returns null
)

( -- fyi -- this can't be in compiler.verb because its __main__ is not run on startup,
	so the vars never get defined 

	TODO - should fix compiler.verb since this really should be there
	-- )

var READER_TEXT 1 ( string )
var READER_TEXT_LEN 1
var READER_POS 1

( note - the reader-open-* functions discard any current input )

: reader-open-string ( string )
	READER_TEXT set!
	READER_TEXT ref length READER_TEXT_LEN set!
	0 READER_POS set!
	;

: reader-open-file ( filename )
	read-file reader-open-string
	;

: reader-peek-char ( -- char; get next char [string] from reader without advancing stream )
	READER_POS ref READER_TEXT_LEN ref >= if >>eof
	READER_TEXT ref READER_POS ref get ( char )
	return
	@eof 
		null
	;

: reader-next-char ( -- char; get next char [string] from reader stream or null on eof )
	READER_POS ref READER_TEXT_LEN ref >= if >>eof
	READER_TEXT ref READER_POS ref get ( char )
	READER_POS ref 1 + READER_POS set! ( char; ++pos )
	return
	@eof
		null
	;

: reader-next ( -- word ; get next word from reader stream, or null on eof )
	"" ( word )
	@skipws ( skip leading whitespace )
		reader-peek-char
		dup null? if >>null-on-read 
		ord 32 > if >>word-precheck
		reader-next-char ( word char; ++pos )
		drop
		<<skipws

	@null-on-read ( word null )
		drop >>eof

	@word-precheck ( word; check for special chars before looking for normal word )
		reader-peek-char ( word char; peek at next char without messing up word-loop )
		dup "\" == if >>skip-comment
		( not a special char, drop char and fall through to word-loop )
		drop 

	@word-loop ( word )
		reader-next-char ( word char )
		dup null? if <<null-on-read
		( check for whitespace )
		dup ord 32 <= if >>space  ( treat anything from ' ' to NUL as whitespace )
		( not whitespace, append and continue )
		+ <<word-loop
	
	@skip-comment ( word char )
		drop
	@skip-comment-loop ( word )
		( skip to end of line then start again )
		reader-next-char ( word char )
		dup null? if >>found-eol
		dup ord 13 == if >>found-eol
		dup ord 10 == if >>found-eol
		drop <<skip-comment-loop
	
		@found-eol drop <<skipws ( restart, leaving "" on stack )

	@space ( word char )
		drop ( fall through to return word below )

	@eof ( word ) 
		( return word, null on end of file )
		dup length 0 == if >>isnull
		string->symbol return ( return word as symbol )

	@isnull drop null return
	;

: digit? ( string|symbol -- true|false; is single char a digit? )
	dup string? if >>string
		dup '0 < if >>notdigit
		dup '9 > if >>notdigit
		drop true return  ( symbol match )
	@string
		dup "0" < if >>notdigit
		dup "9" > if >>notdigit
		drop true return
	@notdigit drop false
	;

: any-digits? ( string|symbol -- true|false; does string/symbol contain ANY digits? )
	{ digit? } any
	;

: ltrim-char ( string char -- if char (single-char string) is at front of string, remove it )
	>L 0 +get L> == if >>trim
	return
	@trim 1 -1 slice
	;

: ltrim-sign ( string -- string with leading "+" or "-" removed [max 1] )
	0 +get "+" == if >>trim
	0 +get "-" == if >>trim
	return
	@trim 1 -1 slice
	;

: ltrim-digits ( string -- string with leftmost digits removed )
	@loop
		dup length 0 == if >>done
		0 +get digit? not if >>done
		1 -1 slice <<loop
	@done
	;

: int-string? ( string -- true|false if string can be parsed as integer )
	dup any-digits? not if >>nodigits ( must have digits, not just +/- )
	ltrim-sign
	ltrim-digits
	length 0 == return
	@nodigits 
		drop false
	;

: int-symbol? ( like above but for symbols )
	unmake make-string 
	int-string?
	;

: float-string? ( string -- true|false if string can be parsed as float )
	( NOTE - this will ALSO match integers, so use int-string? first to rule those out )
	dup any-digits? not if >>nodigits ( must have digits, not just +/-/./e )
	ltrim-sign
	ltrim-digits
	"." ltrim-char
	ltrim-digits
	"e" ltrim-char
	ltrim-sign
	ltrim-digits
	length 0 == return
	@nodigits 
	drop false
	;

: float-symbol? ( as above but for symbols )
	unmake make-string float-string?
	;

: syntax-next ( convert next word from input to runnable object )
	reader-next
	dup null? if >>null
	dup '( == if >>comment
	dup '{ == if >>lambda
	dup ': == if >>worddef
	dup 'def == if >>worddef ( synonym for ':' )
	dup 0 get '" == if >>string ( "... )
	( test for correct format before passing to parse-int or parse-float since those functions
	  will happily parse something like "123abc" as 123 )
	dup int-symbol? 
	if >>integer
	dup 0 get '# != if >>nomatch dup 1 -1 slice float-symbol? if >>float
	@nomatch
	( leave unprocessed word on stack )
	return
	@null
	return ( leave null on stack )
	@worddef
	drop syntax-define-word return
	@comment
	drop syntax-comment return ( skip comment and return NEXT object )
	@lambda
	drop syntax-lambda return
	@string
	syntax-string return
	@integer
	parse-int return
	@float
	1 -1 slice parse-float return
	;

: syntax-define-word
	syntax-next ( name should be next )
	dup symbol? not if >>badname
	>L SP >L   ( L0=starting SP, L1=name )
	@loop
	syntax-next ( get next processed object - assume it can be more than 1 object )
	dup null? if >>eof
	dup '; == if >>endword
	<<loop
	@badname repr "Invalid name after ':' : " swap + error
	@eof "Unexpected end of input looking for ';'" error
	@endword
	drop ( drop ; )
	L> SP - 1 - ( calc number of items )
	make-list
	L> 
	( save names of words as I parse them so I can serialize them later )
	dup DEFINED_WORDS ref swap append DEFINED_WORDS set!
	make-word
	syntax-next ( make-word has no return value, so return NEXT object )
	;

: syntax-string ( first string part already on stack )
	>L ( L0 = string in progress )
	L0 ref -1 get '" == 
	L0 ref length 1 > and
		if >>endstring ( " see if its all one word )
	@loop
	L0 ref 32 1 make-symbol + L0 set! ( add space before next piece )
	reader-next 
	dup null? if >>eof
	dup L0 ref swap + L0 set! ( string += piece )
	-1 get '" == if >>endstring ( " )
	<<loop
	@eof "Unexpected end of input in string near: " L0 ref tostring + error
	@endstring
	L0 ref dup length 2 - 1 swap slice ( remove quotes )
	unmake make-string ( symbol -> string )
	LP 1 + LP! ( remove locals )
	;

: syntax-lambda ( assumes { was just read & dropped )
	0 make-list 
	@loop
		( note - any inner lambdas will be handled automatically by syntax-next,
			so don't have to check for "{" here )
		syntax-next
		dup null? if >>eof
		dup '} == if >>closebrace
		append ( else append to list and continue ) <<loop
	@eof
		"Unexpected end of input inside { .. }" error
	@closebrace
		drop make-lambda return
		;

: syntax-comment ( assumes open paren just read )
	1 >L ( L0 = nesting )
	@loop
		reader-next ( puts symbol on stack )
		dup null? if >>eof
		dup ') == if >>closeparen
		dup '( == if >>openparen
		drop <<loop ( discard and continue )
	@closeparen
		LP ref 1 - LP set!
		LP ref 0 == if >>end
		drop <<loop
	@openparen
		LP ref 1 + LP set!
		drop <<loop
	@end
		LP 1 + LP!
		drop
		syntax-next return
	@eof
		"Unexpected end of input inside comment" error
	;

( 
	for-each -- call a lambda on each element of a sequence [any object that supports
   	'length' and 'slice' methods]

	lambda is called with current item of sequence on top of stack. for-each does not
	touch the stack otherwise.
)
: for-each ( object lambda -- call lambda on each object in string,symbol,list )
	>L dup length >L 0 >L ( L0=index, L1=length, L2=lambda )
	@loop
	L0 ref L1 ref >= if >>done
	L0 ref +get L2 ref 
	call ( call lambda with element on stack )
	L0 ref 1 + L0 set! <<loop
	@done drop LP 3 + LP!
	;

: serialize-escape-string ( string -- string with whitespace escaped )
	"" swap  ( escaped string )
	{ 
		( escaped string char )
		unmake drop  ( escaped string charcode )
		dup 32 == if >>space
		dup 37 == if >>percent
		dup 10 == if >>lf 
		dup 13 == if >>cr 
		1 make-string ( escaped string char )
		rot swap ( string escaped char )
		+ swap ( escaped+char string )
		return
		@space ( escaped string charcode )
		drop swap "%32" + swap ( escaped+%32 string )
		return
		@percent ( escape % as %37 )
		drop swap "%37" + swap ( escaped+%37 string )
		return
		@lf drop swap "%10" + swap return ( \n -- %10 )
		@cr drop swap "%13" + swap return ( \r -- %13 )
	} for-each
	;

: serialize-object ( obj -- ; serialize obj to stdout )
	dup null? if >>null
	dup int? if >>int
	dup float? if >>float
	dup bool? if >>bool
	dup string? if >>string
	dup symbol? if >>symbol
	dup list? if >>list
	dup lambda? if >>lambda
	repr "Unknown obj in serialize-object:" swap + error
	@null ( n )
		"n" puts CR return
	@int ( i NNN )
		"i" . str puts CR return
	@float ( f NN.NNN )
		"f" . str puts CR return
	@bool ( b true|false )
		"b" . str puts CR return
	@string ( s SSS )
		"s" . serialize-escape-string puts CR return
	@symbol ( y SSS - symbols cannot contains spaces, \n, etc. so no escaping needed )
		"y" . repr puts CR return
	@list ( "L length" then serialized items )
		"L" . dup length str puts CR
		{ serialize-object } for-each ( items )
		return
	@lambda ( "F" then list serialized )
		"F" puts CR
		unmake serialize-object ( serialize list )
		return
		;

: byte-compile ( byte-compile source from current reader stream )
	( keep a list of all word definitions that I parse; I only want to serialize
	those, not EVERY word that is defined )
	var DEFINED_WORDS 1
	0 make-list DEFINED_WORDS set!
	SP >L ( L0=SP at start )
	@loop
	( read all parsed objects then make into a list )
	syntax-next
	dup null? if >>done <<loop
	@done
	drop
	( count # items added to stack and make list )
	L> SP - 1 - make-list
	( add this list as word __main__ )
	'__main__ make-word
	DEFINED_WORDS ref '__main__ append
	del DEFINED_WORDS
	( leave list of added words on stack )
	;

: byte-compile-file ( filename -- byte-compile filename and write output to stdout )
	reader-open-file byte-compile
	;

: byte-compile-string ( text -- byte-compile text and write output to stdout )
	reader-open-string byte-compile
	;

: serialize-all-words
	( takes list of words on top of stack and serializes them to stdout )
	{ "W" . dup repr puts CR .dumpword serialize-object } for-each 
	;

: compile-and-serialize ( filename )
	byte-compile-file ( this will be all code other than word definitions )

	( that left list of compiled words on stack )

	( this will all be written to a list -- will be length of DEFINED_WORDS )
	"L" . dup length str puts CR

	( write word defs first, assuming rest of code depends on them )
	serialize-all-words 
	;

