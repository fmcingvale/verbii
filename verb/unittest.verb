
\ Unittest framework
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

'UNITTEST-NR-PASS 0 make-var
'UNITTEST-NR-FAIL 0 make-var
'UNITTEST-SP0 void make-var
\ maximum % difference when checking floating point results, on [0..1]
'UNITTEST-MAX-PCTDIFF 1e-6 make-var
\ NOT the smallest float that can be represented, but the value that is
\ defined as "really really small" where %diff test would give bad results
\ for small amounts of rounding error. so if BOTH values are below this
\ value, the %diff is defined as 0%.
\
\ values below this threshold cannot be meaningfully compared, so this
\ might need additional tuning.
'UNITTEST-TINY-FLOAT 1e-12 make-var

\ must call this once
: unittest-init
	\ remember starting value of SP to make sure it matches at end
	SP UNITTEST-SP0!
	;

: unittest-report-pass ( msg )
	"    " . msg . CR
	UNITTEST-NR-PASS 1 + UNITTEST-NR-PASS!
	;

: unittest-report-fail ( msg )
	"*** ERROR ***" . msg . CR
	UNITTEST-NR-FAIL 1 + UNITTEST-NR-FAIL!
	;
	
\ test is called with stack: ( expect actual )
: expect-generic ( test testname expect actual )
	expect actual test call if >>ok
		"*** ERROR *** Expecting" . expect repr . "but got" . actual repr . CR 
		UNITTEST-NR-FAIL 1 + UNITTEST-NR-FAIL!
		return
	@ok 
		"    " . expect . testname . actual . ": ok" . CR 
		UNITTEST-NR-PASS 1 + UNITTEST-NR-PASS!
	;

\ test must be a comparison operator taking args ( A B ) and producing a result that is checked vs expect
: expect-generic-compare ( test testname A B expect )
	@locals [ actual ]
	A B test call actual!
	actual expect == if >>ok
		"Expecting " expect str + " for " + A str + " " + testname + " " + B str + " but got " + actual str +
			unittest-report-fail
		return
	@ok
		A str " " + testname + " " + B str + ": ok" + 
			unittest-report-pass
	;	

\ exact equality, no coercion allowed other than usual int+float comparison
: expect== ( A B )
	{ == } "==" A B true expect-generic-compare
	;

: expect!= ( A B )
	{ != } "!=" A B true expect-generic-compare
	;

: expect> ( A B )
	{ > } ">" A B true expect-generic-compare
	;

: expect>= ( A B )
	{ >= } ">=" A B true expect-generic-compare
	;

: expect< ( A B )
	{ < } "<" A B true expect-generic-compare
	;

: expect<= ( A B )
	{ <= } "<=" A B true expect-generic-compare
	;

: expect-true ( actual )
	{ == } "true?" true actual expect-generic
	;

: expect-false ( actual )
	{ == } "false?" false actual expect-generic
	;
	
\ % difference between a & b as [0..1]
: %diff ( a b -- p )
	\ special cases
	a 0 == b 0 == and if >>zerozero  \ divide by zero
	a b + 0 == if >>zerosum \ divide by zero
	\ if EITHER is zero, then equation simplifies to: abs(-b) / ((b)/2) == abs(b) * 2 / b == 2.
	\ also if both are really small, you get values approaching 2 as well (e.g. 1e-12 and 1e-16 gives
	\ a %diff of 1.999... 
	
	\ so final check is if BOTH values fall below tiny float, then define that as 0% difference
	a abs UNITTEST-TINY-FLOAT < b abs UNITTEST-TINY-FLOAT < and if >>zerozero
	
	\ abs(a-b) / ((a+b)/2)
	a b - abs a b + 2 / / return
	@zerozero
		\ both are zero (or close to zero) so 0% difference
			\ "ZEROZERO" . CR \ uncomment for debugging to see which cases fall out here
		0 return
	@zerosum 
		\ a == -b so would divide by zero - define this as 100% difference
			\ "ZEROSUM" . CR \ uncomment for debugging to see which cases fall out here
		1 return
	;

\ test that values are equal within UNITTEST-MAX-PCTDIFF
: expect==f ( A B )
	{ %diff UNITTEST-MAX-PCTDIFF <= } "~=" A B true expect-generic-compare
	;

\ test that values are not equal (more than UNITTEST-MAX-PCTDIFF)
: expect!=f ( A B )
	{ %diff UNITTEST-MAX-PCTDIFF > } "~!=" A B true expect-generic-compare
	;
	
\ ( takes a lambda that takes nothing from the stack and leaves one result on the stack.
\  compares the result to 'a' - print OK or error if error is too large )
\ : expect-f ( lambda a )
\ 	\ "Expect" . dup . swap call "got" . dup . 
\ 	swap call
\	pct-diff \ dup "(" .. .. " %)" . CR
\	#1e-6 > if >>toolarge
\		"OK" . CR return
\	@toolarge "** !! ERROR !! **" . CR
\	;
	
\ get stack representation as a string "[ .. ]".
\ does not affect stack.
: str.stack ( -- s )
	"]" s!
	{ ( i )
		SP i + ref repr " " + s + s!
	} 0 1 depth 3 - for-count \ subtract off 3 for (lambda 0 1)
	"[ " s +
	;
	
\ expect a stack string like "[ ... ]"
: expect-stack ( expect )
	@locals [ actual ]
	str.stack actual!
	{ == } "stack?" expect actual expect-generic
	;
	
: unittest-summary
	"* Summary:" . CR
	"    Tests passed:" . UNITTEST-NR-PASS . CR
	"    Tests failed:" . UNITTEST-NR-FAIL . CR
	SP UNITTEST-SP0 ==
		{ "    Stack: ok" . CR }
		{ "    ** ERROR ** Items left on stack" . CR }
		ifelse
	;
