\ Unittests for string operations
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

"unittest" import

: test-string-compares
	"abcde" "abcde" expect==
	"aBcdE" "aBcdE" expect==
	"aBcdE" "aBcde" expect!=
	"xyz" "xyzw" expect!=
	
	"hello" 'hello expect!=
	'hello "hello" expect!=
	
	"abcde" "abcdef" expect<
	"abcdef" "abcde" expect>
	;
	
: test-string-make-unmake
	"abcde" unmake 
	"[ 97 98 99 100 101 5 ]" expect-stack 6 ndrop
	
	"ABCDE" unmake
	"[ 65 66 67 68 69 5 ]" expect-stack 6 ndrop
	
	"verbii" 118 101 114 98 105 105 6 make-string expect==
	;

: test-string-get
	"a" "abcdefgh" 0 get expect==
	"b" "abcdefgh" 1 get expect==
	"f" "abcdefgh" 5 get expect==
	"h" "abcdefgh" 7 get expect==
	"h" "abcdefgh" -1 get expect==
	"g" "abcdefgh" -2 get expect==
	"d" "abcdefgh" -5 get expect==
	"a" "abcdefgh" -8 get expect==
	void "abcdefgh" -9 get expect==
	void "abcdefgh" 8 get expect==
	;
	
: test-string-slicing
	"cde" "abcdefgh" 2 3 slice expect==
	"f" "abcdefgh" 5 1 slice expect==
	"efgh" "abcdefgh" 4 -1 slice expect==
	"h" "abcdefgh" -1 1 slice expect==
	"cde" "abcdefgh" -6 3 slice expect==
	"" "abcdefgh" -100 3 slice expect==
	"fgh" "abcdefgh" 5 100 slice expect==
	;
	
: test-string-ops
	6 "abcdef" length expect==
	0 "" length expect==
	
	"abcdef" "abc" "def" + expect==
	"abc" "abc" "" + expect==
	"def" "" "def" + expect==
	
	"abcde" " 	 	abcde" string-ltrim expect==
	"abcde" " abcde" string-ltrim expect==
	"abcde" "abcde" string-ltrim expect==
	"" "  	 	  " string-ltrim expect==
	"" "" string-ltrim expect==
	
	"abcde" string-empty? expect-false
	"e" string-empty? expect-false
	"  	e  		" string-empty? expect-false
	"" string-empty? expect-true
	" " string-empty? expect-true
	" 	 			   " string-empty? expect-true
	
	"abc::def::ghi" [ "abc" "def" "ghi" ] "::" string-join expect==
	"abc" [ "abc" ] "::" string-join expect==
	"" [ ] "::" string-join expect==
	"abcdefghi" [ "abc" "def" "ghi" ] "" string-join expect==
	
	'Hello "Hello" string->symbol expect==
	"World" 'World symbol->string expect==
	
	38 "&" ord expect==
	56 "8" ord expect==
	60 "<" ord expect==
	32 " " ord expect==
	81 "Q" ord expect==
	121 "y" ord expect==
	126 "~" ord expect==
	
	"&" 38 chr expect==
	"8" 56 chr expect==
	"<" 60 chr expect==
	" " 32 chr expect==
	"Q" 81 chr expect==
	"y" 121 chr expect==
	"~" 126 chr expect==
	
	"A" upper? expect-true
	"M" upper? expect-true
	"Z" upper? expect-true
	"a" upper? expect-false
	"h" upper? expect-false
	"z" upper? expect-false
	"4" upper? expect-false
	">" upper? expect-false
	
	"a" lower? expect-true
	"t" lower? expect-true
	"z" lower? expect-true
	"A" lower? expect-false
	"R" lower? expect-false
	"Z" lower? expect-false
	"6" lower? expect-false
	"?" lower? expect-false
	
	"A" "a" toupper expect==
	"K" "k" toupper expect==
	"Z" "z" toupper expect==
	"M" "M" toupper expect==
	"3" "3" toupper expect==
	"!" "!" toupper expect==
	
	"a" "A" tolower expect==
	"e" "E" tolower expect==
	"z" "Z" tolower expect==
	"f" "f" tolower expect==
	"7" "7" tolower expect==
	"*" "*" tolower expect==
	
	"abcde123%&" "ABCdE123%&" string-lower expect==
	"ABCDE123%&" "aBcde123%&" string-upper expect==
	
	[ "abc" "def" "ghi" ] "abc/def:ghi" "&*/#:$" string-split expect==
	[ "abc" "def" "ghi" ] "&abc/def:ghi$" "&*/#:$" string-split expect==
	[ "abc" ] "&abc/" "&*/#:$" string-split expect==
	[ ] "&/#:" "&*/#:$" string-split expect==
	[ "abc" "def" "ghi" ] "#&abc$/def::/ghi*#" "&*/#:$" string-split expect==
	;
	
\ make sure that round trip of BYTE -> chr -> ord -> BYTE produces same value for 0..255
: test-8-bit-strings
	{ ( x )
		@locals [ b c ]
			x chr b!
			b ord x expect==
		}
	0 1 256 for-count
	;
	
: make-a-test-string ( nr )
	""
	"a string:" append nr str append
	;
	
: test-string-literals
	\ make sure 'append' does not affect string literals (i.e. they are normallly
	\ deepcopied on instantiation like list literals)
	"a string:100" 100 make-a-test-string expect==
	"a string:200" 200 make-a-test-string expect==
	"a string:300" 300 make-a-test-string expect==
	
	\ make sure 'deepcopy' breaks the link from original string so append does not
	\ affect it
	"abc" dup
	deepcopy "def" append "abcdef" expect==
	"abc" expect==
	;
	
: test-string-dict-keys
	@locals [ k d ]
	\ show that mutating a key string after adding to dict does not affect key in dict
	"abc" k!
	[ ] make-dict d!
	d k 123 put!
	k "def" append! \ mutate k
	
	k "abcdef" expect== \ key in dict should NOT have changed to "abcdef"
	d k get void expect==
	d "abc" get 123 expect==
	;
	
	
	
	