\ *FOR HISTORICAL REFERENCE ONLY*
\
\ This sample will no longer run - I was testing v1 vs v2 closures speed before removing v1
\
\ Some benchmarking of nested looping with v1 vs v2 closures
\
\ Results (C++):
\	v1 closures: 4.8 seconds
\	v2 closures: 2.1 seconds
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

\ "version 1" closures
: lots-of-loops-v1 @( NR )
	@locals [ total ]
	[ 0 ] total! \ so inner scopes can modify
	@{
		@{
			@{
				total 0 get 1 + total 0 rot put drop
			} NR repeat
		} NR repeat
	} NR repeat
	
	"TOTAL LOOPS:" . total 0 get . CR
	;
	
\ "version 2" closures
:V2 lots-of-loops-v2 ( NR )
	@locals [ total ]
	0 total! \ inner scopes can modify even atoms in v2 closures
	{
		{
			{
				\ now this looks much more natural compared to the code above
				total 1 + total!
			} NR repeat
		} NR repeat
	} NR repeat
	
	"TOTAL LOOPS:" . total . CR
	;
	
'T0 null make-var
'T1 null make-var

run-time T0!
100 lots-of-loops-v1
run-time T1!

"v1 time:" . T1 T0 - . CR

run-time T0!
100 lots-of-loops-v2
run-time T1!

"v2 time:" . T1 T0 - . CR
