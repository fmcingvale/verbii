\
\ Programming problems from various places
\
\ Note the code here implements the solutions found at the sites (where there is a site given)
\ -- the challenge here being to implement the algorithms in verbii, not always come up with 
\ the algorithm itself.
\

( *** math-based *** )

( find sum of the digits in a string )

( sum digits in string, ignoring non-digits )

( test if a large number [as a string] is divisible by 11 )
( ref: https://www.geeksforgeeks.org/check-large-number-divisible-11-not/ )

( calc difference of two large numbers [as strings] )
( ref: https://www.geeksforgeeks.org/difference-of-two-large-numbers/?ref=lbp )

( happy numbers )
( ref: https://rosettacode.org/wiki/Happy_numbers )

( print all permutations of characters in a string )
( ref: https://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/?ref=leftbar-rightbar )

( *** lists *** )

( reverse a list )

:V2 reverse-list ( list -- reversed )
	@locals [ i ]
	[ ] reversed!
	0 i!
	@loop
		i list length >= if >>done \ if i >= length then done
		list -1 i - get \ get with negative index
		reversed swap append reversed!
		i 1 + i! <<loop
	@done
		reversed
		;

11 22 33 44 55 66 77 88 99 9 make-list
"List:    " . dup . CR
"Reversed:" . reverse-list . CR

( quicksort a list )


( *** strings *** )

( reverse a string )

:V2 reverse-string ( string -- reversed )
	( same basic idea as reverse-list except strings are immutable so used + instead of append )
	@locals [ i ]
	"" reversed!
	0 i!
	@loop
		i string length >= if >>done
		string -1 i - get
		reversed swap + reversed!
		i 1 + i! <<loop
	@done
		reversed
		;

"ABCDEFG"
"String:  " . dup . CR
"Reversed:" . reverse-string . CR
