\ Tests lists
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

"unittest" import

:V2 test-make-list
	@locals [ A B ]
	10 20 30 40 4 make-list "[ [ 10 20 30 40 ] ]" expect-stack A!
	4 A length expect==

	0 make-list "[ [ ] ]" expect-stack A!
	0 A length expect==

	11 22 33 3 make-list "[ [ 11 22 33 ] ]" expect-stack A!
	44 55 66 77 4 make-list "[ [ 44 55 66 77 ] ]" expect-stack B!
	A B + "[ [ 11 22 33 44 55 66 77 ] ]" expect-stack A!
	7 A length expect==

	11 22 2 make-list 33 44 55 3 make-list 66 1 make-list 0 make-list 77 88 99 3 make-list
	5 make-list
	"[ [ [ 11 22 ] [ 33 44 55 ] [ 66 ] [ ] [ 77 88 99 ] ] ]"
	expect-stack drop
	
	\ test unmake here too
	[ 11 22 33 44 ] unmake "[ 11 22 33 44 4 ]" expect-stack 5 ndrop
	;
	
:V2 test-list-literals
	[ 11 22 33 ] "[ [ 11 22 33 ] ]" expect-stack drop
	[ ] "[ [ ] ]" expect-stack drop
	[ 11 [ 22 [ 33 [ 44 [ 55 66 ] 77 ] 88 ] 99 ] 100 ] 
		"[ [ 11 [ 22 [ 33 [ 44 [ 55 66 ] 77 ] 88 ] 99 ] 100 ] ]" expect-stack drop
	
	( test that literals are correctly handled in literal lists )
	[ 11 [ hello "world of fun" ] [ 4.25 #8.125 ] [ true false null ] void another-symbol ]
	"""[ [ 11 [ 'hello "world of fun" ] [ #4.25 #8.125 ] [ <true> <false> <null> ] 'void 'another-symbol ] ]""" expect-stack drop

	;
	
:V2 test-list-comparison
	[ 11 22 33 44 ] [ 11 22 33 44 ] expect==
	[ 11 22 33 44 ] [ 11 22 31 44 ] expect!=
	[ 11 22 33 44 ] [ 11 22 3 44 ] expect>
	[ 11 22 33 44 ] [ 11 22 3 44 ] expect>=
	[ 11 22 33 44 ] [ 11 22 33 44 ] expect>=
	[ 11 22 33 4 ] [ 11 22 33 44 ] expect<
	[ 11 22 33 4 ] [ 11 22 33 44 ] expect<=
	[ 11 22 33 44 ] [ 11 22 33 44 ] expect<=
	
	[ [ 11 [ 22 33 ] 44 ] [ 55 [ 66 77 ] 88 ] ] 
	[ [ 11 [ 22 33 ] 44 ] [ 55 [ 66 77 ] 88 ] ] expect==
	
	[ [ 11 [ 22 33 ] 44 ] [ 55 [ 66 77 ] 88 ] ] 
	[ [ 11 [ 22 33 ] 44 ] [ 55 [ 66 75 ] 88 ] ] expect!=
	
	[ [ 11 [ 22 33 ] 44 ] [ 55 [ 66 77 ] 88 ] ] 
	[ [ 11 [ 22 33 ] 44 ] [ 55 [ 62 77 ] 88 ] ] expect>
	
	[ [ 11 [ 22 33 ] 44 ] [ 55 [ 66 71 ] 88 ] ] 
	[ [ 11 [ 22 33 ] 44 ] [ 55 [ 66 75 ] 88 ] ] expect<
	
	\ check with unequal length lists - again like a string test
	[ 1 2 3 4 5 ] [ 1 2 3 4 ] expect>
	[ 1 2 3 ] [ 1 2 3 4 ] expect<
	;
	
:V2 test-list-identity
	\ dup maintains object identity
	[ 11 22 33 ] dup 44 append "[ [ 11 22 33 44 ] [ 11 22 33 44 ] ]" expect-stack drop drop
	\ deepcopy makes new object
	[ 11 22 33 ] dup deepcopy 44 append "[ [ 11 22 33 ] [ 11 22 33 44 ] ]" expect-stack drop drop
	\ test deeper deepcopy
	[ 11 [ 22 [ 33 [ 44 ] 55 ] 66 ] 77 ] dup deepcopy expect==
	\ test that extend maintains object identity
	[ 11 22 33 ] dup [ 4 5 6 ] extend "[ [ 11 22 33 4 5 6 ] [ 11 22 33 4 5 6 ] ]" expect-stack drop drop
	\ test that + does not maintain object identity
	[ 11 22 ] dup [ 33 44 ] + "[ [ 11 22 ] [ 11 22 33 44 ] ]" expect-stack drop drop
	;
	
:V2 test-list-get-put
	\ list get
	11 [ 11 22 33 44 55 66 ] 0 get expect==
	22 [ 11 22 33 44 55 66 ] 1 get expect==
	33 [ 11 22 33 44 55 66 ] 2 get expect==
	44 [ 11 22 33 44 55 66 ] 3 get expect==
	55 [ 11 22 33 44 55 66 ] 4 get expect==
	66 [ 11 22 33 44 55 66 ] 5 get expect==
	
	\ out of bounds -> void
	void [ 11 22 33 44 55 66 ] 6 get expect==
	void [ 11 22 33 44 55 66 ] -7 get expect==
	
	\ list put
	[ 10 20 30 40 50 ] 
	2 "abc" put
	0 'xyz put
	4 false put
	"""[ [ 'xyz 20 "abc" 40 <false> ] ]""" expect-stack drop

	[ 11 22 33 44 55 ]
	-1 "hello" put
	-3 8.125 put
	-5 'world put
	"""[ [ 'world 22 #8.125 44 "hello" ] ]""" expect-stack drop
	;
	
:V2 test-list-slice
	[ 50 60 70 ] [ 10 20 30 40 50 60 70 80 90 100 ] 4 3 slice expect==
	[ 60 70 80 90 ] [ 10 20 30 40 50 60 70 80 90 100 ] -5 4 slice expect==
	[ 40 50 60 70 80 90 100 ] [ 10 20 30 40 50 60 70 80 90 100 ] 3 100 slice expect==
	[ 70 80 90 100 ] [ 10 20 30 40 50 60 70 80 90 100 ] 6 -1 slice expect==
	[ ] [ 10 20 30 40 50 60 70 80 90 100 ] 7 0 slice expect==
	[ 80 ] [ 10 20 30 40 50 60 70 80 90 100 ] 7 1 slice expect==
	;
	
:V2 test-list-misc
	5 [ 11 22 33 44 55 ] length expect==
	3 [ 11 [ 22 [ 33 [ 44 ] 55 ] 66 ] 77 ] length expect==
	;

