\ Unittests for functional routines, control structures and function/lambda defs
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

: test-jumps
	11 22 >>THREE @FIVE 55 66 >>SEVEN @THREE 33 44 <<FIVE @SEVEN 77 88
	"[ 11 22 33 44 55 66 77 88 ]" expect-stack
	8 ndrop \ i prefer ndrop to clear to make sure i'm keeping track of whats on the stack
	
	{ @ONE 11 22 >>THREE @NINE 99 return @THREE 33 44 >>FIVE @SEVEN 77 88 <<NINE @FIVE 55 66 <<SEVEN }
	call
	"[ 11 22 33 44 55 66 77 88 99 ]" expect-stack
	9 ndrop
	
	\ repeated labels are OK since << >> makes them unambiguous
	11 >>X @W 55 >>W @X 22 >>Y @Z 44 <<W @Y 33 <<Z @W 66 
	"[ 11 22 33 44 55 66 ]" expect-stack
	6 ndrop
	;
	
: test-if-forms
	\ if
	100 100 == if >>TRUE >>FALSE @TRUE 1234 >>END @FALSE 5678 @END
	"[ 1234 ]" expect-stack drop
	
	200 200 == if >>TRUE 8888 >>END @TRUE 5678 @END
	"[ 5678 ]" expect-stack drop
	
	100 300 == if >>TRUE >>FALSE @TRUE 9999 >>END @FALSE 8765 @END
	"[ 8765 ]" expect-stack drop
	
	300 200 == if >>TRUE 4321 >>END @TRUE 9999 @END
	"[ 4321 ]" expect-stack drop
	
	\ implementation note: only 'if' is a builtin word; the rest are library functions
	
	\ ifthen
	10 20 == 
		{ 777 } ifthen 888
	
	"[ 888 ]" expect-stack 1 ndrop
	
	20 20 == 
		{ 777 } ifthen 888
	
	"[ 777 888 ]" expect-stack 2 ndrop
		
	\ ifelse
	11 22 ==
		{ 111 } { 222 } ifelse 333
	"[ 222 333 ]" expect-stack 2 ndrop
	
	22 22 ==
		{ 111 } { 222 } ifelse 333
	"[ 111 333 ]" expect-stack 2 ndrop
	
	;

\ show that forward references are fine
: *ccc 11 *ddd 88 ;
: *ddd 22 *eee 77 ;
: *eee 33 *fff 66 ;
: *fff 44 55 ;

\ defs with and without explicit return	
: *ggg 12 34 56 ;
: *hhh 123 456 789 return 444 ;

: test-define-word
	*ccc
	"[ 11 22 33 44 55 66 77 88 ]" expect-stack 8 ndrop
	
	\ show that forward references work for dynamically generated code as well
	[ 12 *nnn 21 ] '*mmm make-word
	[ 34 *ooo 43 ] '*nnn make-word
	[ 56 *ppp 65 ] '*ooo make-word
	[ 78 87 ] '*ppp make-word
	*mmm
	"[ 12 34 56 78 87 65 43 21 ]" expect-stack 8 ndrop
	
	*ggg
	"[ 12 34 56 ]" expect-stack 3 ndrop
	
	*hhh
	"[ 123 456 789 ]" expect-stack 3 ndrop
	
	\ show that a word can be redefined after being deleted first
	[ 111 222 333 ] '*yyy make-word
	*yyy
	"[ 111 222 333 ]" expect-stack 3 ndrop
	
	'*yyy ,,del 
	
	[ "aaa" "bbb" "ccc" ] '*yyy make-word
	*yyy
	"""[ "aaa" "bbb" "ccc" ]""" expect-stack 3 ndrop
	
	\ ensure that functions can't be modified by dumping to list
	[ 11 22 33 44 ] '*foobar make-word
	'*foobar .dumpword
	
	"[ [ 11 22 33 44 ] ]" expect-stack
	
	( ensure i can't modify word from dumped list )
	2 777 put
	
	"[ [ 11 22 777 44 ] ]" expect-stack drop
	
	\ show that *foobar didn't change
	'*foobar .dumpword
	"[ [ 11 22 33 44 ] ]" expect-stack drop
	
	;
	
: test-lambdas
	\ stack->list->lambda->call
	-172383
		111 222 333 444 '+ '* '- 7 make-list
		make-lambda
		call
	expect==
	
	[ aa 11 bb 22 cc ] make-lambda
	"[ { 'aa 11 'bb 22 'cc } ]" expect-stack
	unmake
	"[ [ 'aa 11 'bb 22 'cc ] ]" expect-stack
	unmake
	"[ 'aa 11 'bb 22 'cc 5 ]" expect-stack 6 ndrop
	
	( -- simple example of passing lambdas to another function -- )
	'saything { ( lambda -- ) "The " 1 lambda call + " is " + 2 lambda call + } make-var

	( called with cmd on TOS )
	"The ocean is blue" { ( cmd ) cmd 1 == if >>one "blue" return @one "ocean" } saything call expect==
	"The grass is green" { ( cmd ) cmd 1 == if >>one "green" return @one "grass" } saything call expect==
	"The rose is red" { ( cmd ) cmd 1 == if >>one "red" return @one "rose" } saything call expect==
	
	\ this was a bug in the interpreters -- bad assumption that dicts didn't need to be
	\ pushed as literals ...
	11 22 [ ] make-dict 33 44 5 make-list make-lambda
	call "[ 11 22 { } 33 44 ]" expect-stack 5 ndrop
	;
	
: test-any-all
	\ tests of any? and all? )
	"abcde" { "e" == } any? expect-true
	"01234" { "9" == } any? expect-false
	
	[ 10 20 30 40 ] { 30 > } any? expect-true
	[ 10 20 30 40 ] { 0 <  } any? expect-false

	"mnopqr" { "m" >= } all? expect-true
	"mnopqr" { "r" <= } all? expect-true

	"mnolpqr" { "m" >= } all? expect-false
	"mnotpqr" { "r" <= } all? expect-false
	;

: test-repeat
	@locals [ s ]
	"" s!
	{ s "A" + s! } 8 repeat
	"AAAAAAAA" s expect==
	;

: test-for-each
	@locals [ L ]
	[ ] L!
	[ 10 20 30 40 50 ]
	{ ( elem ) [ ] elem append L + L! } for-each
	[ 50 40 30 20 10 ] L expect==
	;
	
: test-for-each-reverse
	@locals [ s ]
	"" s!
	"ABCDEF"
	{ ( c ) s c + s! } for-each-reverse 
	"FEDCBA" s expect==
	;
	
: test-for-each-i
	@locals [ L ]
	[ ] L!
	"ABCD"
	{ ( i c )
		L i 3 * append c append L!
	} for-each-i 
	[ 0 "A" 3 "B" 6 "C" 9 "D" ] L expect==
	;
	
: test-for-each-dict
	@locals [ sum ]
	0 sum!
	[ [ "A" 13 ] [ "E" 71 ] [ "Z" 107 ] [ "D" 257 ] ] make-dict
	{ ( key val )
		\ since iteration order isn't guaranteed, make a sum from (key,val) that doesn't depend on order
		sum key ord val * + sum!
	} for-each-dict
	\ make expected value
	"A" ord 13 *
	"E" ord 71 *
	"Z" ord 107 *
	"D" ord 257 * + + +
	sum expect==
	;
	
: test-for-count
	@locals [ L ]
	[ ] L!
	{ ( i )
		L i append L!
	}
	10 4 8 for-count
	[ 10 14 18 22 26 30 34 38 ] L expect==
	
	[ ] L!
	{ ( i )
		L i append L!
	}
	2.5 -0.5 10 for-count
	[ 2.5 2.0 1.5 1.0 0.5 0 -0.5 -1.0 -1.5 -2.0 ] L expect==
	;

: test-find
	3
	"zebfxt" { "f" == } find expect==
	
	0
	"zebfxt" { "z" == } find expect==
	
	5
	"zebfxt" { "t" == } find expect==
	
	void
	"zebfxt" { "r" == } find expect==
	
	0
	[ 8 4 -2 3 9 0 -4 14 1 5 ] { 8 == } find expect==
	9
	[ 8 4 -2 3 9 0 -4 14 1 5 ] { 5 == } find expect==
	
	\ make sure it finds first match
	1
	"udwpcnwdzn" { "d" == } find expect==
	
	4
	[ 8 4 -2 3 9 0 -4 14 1 5 ] { 8 > } find expect==

	;

: test-fold
	"*a*b*c*d*"
	
		"abcd"
		{ ( accum c )
			accum c + "*" +
		} "*" fold 
		
	expect==

	[ 5 15 6 18 7 21 8 24 ]
	
		[ 5 6 7 8 ]
		{ ( accum n )
			accum n append n 3 * append
		} [ ] fold 
		
	expect==
	
	;
	
: test-map
	"DEFG"
		"ABCD" { ( c ) c ord 3 + chr } map
	expect==
	
	[ 15 25 35 45 ]
		[ 10 20 30 40 ] { ( n ) n 5 + } map
	expect==
	
	\ contrived example to test with closure
	@locals [ lettermap ]
	[ [ "A" "Z" ] [ "B" "F" ] [ "C" "R" ] [ "D" "T" ] ] make-dict lettermap!
	
	"TZRF"
		"DACB" { ( c ) lettermap c get } map
	expect==
	;
	
: test-filter
	"zqvur"
		"zhqpvuanr" { ( c ) c "q" >= } filter
	expect==
	
	[ 55 17 ]
		[ 55 10 -14 8 17 1 -6 ] { ( n ) n 10 > } filter
	expect==
	;

: cond-form-1 ( i )
	[
		[ { i 0 == } { "1-ZERO" } ]
		[ { i 1 == } { "1-ONE" } ]
		\ ugh .. here the else is NOT quoted since this will be deepcopied and not built at runtime
		[ else { "1-NEITHER" } ]
	]
	cond
	;

\ this was a bug -- the form-1 would work fine, since it contained no captured vars in the 'else',
\ so was stored as a literal, however form-2 would break since the list would be flattened and the 'else' would be run
\ since symbols were not being quoted on expansion
: cond-form-2 ( i )
	[
		[ { i 0 == } { "2-ZERO" } ]
		[ { i 1 == } { "2-ONE" } ]
		[ else { "i: " i str + } ]
	]
	cond
	;
	
: test-cond
	0 cond-form-1 "1-ZERO" expect==
	1 cond-form-1 "1-ONE" expect==
	2 cond-form-1 "1-NEITHER" expect==
	
	0 cond-form-2 "2-ZERO" expect==
	1 cond-form-2 "2-ONE" expect==
	2 cond-form-2 "i: 2" expect==
	;
	