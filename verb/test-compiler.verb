\ Test compiler functions
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

: test-digit?
	"0" digit? expect-true
	"5" digit? expect-true
	"0" ord 1 - chr digit? expect-false
	"9" ord 1 + chr digit? expect-false
	;
	
: test-any-digits?
	"abc3de" any-digits? expect-true
	"3abc" any-digits? expect-true
	"abc6" any-digits? expect-true
	"7" any-digits? expect-true
	
	"abcde" any-digits? expect-false
	"abc" any-digits? expect-false
	"a" any-digits? expect-false
	"" any-digits? expect-false
	;
	
: test-ltrim-char
	"abc" "*abc" "*" ltrim-char expect==
	"abc" "abc" "*" ltrim-char expect==
	
	"" "*" "*" ltrim-char expect==
	"" "" "*" ltrim-char expect==
	;
	
: test-ltrim-sign
	"123" "+123" ltrim-sign expect==
	"+123" "++123" ltrim-sign expect==
	"123" "-123" ltrim-sign expect==
	"-123" "--123" ltrim-sign expect==
	"123" "123" ltrim-sign expect==
	"" "" ltrim-sign expect==
	"" "+" ltrim-sign expect==
	"" "-" ltrim-sign expect==
	;

: test-ltrim-digits
	"abc" "123abc" ltrim-digits expect==
	"" "123" ltrim-digits expect==
	"abc" "abc" ltrim-digits expect==
	"" "" ltrim-digits expect==
	;
	
: test-int-string?
	"123" int-string? expect-true
	"+123" int-string? expect-true
	"-123" int-string? expect-true
	"3" int-string? expect-true
	"+3" int-string? expect-true
	"-3" int-string? expect-true
	
	"123a" int-string? expect-false
	"-123a" int-string? expect-false
	"+123a" int-string? expect-false
	"+123.4" int-string? expect-false
	"-123.4" int-string? expect-false
	"123.4" int-string? expect-false
	;
	
: test-float-string?
	"123" float-string? expect-true
	"123." float-string? expect-true
	"123.5" float-string? expect-true
	"123.567" float-string? expect-true
	"123.567" float-string? expect-true
	"123e6" float-string? expect-true
	"123e-5" float-string? expect-true
	"123.456e-5" float-string? expect-true
	
	"+123" float-string? expect-true
	"+123." float-string? expect-true
	"+123.5" float-string? expect-true
	"+123.567" float-string? expect-true
	"+123.567" float-string? expect-true
	"+123e6" float-string? expect-true
	"+123e-5" float-string? expect-true
	"+123.456e-5" float-string? expect-true
	
	"-123" float-string? expect-true
	"-123." float-string? expect-true
	"-123.5" float-string? expect-true
	"-123.567" float-string? expect-true
	"-123.567" float-string? expect-true
	"-123e6" float-string? expect-true
	"-123e-5" float-string? expect-true
	"-123.456e-5" float-string? expect-true
	
	"+123z" float-string? expect-false
	"+123.z" float-string? expect-false
	"+123.5z" float-string? expect-false
	"+123.56z7" float-string? expect-false
	"+12z3.567" float-string? expect-false
	"+123ez6" float-string? expect-false
	"+123ze-5" float-string? expect-false
	"+123.45z6e-5" float-string? expect-false
	;
	
: test-opcodes
	\ use make-opcode since #op causes immediate execution
	'FRAME-GET 10 20 30 make-opcode
	'FRAME-GET 10 20 30 make-opcode expect==
	
	'FRAME-GET 10 20 30 make-opcode
	'FRAME-GET 10 20 31 make-opcode expect!=
	
	'FRAME-GET 10 20 30 make-opcode
	'FRAME-SET 10 20 30 make-opcode expect!=
	
	\ make sure packed format is correct
	240520399873 'FRAME-SET 12 34 56 make-opcode opcode-packed expect==
	;
	
: test-string-compile
	\ since the test suite may be running pre-compiled, the compiler itself isn't getting
	\ checked if the .b files exist. so test compiling from strings to ensure the compiler
	\ is working.
	@locals [ f ]
	"""
	\ closures are the most complex part of the compiler, so this should be a good sanity check
	: foo-758 ( a b )
		{ ( c d )
			{ ( e f )
				a b c d e f * + - * -
			}
		}
		;
	"""
	compile-and-load-string
	12 34 foo-758 f!
	56 78 f call f!
	91 23 f call
	
	\ rewriting to check value ...
	\ (a - (b * (c - (d + (e * f)))))
	\ python test code:
	\ $ 12 - (34 * (56 - (78 + (91 * 23))))) = 71922
	71922 expect==
	
	\ NOTE! when calling compile-and-load-string, it is the caller's responsibility to
	\ run __main__ (or not) and delete __main__ when finished
	'__main__ ,,del 
	
	\ example with jumps to make sure jumps in dynamically compiled strings are translated to opcodes
	"""
	: foo-9957 ( a b c d -- out )
		[ ]
		>>one
		@two b append >>three
		@four d append >>end
		@one a append <<two
		@end return
		@three c append <<four
		;
	"""
	compile-and-load-string
	[ 11 22 33 44 ] 11 22 33 44 foo-9957 expect==
	;
	
\ stress tests for jump optimizer
: jumptest-1 ( x )
	x 1 == if >>one
	x 2 == if >>two
	x 3 == if >>three
	"Unknown" return
	@one "ONE" return
	@two "TWO" return
	@three "THREE" return
	;
	
: jumptest-2
	[ ]
	>>one
	@two "2" append >>three
	@four "4" append >>five
	@one "1" append <<two
	@three "3" append <<four
	@five "5" append
	;
	
: jumptest-3
	[ ]
	>>one
	@two "2" append >>three
	@four "4" append >>five
	@six "6" append return
	@one "1" append <<two
	@three "3" append
	[
		{
			[ ]
			>>one
			@two "L2" append >>three
			@four "L4" append return
			@one "L1" append <<two
			@three "L3" append <<four
		}
	]
	0 get call extend <<four
	@five "5" append <<six
	;
	
: test-jump-optimization
	@locals [ res ]
	[ ] res!
	res 1 jumptest-1 append 2 jumptest-1 append 3 jumptest-1 append 4 jumptest-1 append drop
	[ "ONE" "TWO" "THREE" "Unknown" ] res expect==
	[ "1" "2" "3" "4" "5" ] jumptest-2 expect==
	[ "1" "2" "3" "L1" "L2" "L3" "L4" "4" "5" "6" ] jumptest-3 expect==
	;
	