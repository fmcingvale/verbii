\ Quicksort 
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

\ split list into two lists:
\	- truelist: all items where test(list[i]) is true
\	- falselist: all items not in truelist
: partition @( list test -- truelist falselist )
	@locals [ i ]
	[ ] truelist!
	[ ] falselist!
	
		\ "PARTITION: list=" . list . "test=" . test . CR
	
	\ for each list item ...
	list
	@{ @( elem )
		elem test call if >>true
		falselist elem append falselist! return
		@true truelist elem append truelist! return
	} for-each

		\ "PARTITION RESULTS:" . truelist . falselist . CR
	truelist falselist
	;

: quicksort @( list -- sorted )
		\ "QUICKSORT LIST:" . list . CR
	@locals [ A B x ]
	list length 1 <= if >>no-op
	list length 2 == if >>two-items
	\ pick any value to be the pivot - easier in verbii to pick start and slice rest
	\ (note - must remove the pivot value, not enough to let it go into the >= list -- 
	\ for example [ 1 2 3 ], after partitioning on 1 the lists would be [ ] [ 1 2 3 ] so the
	\ subdividing would never terminate)
	list 0 get x! 			\ x = list[0]
	list 1 -1 slice list! 	\ list = list[1:] 		
	\ split into <x and >=x lists
	list @{ x < } partition B! A!
	\ recursively sort A & B lists
	A quicksort A!
	B quicksort B!
	\ return A+[x]+B
	A x append B +
	return
	
	@no-op list return
	@two-items
		list 0 get list 1 get <= if <<no-op
		list 1 get list 0 get 2 make-list return
	;
	
"* Split into positive and negative lists ..." . CR
[ 50 -22 10 81 -71 45 ] { 0 > } partition swap . . CR

"* Split into >2 and <=2 length ..." . CR
[ "ab" "cdef" "g" "hi" "jklmo" "pqr" "st" "uvwx" "yz" ] { length 2 > } partition swap . . CR

: test-quicksort @( items )
	"Quicksorting:" . items . CR
	items quicksort . CR
	;
	
[ 10 5 9 2 3 8 16 32 ] test-quicksort

[ "horse" "bear" "elephant" "zebra" "ant" "lemming" ] test-quicksort

\ make list of nr random integers on interval [ a b )
: rand-intlist @( a b nr )
	