\ Simple chess engine - purely for fun, not practicality :-) Very simple & slow design.
\ Also this is a semi-real app so makes a better excercise for programming in verbii
\ versus the shorter demos.
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE
	
\ chess code starts here
	
\ pieces
: P-PAWN 0 ;
: P-KNIGHT 1 ;
: P-BISHOP 2 ;
: P-ROOK 3 ;
: P-QUEEN 4 ;
: P-KING 5 ;
: P-NONE 6 ;

'PIECE-CHARS [ "P" "N" "B" "R" "Q" "K" "." ] make-var

\ sides
: WHITE 0 ;
: BLACK 1 ;
( side -- other )
: other 1 + 2 mod ;

\ ------ board state -------

\ coordinates: row=0,col=0 is a1; row=0,col=7 is h1; row=7,col=7 is h8

\ pieces list (P-*), 1 for each square
'PIECES null make-var
	
\ colors list (WHITE|BLACK), 1 for each square
'COLORS null make-var

\ side to move next - WHITE or BLACK
'SIDE-TO-MOVE WHITE make-var

\ castling availability as [ W-OO W-OOO B-OO B-OOO ] (bools)
'CASTLING null make-var

\ en-passant target square [0-63] or -1
\ this is the square directly BEHIND (relative to its kindside) 
\ the pawn that just jumped two squares
'EPSQUARE -1 make-var

\ halfmove number for 50-move rule
'HALFMOVE 0 make-var

\ fullmove number
'FULLMOVE 0 make-var

\ track king squares
'KING-SQUARE-W -1 make-var
'KING-SQUARE-B -1 make-var 

\ must call this at least once to init board state
: clear-board ( -- ) 
	[ ] PIECES!
	{ ( i ) PIECES P-NONE append! } 0 1 64 for-count
	[ ] COLORS!
	{ ( i ) COLORS WHITE append! } 0 1 64 for-count
	WHITE SIDE-TO-MOVE!
	[ true true true true ] CASTLING!
	-1 EPSQUARE!
	\ set these to invalid
	-1 KING-SQUARE-W!
	-1 KING-SQUARE-B!
	;
	
\ get square (0..63) given row,col
\ ( row col -- square )
: square-index
	swap 8 * + 
	;
	
\ get row,col from square index
\ ( square -- row col )
: square-to-rowcol 
	8 /mod swap
	;
	
\ get piece at square
: piece-at ( square )
	PIECES square get
	;
	
\ get color at square (only valid if piece != P-NONE)
: color-at ( square )
	COLORS square get
	;
	
\ get printable char for given piece & color
: piece-char ( piece color -- char )
	color WHITE == if >>white
	PIECE-CHARS piece get tolower return \ black = lowercase
	@white PIECE-CHARS piece get
	;
	
\ get printable char for piece at square
: piece-char-at ( square -- char )
	PIECES square get
	COLORS square get
		piece-char
	;

\ parse a piece char into its P-* and color	
: char-to-piece ( char -- piece color )
	@locals [ ip ]
	PIECE-CHARS { char toupper == } find ip! \ find index into PIECE_CHARS
	ip void? if >>bad-char
	char upper? if >>white
	ip BLACK return 
	@white ip WHITE return
	@bad-char "Bad piece character:" char str + error
	;

\ convert square (0..63) to algebraic notation
: square-to-algebraic ( square )
	square 8 /mod ( remainder quot )
	swap "a" ord + chr
	swap "1" ord + chr +
	;

\ convert algebraic notation (a1..h8) to square (0..63)
: algebraic-to-square ( alg )
	alg string? not if >>bad-alg
	alg length 2 != if >>bad-alg
	"abcdefgh" { alg 0 get == } find void? if >>bad-alg
	"12345678" { alg 1 get == } find void? if >>bad-alg
	alg 1 get ord "1" ord - 8 * 
	alg 0 get ord "a" ord - +
	return

	@bad-alg
		"Bad algebraic coordinate:" alg str + error
	;

: print-board ( -- )
	@locals [ row col ]
	0 row!
	@loop-row
		row 8 >= if >>done-board
		0 col!
		@loop-col
			col 8 >= if >>done-row
			7 row - col square-index piece-char-at .
			col 1 + col! <<loop-col
		@done-row
			CR
			row 1 + row! <<loop-row
	@done-board

	\ side to move
	"Side to move:" .
	SIDE-TO-MOVE WHITE == 
		{ "white" . CR } { "black" . CR } ifelse

	\ castling status
	"Castling:" .
	CASTLING 0 get { "K" puts } ifthen
	CASTLING 1 get { "Q" puts } ifthen
	CASTLING 2 get { "k" puts } ifthen
	CASTLING 3 get { "q" puts } ifthen
	\ if no castling available, print - 
	CASTLING { } any? not { "-" . } ifthen
	CR
	
	"Ep-Target:" . 
	EPSQUARE -1 ==
		{ "None" . }
		{ EPSQUARE square-to-algebraic . }
		ifelse CR	
	
	"Halfmove:" . HALFMOVE .. ", Fullmove:" . FULLMOVE . CR
	;
	
: put-piece ( square piece color -- )
	PIECES square piece put!
	COLORS square color put!
	piece P-KING != if >>done
	\ update king square
	WHITE color == if >>white
	\ black
	square KING-SQUARE-B! >>done
	@white square KING-SQUARE-W!
	@done
	;

: square-empty? ( square -- result )
	PIECES square get P-NONE ==
	;
	
\ put & drop result, since normally putting into an object that
\ code has saved a ref to
: put! put drop ;
\ same for append
: append! append drop ;
\ and for extend
: extend! extend drop ;

\ set board state from a FEN string
: set-from-fen ( fen -- )
	@locals [ parts row col c i ]
	clear-board
	\ split string into its fields
	fen " " string-split parts!
		\ "FEN PARTS:" . parts . CR
		
	\ parse pieces, e.g. "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR"
	7 row!
	0 col!
	0 i!
	@pieces-loop
		parts 0 get i get c! \ next char of string
			\ "ROW=" . row . "COL=" . col . "CHAR:" . c . CR
		c void? if >>pieces-end-string 
		c digit? if >>pieces-blanks \ got # for blank squares
		c "/" == if >>pieces-slash
		\ else it must be a piece for (row,col)
		row col square-index c char-to-piece 
			\ "CHAR TO PIECE:" . dup . CR 
			put-piece
		col 1 + col! >>pieces-next
	@pieces-blanks
		c parse-int col + col! \ skip # blanks
		>>pieces-next
	@pieces-slash
		row 1 - row! 0 col! >>pieces-next
	@pieces-next
		i 1 + i! <<pieces-loop
	@pieces-end-string
		row 0 == col 8 == and if >>pieces-ok
		"Pieces string too short in FEN:" parts 0 get + error
		
	@pieces-ok

	\ parts[1] is "w" or "b" to move next
	parts 1 get
	[
		[ [ "w" ] { WHITE SIDE-TO-MOVE! } ]
		[ [ "b" ] { BLACK SIDE-TO-MOVE! } ]
		[ else { "Bad side to move in FEN string" error } ]
	]
	case

	\ parts[2] is castling availability - any of KQkq-
	\ set initially to none
	[ false false false false ] CASTLING!
		\ K?
		parts 2 get { "K" == } find void? if >>check-W-OOO
		CASTLING 0 true put!
	@check-W-OOO
		\ Q?
		parts 2 get { "Q" == } find void? if >>check-B-OO
		CASTLING 1 true put!
	@check-B-OO
		\ k?
		parts 2 get { "k" == } find void? if >>check-B-OOO
		CASTLING 2 true put!
	@check-B-OOO
		\ q?
		parts 2 get { "q" == } find void? if >>castling-done
		CASTLING 3 true put!
	@castling-done

	\ parts[3] is en-passant target square or '-' if none
	parts 3 get "-" == 
		{ -1 EPSQUARE! }
		{ parts 3 get algebraic-to-square EPSQUARE! }
		ifelse
	
	\ parts[4] is halfmove number
	parts 4 get parse-int HALFMOVE!
		
	\ parts[5] is fullmove
	parts 5 get parse-int FULLMOVE!
	;

clear-board

: valid-rowcol? ( row col )
	row 0 >=
	row 8 <
	col 0 >=
	col 8 <
	and and and
	;
	
\ for pieces that have fixed attack spaces relative to their position (kings, knights)
\
\ square = square that piece is assumed to be on
\ moves = list of [ dRow dCol ] (delta row/col) to move from square
\
\ this only returns squares that the piece COULD attack; caller must still check if there
\ is a piece on the square or not
: gen-fixed-attacks ( square moves -- attacks )
	@locals [ row col row+ col+ ]
	[ ] attacks!
	square square-to-rowcol col! row!
	moves
	{ ( move )
		\ calc row+dRow, col+dCol and see if that is a valid square
		row move 0 get + row+!
		col move 1 get + col+!
		row+ col+ valid-rowcol? not if >>done
		\ valid, so add square to attacks
		attacks row+ col+ square-index append attacks!
		@done
	} for-each
	
	attacks
	;

\ generate a table of all fixed attacks for a piece at each square
: gen-all-fixed-attacks ( moves -- attack-table ) 
	[ ] attack-table!
	{ ( square )
		attack-table
			square moves gen-fixed-attacks
			append attack-table!
	} 0 1 64 for-count
	attack-table
	;
	
\ generate attack squares for sliding pieces - pieces moves from square along (dRow,dCol) direction
\
\ squares are returned as a list of empty squares + the final blocked square, or void if all are empty
: gen-sliding-attacks ( square dRow dCol -- attacks blocked )
	@locals [ row col ]
	[ ] attacks!
	square square-to-rowcol col! row!
	@loop
		row dRow + row!
		col dCol + col!
		row col valid-rowcol? not if >>off-board 
		row col square-index square!
		square piece-at P-NONE != if >>blocked 
		\ valid & empty -- add to attacks
		attacks square append! <<loop
	@off-board
		\ all were empty and i went off side of board, so
		\ no square was blocked
		attacks void return
	@blocked
		\ square is blocked (be either side) so stop & return
		attacks square return
	;

\ generate sliding attacks for multiple direction vectors
\	movedirs is list of [ dRow dCol ]		
\
\ here, blockers is always a list (can be empty)
: gen-all-sliding-attacks ( square movedirs -- attacks blockers )
	[ ] attacks!
	[ ] blockers!
	movedirs
	{ ( dir )
		square dir unmake drop gen-sliding-attacks \ ( attacks blocked )
		\ if blocked is not void, add to blockers list
		dup void? not
			{ blockers swap append blockers! }
			{ drop } ifelse
			
		\ add attacks to list (use extend so i don't change object identity vs attacks
		\ defined in outer scope!)
		attacks swap extend attacks!
	} for-each
	
	attacks blockers
	;
	
\ generate attacks for king of given side at square (king does not have
\ to actually be there); these will be ALL squares the king can reach,
\ regardless of whether something is on the destination square
'KING-MOVEDIRS [ [ 1 0 ] [ -1 0 ] [ 0 1 ] [ 0 -1 ] [ 1 1 ] [ 1 -1 ] [ -1 1 ] [ -1 -1 ] ] make-var

\ pregenerated list of king attacks indexed by square
'KING-ATTACKS-BY-SQUARE [ ] make-var

\ pregenerate KING-ATTACKS-BY-SQUARE
: gen-all-king-attacks ( -- ) 
	KING-MOVEDIRS gen-all-fixed-attacks
		KING-ATTACKS-BY-SQUARE!
	;
	
\ generate attacks for knight of given side at square (knight does not have
\ to actually be there); these will be ALL squares the knight can reach,
\ regardless of whether something is on the destination square
'KNIGHT-MOVEDIRS [ [ 2 1 ] [ 2 -1 ] [ -2 1 ] [ -2 -1 ] [ 1 2 ] [ 1 -2 ] [ -1 2 ] [ -1 -2 ] ] make-var

\ pregenerated list of knight attacks indexed by square
'KNIGHT-ATTACKS-BY-SQUARE [ ] make-var

\ pregenerate KNIGHT-ATTACKS-BY-SQUARE
: gen-all-knight-attacks ( -- ) 
	KNIGHT-MOVEDIRS gen-all-fixed-attacks
		KNIGHT-ATTACKS-BY-SQUARE!
	;

\ make list of squares a pawn at square of given side can attack
\ (a piece must be at the destination square)
\ en-passant is NOT checked here -- it is not an attack that can attack
\ the king which is a primary use of the attacks lists.
: gen-pawn-attacks ( square side -- attacks )
	@locals [ row col ]
	[ ] attacks!
	
	side BLACK == if >>black
	\ gen for white pawn
	square square-to-rowcol col! row!
	row 7 >= if >>no-attacks \ pawn on last row?? anyways, cannot attack
	\ attack left?
	col 1 >=
	square 7 + piece-at P-NONE !=
	square 7 + color-at BLACK ==
		and and not if >>check-w-cap-right
		attacks square 7 + append attacks!
		
	@check-w-cap-right
	col 7 <
	square 9 + piece-at P-NONE !=
	square 9 + color-at BLACK ==
		and and not if >>done
		attacks square 9 + append attacks!
		>>done
	
	@black
	\ gen for black pawn
	square square-to-rowcol col! row!
	row 0 <= if >>no-attacks \ pawn on last row?? anyways, cannot attack
	\ attack left?
	col 1 >=
	square 9 - piece-at P-NONE !=
	square 9 - color-at WHITE ==
		and and not if >>check-b-cap-right
		attacks square 9 - append attacks!
		
	@check-b-cap-right
	col 7 <
	square 7 - piece-at P-NONE !=
	square 7 - color-at WHITE ==
		and and not if >>done
		attacks square 7 - append attacks!
	
	@done
		attacks return
		
	@no-attacks [ ] return
	;
	
\ move object
: new-move ( piece side squareFrom squareTo )
	\ fields: 
	\	tag 
	\	piece
	\	side
	\	squareFrom 
	\	squareTo
	\	pieceCaptured
	\	squareCaptured
	'move piece side squareFrom squareTo P-NONE null
	7 make-list
	;
	
\ is obj a move object?
: move? ( obj )
	obj list? not if >>no 
	obj 0 get 'move == if >>yes
	@no false return
	@yes true return
	;

\ get printable move, long version
: move-to-str-long ( move -- s )
	""
		move move-piece move move-side piece-char "-" + +
		move move-squareFrom square-to-algebraic +
		move move-isCapture? not if >>skip
		"x" +
		@skip
		move move-squareTo square-to-algebraic +
		\ append -ep-target for en-passant
		move move-isEnPassant? not if >>done
		"-ep-" +
		move move-squareCaptured square-to-algebraic +
		
		@done
	;
	
\ print a move verbosely
: print-move-long ( move )
	move move-to-str-long .
	;
	
\ setters/getters -- for efficiency these assume move is valid - caller should
\ check with move? if unsure before calling these
\
\ the setters leave the move on the stack so these can be chained together
: move-piece ( move -- piece ) move 1 get ;
: move-piece! ( move piece -- move ) move 1 piece put ;

: move-side ( move -- side ) move 2 get ;
: move-side! ( move side -- move ) move 2 piece put ;

: move-squareFrom ( move -- square ) move 3 get ;
: move-squareFrom! ( move square -- move' ) move 3 square put ;

: move-squareTo ( move -- square ) move 4 get ;
: move-squareTo! ( move square -- move' ) move 4 square put ;

: move-pieceCaptured ( move -- piece ) move 5 get ;
: move-pieceCaptured! ( move piece -- move' ) move 5 piece put ;

: move-squareCaptured ( move -- square ) move 6 get ;
: move-squareCaptured! ( move square -- move' ) move 6 square put ;
	
: move-isCapture? ( move -- result ) move move-pieceCaptured P-NONE != ;

\ e.p. is the only time that squareTo != squareCaptured, when not null
: move-isEnPassant? ( move -- result )
	move move-squareCaptured null? not 
	move move-squareCaptured move move-squareTo !=
	and
	;
	
"Making king attack table ..." . CR	
gen-all-king-attacks

"Making knight attack table ..." . CR	
gen-all-knight-attacks

\ attacks is from gen-fixed-attacks
: gen-fixed-moves ( piece square attacks side -- moves )
	[ ] moves!
	attacks
	{ ( squareTo )
		\ see what is at squareTo
		squareTo piece-at P-NONE == if >>empty
		\ not empty - see if its opposing color
		squareTo color-at side other == if >>capture
		\ my own piece is on squareTo, so no move generated
		return
		@empty
			\ move to empty square
			moves
				piece side square squareTo new-move append moves!
			return
		@capture
			\ gen capture
			moves
				piece side square squareTo new-move
				squareTo piece-at move-pieceCaptured!
				squareTo move-squareCaptured!
				append moves!
			return
	} for-each
	moves
	;
	
\ (attacks,blockers) is from gen-all-sliding-attacks
: gen-sliding-moves ( piece square attacks blockers side -- moves )
	[ ] moves!
	\ all the squares in attacked are empty, so make those first
	attacks
	{ ( squareTo )
		\ always non-capturing move
		moves
			piece side square squareTo new-move append moves!
	} for-each
	
	\ now i have to check if blockers are opposite side (voids were already
	\ filtered out in gen-all-sliding-squares)
	blockers
	{ ( squareTo )
		squareTo color-at side == if >>done \ blocked by my piece, so i'm done
		\ else its a capture
		moves
			piece side square squareTo new-move
			squareTo piece-at move-pieceCaptured!
			squareTo move-squareCaptured!
			append moves!
		@done
	} for-each
	moves
	;
	
\ NOTE - all the gen-PIECE-moves functions are pseudo-legal - they are the literal moves
\ the piece can make, regardless of whether they put/leave their king in check

: gen-king-moves ( square side -- moves )
	P-KING square KING-ATTACKS-BY-SQUARE square get side gen-fixed-moves
	;
	
: gen-knight-moves ( square side -- moves )
	P-KNIGHT square KNIGHT-ATTACKS-BY-SQUARE square get side gen-fixed-moves
	;
	
'ROOK-MOVEDIRS [ [ 1 0 ] [ -1 0 ] [ 0 1 ] [ 0 -1 ] ] make-var

\ piece is a parameter since this is used for both queen and rook generation
: gen-rook-moves ( square side piece -- moves )
	@locals [ attacks blockers ]
	\ gen attacks & blocked squares
	square ROOK-MOVEDIRS gen-all-sliding-attacks blockers! attacks!
	piece square attacks blockers side gen-sliding-moves
	\ return moves
	;

'BISHOP-MOVEDIRS [ [ 1 1 ] [ -1 1 ] [ 1 -1 ] [ -1 -1 ] ] make-var

\ piece is a parameter since this is used for both queen and bishop generation
: gen-bishop-moves ( square side piece -- moves )
	@locals [ attacks blockers ]
	\ gen attacks & blocked squares
	square BISHOP-MOVEDIRS gen-all-sliding-attacks blockers! attacks!
	piece square attacks blockers side gen-sliding-moves
	\ return moves
	;
	
: gen-queen-moves ( square side -- moves )
	square side P-QUEEN gen-bishop-moves
	square side P-QUEEN gen-rook-moves
	extend
	;
	
: gen-pawn-moves ( square side -- moves )
	@locals [ attacks move row col ]
	[ ] moves!
	\ find squares i can attack
	square side gen-pawn-attacks
	\ make these into moves
	{ ( squareTo )
		moves
		P-PAWN side square squareTo new-move
			squareTo piece-at move-pieceCaptured!
			squareTo move-squareCaptured!
			append moves!
	} for-each
	
	square square-to-rowcol col! row!
	
	side BLACK == if >>b-forw-1
	\ forward 1
	row 7 >= if >>w-forw-2
	square 8 + piece-at P-NONE != if >>w-forw-2 \ occupied?
		moves
		P-PAWN side square square 8 + new-move
		append moves!
		
	@w-forw-2 
	row 1 != if >>w-ep
	square 8 + piece-at P-NONE != if >>w-ep
	square 16 + piece-at P-NONE != if >>w-ep
		moves
		P-PAWN side square square 16 + new-move 
		append moves! >>w-ep
		
	@b-forw-1
	row 1 < if >>b-forw-2
	square 8 - piece-at P-NONE != if >>b-forw-2 \ occupied?
		moves
		P-PAWN side square square 8 - new-move
		append moves!
	
	@b-forw-2 
	row 6 != if >>b-ep
	square 8 - piece-at P-NONE != if >>b-ep \ occupied?
	square 16 - piece-at P-NONE != if >>b-ep \ occupied?
		moves
		P-PAWN side square square 16 - new-move 
		append moves! >>b-ep
		
	\ en-passant, white
	@w-ep 
	\ check left
	col 0 >
	square 7 + EPSQUARE ==
		and not if >>w-ep-right 
		moves
		P-PAWN side square square 7 + new-move
		square 1 - move-squareCaptured!
		P-PAWN move-pieceCaptured!
		append!		
	
	@w-ep-right
	\ check right
	col 7 <
	square 9 + EPSQUARE ==
		and not if >>done
		moves
		P-PAWN side square square 9 + new-move
		square 1 + move-squareCaptured!
		P-PAWN move-pieceCaptured!
		append!		
		>>done 
	
	\ en-passant, black
	@b-ep 
	\ check left
	col 0 >
	square 9 - EPSQUARE ==
		and not if >>b-ep-right 
		moves
		P-PAWN side square square 9 - new-move
		square 1 - move-squareCaptured!
		P-PAWN move-pieceCaptured!
		append!		
	
	@b-ep-right
	\ check right
	col 7 <
	square 7 - EPSQUARE ==
		and not if >>done
		moves
		P-PAWN side square square 7 - new-move
		square 1 + move-squareCaptured!
		P-PAWN move-pieceCaptured!
		append!		
		>>done 
		
	@done
		moves return
	;
	
\ generate pseudolegal moves for side (moves are not checked to see if they
\ put the king into/leave the king in check)
: gen-pseudo-moves ( side -- moves )
	@locals [ piece ]
	[ ] moves!
	\ for each square ...
	{ ( i )
		i piece-at piece!
		piece P-NONE == if >>done \ empty square, skip
		i color-at side != if >>done \ wrong color piece

		\ generate moves for piece
		piece P-PAWN == if >>pawn
		piece P-ROOK == if >>rook 
		piece P-BISHOP == if >>bishop 
		piece P-KNIGHT == if >>knight 
		piece P-QUEEN == if >>queen
		piece P-KING == if >>king 
		"Unknown piece:" piece str + error
		
		@pawn moves i side gen-pawn-moves extend moves! >>done
		@rook  moves i side P-ROOK gen-rook-moves extend moves! >>done
		@bishop moves i side P-BISHOP gen-bishop-moves extend moves! >>done
		@knight moves i side gen-knight-moves extend moves! >>done
		@queen moves i side gen-queen-moves extend moves! >>done
		@king moves i side gen-king-moves extend moves! >>done
		@done
	} 0 1 64 for-count
	moves
	;

\ get a list of all squares attacked by side
\ does NOT include:
\	* en-passant moves - those cannot attack king and that is the
\     primary use for this function
\	* castling moves, since those are not attacks
: gen-attacks ( side -- attacks )
	@locals [ piece blockers sub-attacks ]
	[ ] attacks!
	\ for each square ...
	{ ( i )
		i piece-at piece!
		piece P-NONE == if >>done \ empty square, skip
		i color-at side != if >>done \ wrong color piece

		\ generate moves for piece
		piece P-PAWN == if >>pawn
		piece P-ROOK == if >>rook 
		piece P-BISHOP == if >>bishop 
		piece P-KNIGHT == if >>knight 
		piece P-QUEEN == if >>queen
		piece P-KING == if >>king 
		"Unknown piece:" piece str + error
		
		@pawn attacks i side gen-pawn-attacks extend attacks! >>done 
		@rook 
			\ gen attacks & blocked squares
			i ROOK-MOVEDIRS gen-all-sliding-attacks blockers! sub-attacks!
			attacks sub-attacks extend blockers extend attacks! >>done
		@bishop
			\ gen attacks & blocked squares
			i BISHOP-MOVEDIRS gen-all-sliding-attacks blockers! sub-attacks!
			attacks sub-attacks extend blockers extend attacks! >>done
		@queen 
			\ gen attacks & blocked squares
			i ROOK-MOVEDIRS gen-all-sliding-attacks blockers! sub-attacks!
			attacks sub-attacks extend blockers extend attacks! >>done
			\ gen attacks & blocked squares
			i BISHOP-MOVEDIRS gen-all-sliding-attacks blockers! sub-attacks!
			attacks sub-attacks extend blockers extend attacks! >>done
		@knight
			attacks KNIGHT-ATTACKS-BY-SQUARE i get extend attacks! >>done
		@king
			attacks KING-ATTACKS-BY-SQUARE i get extend attacks! >>done
		@done
	} 0 1 64 for-count
	attacks
	;		

\ make move -- assumes move is valid
: make-move ( move -- )
	\ remove from squareFrom
	move move-squareFrom P-NONE WHITE put-piece 
	\ if capture, remove
	move move-isCapture? not if >>skip
	move move-squareCaptured P-NONE WHITE put-piece 
	@skip
	\ place on squareTo
	move move-squareTo move move-piece move move-side put-piece
	
	\ **TODO** move rook on castling
	;

\ unmake move -- assumes move is valid AND that move was just made	
: unmake-move ( move -- )
	\ remove from squareTo
	move move-squareTo P-NONE WHITE put-piece
	\ place on squareFrom
	move move-squareFrom move move-piece move move-side put-piece
	\ if capture, replace captured piece
	move move-isCapture? not if >>skip
	move move-squareCaptured move move-pieceCaptured move move-side other put-piece
	@skip
	\ **TODO** move rook on castling
	;
	
\ generate fully legal moves for side	
: gen-full-moves ( side -- moves )
	@locals [ pmoves attacks kingsq ]
	[ ] moves!
	\ determine king square for side
	KING-SQUARE-W kingsq!
	side WHITE == if >>skip
	KING-SQUARE-B kingsq!
	@skip
	side gen-pseudo-moves
	\ loop over all pmoves, removing those that leave the king in check
	{ ( move )
		\ "CHECK PMOVE:" . move print-move-long move . CR
		
		move make-move
		\ get attacks of opposite side now
		side other gen-attacks
		\ see if king square is attacked
		kingsq find-equal void? not if >>skip
		\ king is not attacked, so keep this move
		moves move append!
		@skip
		move unmake-move
	} for-each
		
	moves \ return legal moves
	;

\ moves are generated pseudo-moves
\ expected is a list of strings from move-str-long
\ returns true|false if they match
: check-p-movelist ( moves expected -- result )
	@locals [ i ]
	moves length expected length != if >>nomatch
	0 i!
	@loop \ loop manually so i can bail out immediately on nonmatch
		moves i get void? if >>goodmatch \ end of list
		\ make sure i find each expected move in movelist
		expected moves i get move-to-str-long find-equal void? if >>nomatch
		i 1 + i! <<loop
	@goodmatch true return
	@nomatch false return
	;
	
: test-pawn-pmoves
	\ white
	"4k3/2P5/4n1n1/5P2/4n3/3n4/PP1PP2P/4K3 w - - 0 1" set-from-fen
	print-board
	WHITE gen-pseudo-moves dup { print-move-long } for-each CR

	[ 	"K-e1f1" "K-e1d1" "K-e1f2" "P-a2a3" "P-a2a4" "P-b2b3" "P-b2b4" 
		"P-e2xd3" "P-e2e3" "P-h2h3" "P-h2h4" "P-f5xe6" "P-f5xg6" 
		"P-f5f6" "P-c7c8" ]
	"MATCH?:" . check-p-movelist . CR
	
	\ black
	"1k6/pppp3p/3N4/2N5/4p3/3N1N2/5p2/2K5 b - - 0 1" set-from-fen
	print-board
	BLACK gen-pseudo-moves dup { print-move-long } for-each CR
	
	[ "p-f2f1" "p-e4xd3" "p-e4xf3" "p-e4e3" "p-a7a6" "p-a7a5" "p-b7b6" 
		"p-b7b5" "p-c7xd6" "p-c7c6" "p-h7h6" "p-h7h5" "k-b8c8" "k-b8a8" ]
	"MATCH?:" . check-p-movelist . CR
	
	\ en-passant test cases
	
	\ white, left
	"3k4/8/8/2pPp3/8/8/8/3K4 w - c6 0 1" set-from-fen
	print-board
	WHITE gen-pseudo-moves dup { print-move-long } for-each CR
	[ "K-d1d2" "K-d1e1" "K-d1c1" "K-d1e2" "K-d1c2" "P-d5d6" "P-d5xc6-ep-c5" ]
	"MATCH?:" . check-p-movelist . CR
	
	\ white, right
	"3k4/8/8/2pPp3/8/8/8/3K4 w - e6 0 1" set-from-fen
	print-board
	WHITE gen-pseudo-moves dup { print-move-long } for-each CR
	[ "K-d1d2" "K-d1e1" "K-d1c1" "K-d1e2" "K-d1c2" "P-d5d6"
		"P-d5xe6-ep-e5" ]
	"MATCH?:" . check-p-movelist . CR
	
	\ black, left
	"7k/8/8/8/2PpP3/8/8/K7 b - c3 0 1" set-from-fen
	print-board
	BLACK gen-pseudo-moves dup { print-move-long } for-each CR
	[ "p-d4d3" "p-d4xc3-ep-c4" "k-h8h7" "k-h8g8" "k-h8g7" ]
	"MATCH?:" . check-p-movelist . CR
	
	\ black, right
	"7k/8/8/8/2PpP3/8/8/K7 b - e3 0 1" set-from-fen
	print-board
	BLACK gen-pseudo-moves dup { print-move-long } for-each CR
	[ "p-d4d3" "p-d4xe3-ep-e4" "k-h8h7" "k-h8g8" "k-h8g7" ]
	"MATCH?:" . check-p-movelist . CR	
	;
	
: test-rook-pmoves
	\ white
	"8/7k/4ppp1/2n2R1p/8/8/1rR2b2/2K5 w - - 0 1" set-from-fen
	print-board
	WHITE gen-pseudo-moves dup { print-move-long } for-each CR
	
	[ "K-c1d1" "K-c1b1" "K-c1d2" "K-c1xb2" "R-c2c3" "R-c2c4" "R-c2d2"
		"R-c2e2" "R-c2xc5" "R-c2xf2" "R-c2xb2" "R-f5f4" "R-f5f3" 
		"R-f5g5" "R-f5e5" "R-f5d5" "R-f5xf6" "R-f5xf2" "R-f5xh5" "R-f5xc5" ]
	"MATCH?:" . check-p-movelist . CR
	
	\ black
	"3k4/1Rpr2N1/8/3B2r1/8/6P1/5K2/8 b - - 0 1" set-from-fen
	print-board
	BLACK gen-pseudo-moves dup { print-move-long } for-each CR
	[ "r-g5g6" "r-g5g4" "r-g5h5" "r-g5f5" "r-g5e5" "r-g5xg7" "r-g5xg3"
		"r-g5xd5" "p-c7c6" "p-c7c5" "r-d7d6" "r-d7e7" "r-d7f7" 
		"r-d7xd5" "r-d7xg7" "k-d8e8" "k-d8c8" "k-d8e7" ]
	"MATCH?:" . check-p-movelist . CR
	;

: test-bishop-pmoves
	\ white
	"1k6/1p3p2/7r/3Br3/2n2B2/3p1n2/3P3P/3K4 w - - 0 1" set-from-fen
	print-board
	WHITE gen-pseudo-moves dup { print-move-long } for-each CR
	[ "K-d1e1" "K-d1c1" "K-d1e2" "K-d1c2" "P-h2h3" "P-h2h4" "B-f4g5" 
		"B-f4g3" "B-f4e3" "B-f4xh6" "B-f4xe5" "B-d5e6" "B-d5e4" 
		"B-d5c6" "B-d5xf7" "B-d5xf3" "B-d5xb7" "B-d5xc4" ]
	"MATCH?:" . check-p-movelist . CR
		
	\ black
	"5k2/2p2p2/3b1Pp1/3p4/1P2bP2/5P2/4P3/4K3 b - - 0 1" set-from-fen
	print-board
	BLACK gen-pseudo-moves dup { print-move-long } for-each CR
	[ "b-e4f5" "b-e4d3" "b-e4c2" "b-e4b1" "b-e4xf3" "p-d5d4" "b-d6e7" 
		"b-d6e5" "b-d6c5" "b-d6xf4" "b-d6xb4" "p-g6g5" "p-c7c6" 
		"p-c7c5" "k-f8g8" "k-f8e8" "k-f8g7" "k-f8e7" ]
	"MATCH?:" . check-p-movelist . CR		
	;
	
: test-knight-pmoves
	\ white
	"1k6/3p1p2/8/4N3/p5p1/8/1N6/4K3 w - - 0 1" set-from-fen
	print-board
	WHITE gen-pseudo-moves dup { print-move-long } for-each CR
	[ "K-e1e2" "K-e1f1" "K-e1d1" "K-e1f2" "K-e1d2" "N-b2c4" "N-b2xa4" 
		"N-b2d3" "N-b2d1" "N-e5xf7" "N-e5xd7" "N-e5f3" "N-e5d3" 
		"N-e5g6" "N-e5c6" "N-e5xg4" "N-e5c4" ]
	"MATCH?:" . check-p-movelist . CR		
	
	\ black
	"5k2/1n1P4/8/2P1n1P1/8/5p2/8/2K5 b - - 0 1" set-from-fen
	print-board
	BLACK gen-pseudo-moves dup { print-move-long } for-each CR
	[ "p-f3f2" "n-e5f7" "n-e5xd7" "n-e5d3" "n-e5g6" "n-e5c6" "n-e5g4" 
		"n-e5c4" "n-b7xc5" "n-b7a5" "n-b7d8" "n-b7d6" "k-f8f7" 
		"k-f8g8" "k-f8e8" "k-f8g7" "k-f8e7" ]
	"MATCH?:" . check-p-movelist . CR			
	;

\ *TODO* test castling once implemented
: test-king-pmoves
	\ white
	"4k3/8/8/8/2n1n3/2nK4/3n4/8 w - - 0 1" set-from-fen
	print-board
	WHITE gen-pseudo-moves dup { print-move-long } for-each CR
	[ "K-d3d4" "K-d3xd2" "K-d3e3" "K-d3xc3" "K-d3xe4" "K-d3xc4" "K-d3e2" "K-d3c2" ]
	"MATCH?:" . check-p-movelist . CR			
	
	"8/4p3/3Nk3/3N1N2/8/8/8/2K5 b - - 0 1" set-from-fen
	print-board
	BLACK gen-pseudo-moves dup { print-move-long } for-each CR
	[ 	"k-e6e5" "k-e6f6" "k-e6xd6" "k-e6f7" "k-e6d7" "k-e6xf5"
		"k-e6xd5" "p-e7xd6" ]
	"MATCH?:" . check-p-movelist . CR	
	;

: test-queen-pmoves
	\ white
	"k7/pp6/3p1p2/8/3Q1P2/2p1P3/6PP/7K w - - 0 1" set-from-fen
	print-board
	WHITE gen-pseudo-moves dup { print-move-long } for-each CR
	[ "K-h1g1" "P-g2g3" "P-g2g4" "P-h2h3" "P-h2h4" "P-e3e4" "Q-d4e5" "Q-d4c5" "Q-d4b6"
		"Q-d4xf6" "Q-d4xa7" "Q-d4xc3" "Q-d4d5" "Q-d4d3" "Q-d4d2" "Q-d4d1" 
		"Q-d4e4" "Q-d4c4" "Q-d4b4" "Q-d4a4" "Q-d4xd6" "P-f4f5"
	]
	"MATCH?:" . check-p-movelist . CR			
	;
	
test-rook-pmoves
test-bishop-pmoves
test-knight-pmoves
test-king-pmoves 
test-pawn-pmoves
test-queen-pmoves

\ 37 WHITE gen-pawn-attacks . CR

\ 9 WHITE gen-pawn-moves dup . { print-move-long } for-each CR

: test-make-move
	@locals [ move ]
	"3k4/8/8/3n4/4P3/8/8/4K3 w - - 0 1" set-from-fen
	print-board
	P-PAWN WHITE "e4" algebraic-to-square "d5" algebraic-to-square new-move 
	P-KNIGHT move-pieceCaptured!
	"d5" algebraic-to-square move-squareCaptured! move!
	
	move move-to-str-long . CR
	move make-move
	print-board
	move unmake-move
	print-board
	;
	
test-make-move

: test-gen-full-moves
	\ P can't capture due to exposed check
	"1k2r3/8/8/3n4/4P3/8/8/4K3 w - - 0 1" set-from-fen
	print-board
	WHITE gen-full-moves dup { print-move-long } for-each CR
	print-board
	[ "K-e1e2" "K-e1f1" "K-e1d1" "K-e1f2" "K-e1d2" "P-e4e5" ]
	"MATCH?:" . check-p-movelist . CR
	
	\ only 1 move to save king (bishop capture)
	"k7/8/8/2N2B1Q/8/8/PPn5/KN5R w - - 0 1" set-from-fen
	print-board
	WHITE gen-full-moves dup { print-move-long } for-each CR
	print-board
	[ "B-f5xc2" ]
	"MATCH?:" . check-p-movelist . CR
	
	\ like above but with rook
	"k7/8/8/2R2N1N/8/8/PPn5/KN5R w - - 0 1" set-from-fen
	print-board
	WHITE gen-full-moves dup { print-move-long } for-each CR
	print-board
	[ "R-c5xc2" ]
	"MATCH?:" . check-p-movelist . CR
	
	\ like above but with knight
	"k7/8/8/2N2N1N/8/4N3/PPn5/KN5R w - - 0 1" set-from-fen
	print-board
	WHITE gen-full-moves dup { print-move-long } for-each CR
	print-board
	[ "N-e3xc2" ]
	"MATCH?:" . check-p-movelist . CR
	;
	
test-gen-full-moves

