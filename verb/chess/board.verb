\ Board state and global definitions. make/unmake move is also here.
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

: __modinit__

	\ pieces
	'P-PAWN 0 make-const
	'P-KNIGHT 1 make-const
	'P-BISHOP 2 make-const
	'P-ROOK 3 make-const
	'P-QUEEN 4 make-const
	'P-KING 5 make-const
	'P-NONE 6 make-const

	'PIECE-CHARS [ "P" "N" "B" "R" "Q" "K" "." ] make-var

	\ sides
	'WHITE 0 make-const
	'BLACK 1 make-const

	\ ------ board state -------

	\ coordinates: row=0,col=0 is a1; row=0,col=7 is h1; row=7,col=7 is h8

	\ pieces list (P-*), 1 for each square
	'PIECES null make-var
		
	\ colors list (WHITE|BLACK), 1 for each square
	'COLORS null make-var

	\ side to move next - WHITE or BLACK
	'SIDE-TO-MOVE WHITE make-var

	\ castling availability as bools
	'CASTLING_W_OO false make-var
	'CASTLING_W_OOO false make-var
	'CASTLING_B_OO false make-var
	'CASTLING_B_OOO false make-var

	\ en-passant target square [0-63] or -1
	\ this is the square directly BEHIND (relative to its kindside) 
	\ the pawn that just jumped two squares
	'EPSQUARE -1 make-var

	\ halfmove number for 50-move rule
	'HALFMOVE 0 make-var

	\ fullmove number
	'FULLMOVE 0 make-var

	\ epsquare, halfmove and castling status are difficult or not possible
	\ to reconstruct from just the previous move, so save them on an undo stack
	'UNDO-STACK [ ] make-var

	\ track king squares
	'KING-SQUARE-W -1 make-var
	'KING-SQUARE-B -1 make-var 
	
	clear-board
	;
	
( side -- other )
: other 1 + 2 mod ;

\ must call this at least once to init board state
: clear-board ( -- ) 
	[ ] PIECES!
	{ ( i ) PIECES P-NONE append! } 0 1 64 for-count
	[ ] COLORS!
	{ ( i ) COLORS WHITE append! } 0 1 64 for-count
	WHITE SIDE-TO-MOVE!
	true CASTLING_W_OO!
	true CASTLING_W_OOO!
	true CASTLING_B_OO!
	true CASTLING_B_OOO!
	-1 EPSQUARE!
	\ set these to invalid
	-1 KING-SQUARE-W!
	-1 KING-SQUARE-B!
	;
	
\ get square (0..63) given row,col
\ ( row col -- square )
: square-index
	swap 8 * + 
	;
	
\ get row,col from square index
\ ( square -- row col )
: square-to-rowcol 
	8 /mod swap
	;
	
\ get piece at square
: piece-at ( square )
	PIECES square get
	;
	
\ get color at square (only valid if piece != P-NONE)
: color-at ( square )
	COLORS square get
	;
	
\ get printable char for given piece & color
: piece-char ( piece color -- char )
	color WHITE == if >>white
	PIECE-CHARS piece get tolower return \ black = lowercase
	@white PIECE-CHARS piece get
	;
	
\ get printable char for piece at square
: piece-char-at ( square -- char )
	PIECES square get
	COLORS square get
		piece-char
	;

\ parse a piece char into its P-* and color	
: char-to-piece ( char -- piece color )
	@locals [ ip ]
	PIECE-CHARS { char toupper == } find ip! \ find index into PIECE_CHARS
	ip void? if >>bad-char
	char upper? if >>white
	ip BLACK return 
	@white ip WHITE return
	@bad-char "Bad piece character:" char str + error
	;

\ convert square (0..63) to algebraic notation
: square-to-algebraic ( square )
	square 8 /mod ( remainder quot )
	swap "a" ord + chr
	swap "1" ord + chr +
	;

\ convert algebraic notation (a1..h8) to square (0..63)
: algebraic-to-square ( alg )
	alg string? not if >>bad-alg
	alg length 2 != if >>bad-alg
	"abcdefgh" { alg 0 get == } find void? if >>bad-alg
	"12345678" { alg 1 get == } find void? if >>bad-alg
	alg 1 get ord "1" ord - 8 * 
	alg 0 get ord "a" ord - +
	return

	@bad-alg
		"Bad algebraic coordinate:" alg str + error
	;

: print-board ( -- )
	@locals [ row col ]
	0 row!
	@loop-row
		row 8 >= if >>done-board
		0 col!
		@loop-col
			col 8 >= if >>done-row
			7 row - col square-index piece-char-at .
			col 1 + col! <<loop-col
		@done-row
			CR
			row 1 + row! <<loop-row
	@done-board

	\ side to move
	"Side to move:" .
	SIDE-TO-MOVE WHITE == 
		{ "white" . CR } { "black" . CR } ifelse

	\ castling status
	"Castling:" .
	CASTLING_W_OO { "K" puts } ifthen
	CASTLING_W_OOO { "Q" puts } ifthen
	CASTLING_B_OO { "k" puts } ifthen
	CASTLING_B_OOO { "q" puts } ifthen
	\ if no castling available, print - 
	CASTLING_W_OO 
	CASTLING_W_OOO
	CASTLING_B_OO 
	CASTLING_B_OOO
		or or or not { "-" . } ifthen
	CR
	
	"Ep-Target:" . 
	EPSQUARE -1 ==
		{ "None" . }
		{ EPSQUARE square-to-algebraic . }
		ifelse CR	
	
	"Halfmove:" . HALFMOVE .. ", Fullmove:" . FULLMOVE . CR
	;
	
: put-piece ( square piece color -- )
	PIECES square piece put!
	COLORS square color put!
	piece P-KING != if >>done
	\ update king square
	WHITE color == if >>white
	\ black
	square KING-SQUARE-B! >>done
	@white square KING-SQUARE-W!
	@done
	;

: square-empty? ( square -- result )
	PIECES square get P-NONE ==
	;

\ set board state from a FEN string
: set-from-fen ( fen -- )
	@locals [ parts row col c i ]
	clear-board
	\ split string into its fields
	fen " " string-split parts!
		\ "FEN PARTS:" . parts . CR
		
	\ parse pieces, e.g. "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR"
	7 row!
	0 col!
	0 i!
	@pieces-loop
		parts 0 get i get c! \ next char of string
			\ "ROW=" . row . "COL=" . col . "CHAR:" . c . CR
		c void? if >>pieces-end-string 
		c digit? if >>pieces-blanks \ got # for blank squares
		c "/" == if >>pieces-slash
		\ else it must be a piece for (row,col)
		row col square-index c char-to-piece 
			\ "CHAR TO PIECE:" . dup . CR 
			put-piece
		col 1 + col! >>pieces-next
	@pieces-blanks
		c parse-int col + col! \ skip # blanks
		>>pieces-next
	@pieces-slash
		row 1 - row! 0 col! >>pieces-next
	@pieces-next
		i 1 + i! <<pieces-loop
	@pieces-end-string
		row 0 == col 8 == and if >>pieces-ok
		"Pieces string too short in FEN:" parts 0 get + error
		
	@pieces-ok

	\ parts[1] is "w" or "b" to move next
	parts 1 get
	[
		[ [ "w" ] { WHITE SIDE-TO-MOVE! } ]
		[ [ "b" ] { BLACK SIDE-TO-MOVE! } ]
		[ else { "Bad side to move in FEN string" error } ]
	]
	case

	\ parts[2] is castling availability - any of KQkq-
	\ set initially to none
	false CASTLING_W_OO!
	false CASTLING_W_OOO!
	false CASTLING_B_OO!
	false CASTLING_B_OOO!
		\ K?
		parts 2 get { "K" == } find void? if >>check-W-OOO
		true CASTLING_W_OO!
	@check-W-OOO
		\ Q?
		parts 2 get { "Q" == } find void? if >>check-B-OO
		true CASTLING_W_OOO!
	@check-B-OO
		\ k?
		parts 2 get { "k" == } find void? if >>check-B-OOO
		true CASTLING_B_OO!
	@check-B-OOO
		\ q?
		parts 2 get { "q" == } find void? if >>castling-done
		true CASTLING_B_OOO!
	@castling-done

	\ parts[3] is en-passant target square or '-' if none
	parts 3 get "-" == 
		{ -1 EPSQUARE! }
		{ parts 3 get algebraic-to-square EPSQUARE! }
		ifelse
	
	\ parts[4] is halfmove number
	parts 4 get parse-int HALFMOVE!
		
	\ parts[5] is fullmove
	parts 5 get parse-int FULLMOVE!
	;

: valid-rowcol? ( row col )
	row 0 >=
	row 8 <
	col 0 >=
	col 8 <
	and and and
	;

\ make move -- assumes move is valid
: make-move ( move -- )
	\ sanity check that move matches SIDE-TO-MOVE
	SIDE-TO-MOVE move move-side != if >>bad-side
	\ save extra state to undo stack first
	\ **TODO** this is a reason that globals should be treated more like args/locals,
	\ the globals here would be saved as symbols not as values if i used literal list
	\ notations, but with args/locals it would have the expected behavior
	\ ... so just make the list manually
	UNDO-STACK
		EPSQUARE HALFMOVE CASTLING_W_OO CASTLING_W_OOO CASTLING_B_OO CASTLING_B_OOO
		6 make-list append!
		
	\ remove from squareFrom
	move move-squareFrom P-NONE WHITE put-piece 
	\ if capture, remove
	move move-isCapture? not if >>skip-cap
	move move-squareCaptured P-NONE WHITE put-piece 
	@skip-cap
	\ place on squareTo
	move move-squareTo move move-piece move move-side put-piece
	\ promotion?
	move move-piecePromotion P-NONE == if >>epsquare
	\ put promoted piece at squareTo instead
	move move-squareTo move move-piecePromotion move move-side put-piece
	
	@epsquare
	\ see if it was a double pawn jump and set epsquare to square behind pawn
	-1 EPSQUARE!
	move move-piece P-PAWN != if >>skip-ep
	move move-squareTo move move-squareFrom - 16 == if >>set-w-ep
	move move-squareTo move move-squareFrom - -16 == if >>set-b-ep
	>>skip-ep
	@set-w-ep move move-squareTo 8 - EPSQUARE! >>skip-ep
	@set-b-ep move move-squareTo 8 + EPSQUARE!
	@skip-ep
	
	\ see if it's castling (did king move 2 squares left/right)
	move move-piece P-KING != if >>done-castling
	move move-squareFrom 4 == 
		move move-squareTo 6 == and if >>w-oo 
	move move-squareFrom 4 == 
		move move-squareTo 2 == and if >>w-ooo 
	move move-squareFrom 60 == 
		move move-squareTo 62 == and if >>b-oo 
	move move-squareFrom 60 == 
		move move-squareTo 58 == and if >>b-ooo
	>>done-castling
	@w-oo
		\ move rook
		7 P-NONE WHITE put-piece 
		5 P-ROOK WHITE put-piece
		\ no castling available now
		false CASTLING_W_OO!
		false CASTLING_W_OOO!
		>>done-castling
	@w-ooo
		\ move rook
		0 P-NONE WHITE put-piece 
		3 P-ROOK WHITE put-piece
		\ no castling available now
		false CASTLING_W_OO!
		false CASTLING_W_OOO!
		>>done-castling
	@b-oo
		\ move rook
		63 P-NONE BLACK put-piece 
		61 P-ROOK BLACK put-piece
		\ no castling available now
		false CASTLING_B_OO!
		false CASTLING_B_OOO!
		>>done-castling
	@b-ooo
		\ move rook
		56 P-NONE WHITE put-piece 
		59 P-ROOK BLACK put-piece
		\ no castling available now
		false CASTLING_B_OO!
		false CASTLING_B_OOO!
		>>done-castling
	
	@done-castling
	\ update castling availability based on pieces leaving squares
	\ i don't have to check colors since even if the piece leaves its starting
	\ square for 1 move, that is enough to turn off the flag permanently
	CASTLING_W_OO
		4 piece-at P-KING ==
		7 piece-at P-ROOK == and and
			CASTLING_W_OO!
	CASTLING_W_OOO
		4 piece-at P-KING ==
		0 piece-at P-ROOK == and and
			CASTLING_W_OOO!
	CASTLING_B_OO
		60 piece-at P-KING ==
		63 piece-at P-ROOK == and and
			CASTLING_B_OO!
	CASTLING_B_OOO
		60 piece-at P-KING ==
		56 piece-at P-ROOK == and and
			CASTLING_B_OOO!	

	\ flip side to move & return
	SIDE-TO-MOVE other SIDE-TO-MOVE!
	return
	
	@bad-side 
		"SIDE-TO-MOVE out of sync in make-move" error
	;

\ unmake move -- assumes move is valid AND that move was just made	
: unmake-move ( move -- )
	\ remove from squareTo
	move move-squareTo P-NONE WHITE put-piece
	\ place on squareFrom
	move move-squareFrom move move-piece move move-side put-piece
	\ if capture, replace captured piece
	move move-isCapture? not if >>skip
	move move-squareCaptured move move-pieceCaptured move move-side other put-piece
	@skip
	
	\ see if it's castling (did king move 2 squares left/right)
	move move-piece P-KING != if >>done-castling
	move move-squareFrom 4 == 
		move move-squareTo 6 == and if >>w-oo 
	move move-squareFrom 4 == 
		move move-squareTo 2 == and if >>w-ooo 
	move move-squareFrom 60 == 
		move move-squareTo 62 == and if >>b-oo 
	move move-squareFrom 60 == 
		move move-squareTo 58 == and if >>b-ooo
	>>done-castling
	@w-oo
		\ move rook
		5 P-NONE WHITE put-piece 
		7 P-ROOK WHITE put-piece
		>>done-castling
	@w-ooo
		\ move rook
		3 P-NONE WHITE put-piece 
		0 P-ROOK WHITE put-piece
		>>done-castling
	@b-oo
		\ move rook
		61 P-NONE BLACK put-piece 
		63 P-ROOK BLACK put-piece
		>>done-castling
	@b-ooo
		\ move rook
		59 P-NONE WHITE put-piece 
		56 P-ROOK BLACK put-piece
		>>done-castling
		
	@done-castling
	\ restore other state from stack
	UNDO-STACK -1 get unmake drop
	CASTLING_B_OOO! CASTLING_B_OO! CASTLING_W_OOO! CASTLING_W_OO! HALFMOVE! EPSQUARE!
	UNDO-STACK 1 tail-drop UNDO-STACK!
	
	\ flip side to move
	SIDE-TO-MOVE other SIDE-TO-MOVE!
	;
	
