
( brain.verb - a brainf* interpreter )
( Copyright (c) 2022 Frank McIngvale, see LICENSE )

( 
	quick ref:
		DP = data pointer, index into CELLS
		IP = instruction pointer, index into CODE
		>  ++DP
		<  --DP
		+  ++(*DP)
		-  --(*DP)
		.  print(chr(*DP))
		,  *DP = input-byte
		[  if contents of current cell are 0, jump to next instruction after matching ]
		]  if contents of current cell are != 0, jump to next instruction after matching [
)

"brainf-common" import

'NRCELLS 30000 make-var
'CELLS void make-var
'DP 0 make-var
'IP 0 make-var
'CODE void make-var \ currently running code string
\ set size of cell ...
\ 8-bit
\ 'VALUE-MAX 255 make-var
\ 16-bit
'VALUE-MAX 65535 make-var
\ for 32-bits
\ 'VALUE-MAX 4294967295 make-var

\ create CELLS list and fill all with val
: init-cells ( val -- )
	[ ] CELLS!
	{ CELLS val append CELLS! } NRCELLS repeat
	;

\ print all cells (debugging)
: print-cells
	"Cells:" . CELLS { . } for-each CR
	;

\ ++IP until matching ] is found; assumes IP is just past the [
: jump-forward 
	@locals [ nesting ]
	1 nesting!
	@loop
		IP CODE length >= if >>notfound
		CODE IP get ( get next code char )
		( "LOOKCHAR: " . dup . CR )
		dup "[" == if >>++level
		dup "]" == if >>--level
		( ignore other chars and continue )
		drop >>next

		@++level drop nesting 1 + nesting! >>next
		@--level 
			drop nesting 1 - nesting! 
			nesting 0 == if >>done
			>>next

	@next IP 1 + IP! <<loop
	@notfound "End of input looking for matching ]" error
	@done
	;

\ --IP until matching [[ is found; assumes IP is @ ]
: jump-backward 
	@locals [ nesting ]
	1 nesting!
	@loop
		IP 1 - IP!
		IP 0 < if >>notfound
		CODE IP get ( get next code char )
		( "LOOKCHAR: " . dup . CR )
		dup "[" == if >>--level
		dup "]" == if >>++level
		( ignore other chars and continue )
		drop >>next

		@++level drop nesting 1 + nesting! >>next
		@--level
			drop nesting 1 - nesting!
			nesting 0 == if >>done
			>>next

	@next <<loop
	@notfound "End of input looking for matching ]" error
	@done
		( "Found it (backwards)" . CR )
		IP 1 + IP!
	;

: print-debug ( -- )
	CR "IP:" . IP .. ", DP:" . DP . CR
	\ print a 10x10 grid of first 100 values
	"MEMORY:" . CR
	\ column headers
	"   " .. { ( i ) i 8 str.w . } 0 1 10 for-count CR
	{ "-" .. } 93 repeat CR
	\ i = 0..9
	{ ( i )
		i .. ":" .
		\ j = 0..9
		{ ( j )
			CELLS i 10 * j + get 8 str.w .
		} 0 1 10 for-count
		CR
	} 0 1 10 for-count
	;
		
: brain-run ( text input -- )
	@locals [ c v ]
	text CODE! ( store text in CODE )
	0 DP! ( DP = 0 )
	0 IP! ( IP = 0, index into text )
	0 init-cells ( create & clear CELLS )
	@run-loop
		CODE IP get c! ( get next char from text or void )
		( "RUN: " . dup . CR )
		c void? if >>done
		c ">" == if >>++dp 
		c "<" == if >>--dp
		c "+" == if >>++cell 
		c "-" == if >>--cell
		c "[" == if >>jump-forward?
		c "]" == if >>jump-backward?
		c "." == if >>printchar
		c "," == if >>input
		\ nonstandard -- ? prints debugging dump
		c "?" == if >>debug
		\ nonstandard -- # comment to EOL
		c "#" == if >>comment
		( ignore unknown chars ) >>next
		
		@++dp DP 1 + DP! >>next
		@--dp DP 1 - DP! >>next
		@++cell 
			CELLS DP get 1 + v!
			v VALUE-MAX > if >>wrap-positive
			CELLS DP v put CELLS! >>next
			@wrap-positive
				CELLS DP v VALUE-MAX - 1 - put CELLS! >>next		
		@--cell 
			CELLS DP get 1 - v!
			v 0 < if >>wrap-negative
			CELLS DP v put CELLS! >>next			
			@wrap-negative
				CELLS DP v VALUE-MAX + 1 + put CELLS! >>next
		@printchar CELLS DP get .c >>next
		@jump-forward?
			CELLS DP get 0 != if >>next
			IP 1 + IP!
			jump-forward <<run-loop
		@jump-backward?
			CELLS DP get 0 == if >>next
			IP 1 - IP!
			jump-backward <<run-loop
		@next
			IP 1 + IP! ( ++IP )
			<<run-loop
		@input
			input 0 get void? if >>no-input
			CELLS DP input 0 get ord put CELLS!
			input 1 -1 slice input!
			<<next
			@no-input CELLS DP 0 put CELLS! <<next
		@debug
			print-debug
			<<next
		@comment
			\ read until \r or \n
			IP 1 + IP!
			CODE IP get c!
			c void? if >>done 
			c ord 10 == if <<next
			c ord 13 == if <<next
			<<comment
	@done
		( "Run complete!" . CR )
		;
	
: run 
	@locals [ comments code input t0 t1 ]
	SCRIPT-ARGS length 0 == if >>missing-filename 
	SCRIPT-ARGS 0 get read-brainf-file input! code! comments!
	"Comment:" . CR comments . CR
	\ measure running time only, not parsing time
	"Run:" . CR
	cpu-time t0!
	code input brain-run
	cpu-time t1!
	"Ran in" . t1 t0 - . "seconds" . CR
	return

	@missing-filename "Error: A .bf script filename required" . CR return
	;
	
run

	
