
( brain.verb - a brainf* interpreter )
( Copyright (c) 2022 Frank McIngvale, see LICENSE )

( 
	quick ref:
		DP = data pointer, index into CELLS
		IP = instruction pointer, index into CODE
		>  ++DP
		<  --DP
		+  ++(*DP)
		-  --(*DP)
		.  print(chr(*DP))
		,  *DP = input-byte
		[  if contents of current cell are 0, jump to next instruction after matching ]
		]  if contents of current cell are != 0, jump to next instruction after matching [
)

'NRCELLS 30000 make-var
'CELLS void make-var
'DP 0 make-var
'IP 0 make-var
'CODE void make-var \ currently running code string

\ create CELLS list and fill all with val
: init-cells ( val -- )
	[ ] CELLS!
	{ CELLS val append CELLS! } NRCELLS repeat
	;

\ print all cells (debugging)
: print-cells
	"Cells:" . CELLS { . } for-each CR
	;

\ ++IP until matching ] is found; assumes IP is just past the [
: jump-forward 
	@locals [ nesting ]
	1 nesting!
	@loop
		IP CODE length >= if >>notfound
		CODE IP get ( get next code char )
		( "LOOKCHAR: " . dup . CR )
		dup "[" == if >>++level
		dup "]" == if >>--level
		( ignore other chars and continue )
		drop >>next

		@++level drop nesting 1 + nesting! >>next
		@--level 
			drop nesting 1 - nesting! 
			nesting 0 == if >>done
			>>next

	@next IP 1 + IP! <<loop
	@notfound "End of input looking for matching ]" error
	@done
	;

\ --IP until matching [[ is found; assumes IP is @ ]
: jump-backward 
	@locals [ nesting ]
	1 nesting!
	@loop
		IP 1 - IP!
		IP 0 < if >>notfound
		CODE IP get ( get next code char )
		( "LOOKCHAR: " . dup . CR )
		dup "[" == if >>--level
		dup "]" == if >>++level
		( ignore other chars and continue )
		drop >>next

		@++level drop nesting 1 + nesting! >>next
		@--level
			drop nesting 1 - nesting!
			nesting 0 == if >>done
			>>next

	@next <<loop
	@notfound "End of input looking for matching ]" error
	@done
		( "Found it (backwards)" . CR )
		IP 1 + IP!
	;

: brain-run ( text -- )
	"brain-run starting!" . .S CR
	text CODE! ( store text in CODE )
	0 DP! ( DP = 0 )
	0 IP! ( IP = 0, index into text )
	0 init-cells ( create & clear CELLS )
	@run-loop
		IP CODE length >= if >>done ( at end of text? )
		CODE IP get ( get next char from text )
		( "RUN: " . dup . CR )
		dup ">" == if >>++dp 
		dup "<" == if >>--dp
		dup "+" == if >>++cell 
		dup "-" == if >>--cell
		dup "[" == if >>jump-forward?
		dup "]" == if >>jump-backward?
		dup "." == if >>printchar
		( ignore unknown chars ) >>next
		
		@++dp DP 1 + DP! >>next
		@--dp DP 1 - DP! >>next
		@++cell CELLS DP get 1 + CELLS DP rot put CELLS! >>next
		@--cell CELLS DP get 1 - CELLS DP rot put CELLS! >>next
		@printchar CELLS DP get .c >>next
		@jump-forward?
			CELLS DP get 0 == not if >>next
			IP 1 + IP!
			jump-forward drop <<run-loop
		@jump-backward?
			CELLS DP get 0 != not if >>next
			IP 1 - IP!
			jump-backward drop <<run-loop

		@next
			drop ( drop char )
			IP 1 + IP! ( ++IP )
			<<run-loop
	@done
		( "Run complete!" . CR )
		;
	
">>>>++++++++>>>---" brain-run
( print-cells CR )
"[]" brain-run
( print-cells CR )
"+++++[>+<-]" brain-run
( print-cells CR )
"++++[>+++[>+<-]<-]" brain-run
( print-cells CR )
"++++++++[>++++++++[>+<-]<-]>>." brain-run
( print-cells CR )


"SAMPLE" . CR
">++++++++[<+++++++++>-]<.>++++[<+++++++>-]<+.+++++++..+++.>>++++++[<+++++++>-]<++.------------.>++++++[<+++++++++>-]<+.<.+++.------.--------.>>>++++[<++++++++>-]<+." brain-run

( Daniel B. Cristofani's factorial.b (https://bit.ly/3Lq5YW5) )
(
">>>>++>+[
    [
        >[>>]<[>+>]<<[>->>+<<<-]>+[
            [+>>[<<+>>-]>]+[-<<+<]>-[
                -[<+>>+<-]++++++[>++++++++<-]+>.[-]<<[
                    >>>[[<<+>+>-]>>>]<<<<[[>+<-]<-<<]>-
                ]>>>[
                    <<-[<<+>>-]<+++++++++<[
                        >[->+>]>>>[<<[<+>-]>>>+>>[-<]<[>]>+<]<<<<<<-
                    ]>[-]>+>>[<<<+>>>-]>>>
                ]<<<+[-[+>>]<<<]>[<<<]>
            ]>>>[<[>>>]<<<[[>>>+<<<-]<<<]>>>>>>>-[<]>>>[<<]<<[>+>]<]<<
        ]++>>
    ]<<++++++++.+
]" brain-run
)

( Daniel B. Cristofani's sierpinski.b (from https://bit.ly/3tYVmrv) )

"++++++++[>+>++++<<-]>++>>+<[-[>>+<<-]+>>]>+[-<<<[->[+[-]+>++>>>-<<]<[<]>>++++++[<<+++++>>-]+<<++.[-]<<]>.>+[>>]>+]"
brain-run

"++++[>+++++<-]>[<+++++>-]+<+[
    >[>+>+<<-]++>>[<<+>>-]>>>[-]++>[-]+
    >>>+[[-]++++++>>>]<<<[[<++++++++<++>>-]+<.<[>----<-]<]
    <<[>>>>>[>>>[-]+++++++++<[>-<-]+++++++++>[-[<->-]+[<<<]]<[>+<-]>]<<-]<<-
]" brain-run



