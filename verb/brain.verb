
( brain.verb - a brainf* interpreter )
( Copyright (c) 2022 Frank McIngvale, see LICENSE )

( 
	quick ref:
		DP = data pointer, index into CELLS
		>  ++DP
		<  --DP
		+  ++(*DP)
		-  --(*DP)
		.  print(chr(*DP))
		,  *DP = input-byte
		[  if contents of current cell are 0, jump to next instruction after matching ]
		]  if contents of current cell are != 0, jump to next instruction after matching [
)

var NRCELLS 1
var CELLS 30000
var DP 1
var IP 1
var CODE 1 ( currently running code string )

: fill-cells ( val -- ; fill all cells with val )
	NRCELLS ref 1 - ( val i=max-index )
	@loop ( val i )
	dup 0 < if >>done
	2dup CELLS + set! ( val i ) 
	1 - <<loop
	@done
	2drop ( drop val & i )
	;

: print-cells ( print all cells, for debugging )
	0
	@loop ( i )
	dup NRCELLS ref >= if >>done
	dup CELLS + ref . ( i ) 
	1 + <<loop
	@done drop
	;

: jump-forward ( ++IP until matching ] is found; assumes IP is just past the [ )
	1 ( nesting level )
	@loop ( level )
		IP ref CODE ref length >= if >>notfound
		CODE ref IP ref get ( get next code char )
		( "LOOKCHAR: " . dup . CR )
		dup "[" == if >>++level
		dup "]" == if >>--level
		( ignore other chars and continue )
		drop >>next

		@++level drop 1 + >>next
		@--level ( "@--level: " . .S CR )
		drop 1 - dup? 0 == if >>done
			>>next

	@next IP ref 1 + IP set! <<loop
	@notfound "End of input looking for matching ]" error
	@done
	;

: jump-backward ( --IP until matching [[ is found; assumes IP is @ ] )
	1 ( nesting level )
	@loop ( level )
		IP ref 1 - IP set!
		IP ref 0 < if >>notfound
		CODE ref IP ref get ( get next code char )
		( "LOOKCHAR: " . dup . CR )
		dup "[" == if >>--level
		dup "]" == if >>++level
		( ignore other chars and continue )
		drop >>next

		@++level drop 1 + >>next
		@--level ( "@--level: " . .S CR )
		drop 1 - dup? 0 == if >>done
			>>next

	@next <<loop
	@notfound "End of input looking for matching ]" error
	@done
		( "Found it (backwards)" . CR )
		IP ref 1 + IP set!
	;

: brain-run ( text -- run text )
	"brain-run starting!" . .S CR
	CODE set! ( store text in CODE )
	30000 NRCELLS set! ( this must be <= size of CELLS above )
	0 DP set! ( DP = 0 )
	0 IP set! ( IP = 0, index into text )
	0 fill-cells ( clear CELLS )
	@run-loop
		IP ref CODE ref length >= if >>done ( at end of text? )
		CODE ref IP ref get ( get next char from text )
		( "RUN: " . dup . CR )
		dup ">" == if >>++dp 
		dup "<" == if >>--dp
		dup "+" == if >>++cell 
		dup "-" == if >>--cell
		dup "[" == if >>jump-forward?
		dup "]" == if >>jump-backward?
		dup "." == if >>printchar
		( ignore unknown chars ) >>next
		
		@++dp DP ref 1 + DP set! >>next
		@--dp DP ref 1 - DP set! >>next
		@++cell DP ref CELLS + dup ref 1 + swap set! >>next
		@--cell DP ref CELLS + dup ref 1 - swap set! >>next
		@printchar DP ref CELLS + ref .c >>next
		@jump-forward?
			DP ref CELLS + ref 0 == not if >>next
			IP ref 1 + IP set!
			jump-forward drop <<run-loop
		@jump-backward?
			DP ref CELLS + ref 0 != not if >>next
			IP ref 1 - IP set!
			jump-backward drop <<run-loop

		@next
		drop ( drop char )
		IP ref 1 + IP set! ( ++IP )
		<<run-loop
	@done
		( "Run complete!" . CR )
		;
	
">>>>++++++++>>>---" brain-run
( print-cells CR )
"[]" brain-run
( print-cells CR )
"+++++[>+<-]" brain-run
( print-cells CR )
"++++[>+++[>+<-]<-]" brain-run
( print-cells CR )
"++++++++[>++++++++[>+<-]<-]>>." brain-run
( print-cells CR )


"SAMPLE" . CR
">++++++++[<+++++++++>-]<.>++++[<+++++++>-]<+.+++++++..+++.>>++++++[<+++++++>-]<++.------------.>++++++[<+++++++++>-]<+.<.+++.------.--------.>>>++++[<++++++++>-]<+." brain-run

( Daniel B. Cristofani's factorial.b (https://bit.ly/3Lq5YW5) )
(
">>>>++>+[
    [
        >[>>]<[>+>]<<[>->>+<<<-]>+[
            [+>>[<<+>>-]>]+[-<<+<]>-[
                -[<+>>+<-]++++++[>++++++++<-]+>.[-]<<[
                    >>>[[<<+>+>-]>>>]<<<<[[>+<-]<-<<]>-
                ]>>>[
                    <<-[<<+>>-]<+++++++++<[
                        >[->+>]>>>[<<[<+>-]>>>+>>[-<]<[>]>+<]<<<<<<-
                    ]>[-]>+>>[<<<+>>>-]>>>
                ]<<<+[-[+>>]<<<]>[<<<]>
            ]>>>[<[>>>]<<<[[>>>+<<<-]<<<]>>>>>>>-[<]>>>[<<]<<[>+>]<]<<
        ]++>>
    ]<<++++++++.+
]" brain-run
)

( Daniel B. Cristofani's sierpinski.b (from https://bit.ly/3tYVmrv) )

"++++++++[>+>++++<<-]>++>>+<[-[>>+<<-]+>>]>+[-<<<[->[+[-]+>++>>>-<<]<[<]>>++++++[<<+++++>>-]+<<++.[-]<<]>.>+[>>]>+]"
brain-run

"++++[>+++++<-]>[<+++++>-]+<+[
    >[>+>+<<-]++>>[<<+>>-]>>>[-]++>[-]+
    >>>+[[-]++++++>>>]<<<[[<++++++++<++>>-]+<.<[>----<-]<]
    <<[>>>>>[>>>[-]+++++++++<[>-<-]+++++++++>[-[<->-]+[<<<]]<[>+<-]>]<<-]<<-
]" brain-run



