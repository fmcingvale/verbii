
: test1 @( a b )
	\ returns closure that captures a,b from
	\ outer context
	@{
		"a:" . a . "b:" . b . CR
	}
	;

"* Closure tests ..." . CR

\ show closure holds correct values after test1 returns
'F1 null make-var
'F2 null make-var

\ make 2 closures to show they are independent
11 22 test1 F1!
33 44 test1 F2!

"Expect a,b=11,12:" . F1 call
"Expect a,b=33,44:" . F2 call

: test2 @( a b )
	@{ @args [ c d ] 
		\ 2nd level closure that captures a,b,c,d
		@{
			"a:" . a . "b:" . b . 
			"c:" . c . "d:" . d . CR
		}
	}
	;

33 44 test2 F1!
100 200 test2 F2!
\ now send the c,d args to each
55 66 F1 call F1!
300 400 F2 call F2!
\ now call inners
"Expect a,b,c,d=33,44,55,66:" . CR 
F1 call

"Expect a,b,c,d=100,200,300,400:" . CR 
F2 call

: test3 @( a b )
	\ inner takes newstyle arglist
	@{ @( c d )
		"a:" . a . "b:" . b .
		"c:" . c . "d:" . d . CR
	}
	;

"ee" "ff" test3 F1!
"ww" "xx" test3 F2!

"Expect a,b,c,d=ee,ff,gg,hh:" . CR
"gg" "hh" F1 call
"Expect a,b,c,d=ww,xx,yy,zz:" . CR
"yy" "zz" F2 call

\ .. and nesting one more ...
: test4 @( a b )
	\ inner takes newstyle arglist
	@{ @( c d )
		\ 2nd inner 
		@{ @( e f ) 
			"a:" . a . "b:" . b .
			"c:" . c . "d:" . d .
			"e:" . e . "f:" . f . CR
		}
	}
	;

"aa" "bb" test4 F1!
"AA" "BB" test4 F2!

"cc" "dd" F1 call F1!
"CC" "DD" F2 call F2!

"Expect a,b,c,d,e,f=aa,bb,cc,dd,ee,ff:" . CR
"ee" "ff" F1 call
"Expect a,b,c,d,e,f=AA,BB,CC,DD,EE,FF:" . CR
"EE" "FF" F2 call

: test5 @( a b )
	[
		\ i WANT this to capture a,b
		{
			a b +
		}
	]
	;

'test5 .dumpword . CR

: test6 @( a b c )
	\ inside @[ .. ], captures are evaluated
	@[ a b c ]
	;

"Expect [ 12 34 56 ]:" .
12 34 56 test6 . CR

: test7 @( a b c )
	@[
		\ inside @[ .. ] closures should work as expected
		@{ "a:" . a . "b:" . b . "c:" . c . CR }
		@{ "a*b:" . a b * . "b*c:" . b c * . CR }
	]
	;

"Expect a,b,c,d=111,222,333:" . 
111 222 333 test7 
dup 0 get call
"Expect a*b=24642, b*c=73926:" .
dup 1 get call
