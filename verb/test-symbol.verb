\ Unittests for symbol operations
\
\ Started from test-string.verb and just changed everything to symbols
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

"unittest" import

: test-symbol-compares
	'abcde 'abcde expect==
	'aBcdE 'aBcdE expect==
	'aBcdE 'aBcde expect!=
	'xyz 'xyzw expect!=
	
	"hello" 'hello expect!=
	'hello "hello" expect!=
	
	'abcde 'abcdef expect<
	'abcdef 'abcde expect>
	;
	
: test-symbol-make-unmake
	'abcde unmake 
	"[ 97 98 99 100 101 5 ]" expect-stack 6 ndrop
	
	'ABCDE unmake
	"[ 65 66 67 68 69 5 ]" expect-stack 6 ndrop
	
	'verbii 118 101 114 98 105 105 6 make-symbol expect==
	;

: test-symbol-get
	'a 'abcdefgh 0 get expect==
	'b 'abcdefgh 1 get expect==
	'f 'abcdefgh 5 get expect==
	'h 'abcdefgh 7 get expect==
	'h 'abcdefgh -1 get expect==
	'g 'abcdefgh -2 get expect==
	'd 'abcdefgh -5 get expect==
	'a 'abcdefgh -8 get expect==
	void 'abcdefgh -9 get expect==
	void 'abcdefgh 8 get expect==
	;
	
: test-symbol-slicing
	'cde 'abcdefgh 2 3 slice expect==
	'f 'abcdefgh 5 1 slice expect==
	'efgh 'abcdefgh 4 -1 slice expect==
	'h 'abcdefgh -1 1 slice expect==
	'cde 'abcdefgh -6 3 slice expect==
	"" string->symbol 'abcdefgh -100 3 slice expect==
	'fgh 'abcdefgh 5 100 slice expect==
	;
	
: test-symbol-ops
	6 'abcdef length expect==
	0 "" string->symbol length expect==
	
	'abcdef 'abc 'def + expect==
	'abc 'abc "" string->symbol + expect==
	'def "" string->symbol 'def + expect==
		
	'Hello "Hello" string->symbol expect==
	"World" 'World symbol->string expect==
	;
	