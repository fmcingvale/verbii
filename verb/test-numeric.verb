\ Test numeric module
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

: __modinit__
	"unittest" import
	"numeric" import
	;

: test-parse-hex
	\ string parsing
	2595453966 "9ab37c0e" parse-hex expect==
	2068551320 "7b4b9698" parse-hex expect==
	2503746217 "953c22a9" parse-hex expect==
	2235264886 "853b6f76" parse-hex expect==
	3302115232 "c4d247a0" parse-hex expect==
	4032181163 "f05633ab" parse-hex expect==
	1190136849 "46f00c11" parse-hex expect==
	         0 "00000000" parse-hex expect==
	4294967295 "ffffffff" parse-hex expect==
	  11259375   "ABCDEF" parse-hex expect==
	  
	\ compiler literals
	2595453966 #x9ab37c0e expect==
	2068551320 #x7b4b9698 expect==
	2503746217 #x953c22a9 expect==
	2235264886 #x853b6f76 expect==
	3302115232 #xc4d247a0 expect==
	4032181163 #xf05633ab expect==
	1190136849 #x46f00c11 expect==
	         0 #x00000000 expect==
	4294967295 #xffffffff expect==
	  11259375   #xABCDEF expect==
	;
	
: test-str.hex
	2882400152 str.hex "abcdef98" expect==
	2271562428 str.hex "87654abc" expect==
	4275830784 str.hex "fedc0000" expect==
	4294967295 str.hex "ffffffff" expect==
	      2748 str.hex "00000abc" expect==
		    15 str.hex "0000000f" expect==
			 0 str.hex "00000000" expect==
	;
	
: test-parse-binary
	\ string parsing first
	3830228581 "11100100010011001010011001100101" parse-binary expect==
	4294967295 "11111111111111111111111111111111" parse-binary expect==
	0          "00000000000000000000000000000000" parse-binary expect==
	1687410066 "01100100100100111101010110010010" parse-binary expect==
	629394                 "10011001101010010010" parse-binary expect==
	
	\ compiler literals
	3830228581 #b11100100010011001010011001100101 expect==
	4294967295 #b11111111111111111111111111111111 expect==
	0          #b00000000000000000000000000000000 expect==
	1687410066 #b01100100100100111101010110010010 expect==
	629394                 #b10011001101010010010 expect==
	
	\ now with dots .. (can't get np++ syntax highlighing to work here .. ugh)
	3830228581 #b1110.0100.0100.1100.1010.0110.0110.0101 expect==
	4294967295 #b1111.1111.1111.1111.1111.1111.1111.1111 expect==
	0          #b0000.0000.0000.0000.0000.0000.0000.0000 expect==
	1687410066 #b0110.0100.1001.0011.1101.0101.1001.0010 expect==
	629394                    #b1001.1001.1010.1001.0010 expect==
	;
	
: test-str.bin 
	"00000000.00010010.11010110.10000111" 1234567 str.bin expect==
	"10100100.10001011.11010011.11001111" 2760627151 str.bin expect==
	"11110100.11010000.01111011.11100011" 4107303907 str.bin expect==
	"00000011.01000100.11010111.10011111" 54843295 str.bin expect==
	;
	
: test-bit-not-and-or-xor
	\ 11001001100010100110001011100110
	\ 00110110011101011001110100011001

	913677593 3381289702 bit-not expect==
	
	\ 01000000100001000000001100001000 1082393352
	\ 10000100000001000010000100010001 2214863121
	\ 11000100100001000010001100011001 3296994073
	3296994073 1082393352 2214863121 bit-or expect==

	\ 11110011000011111011111001111101 4077895293
	\ 10001100111100001110000111000110 2364596678
	\ 10000000000000001010000001000100 2147524676
	2147524676 4077895293 2364596678 bit-and expect==

	\ 11010011010010011010011100110010 3544819506
	\ 00110110110011100100010011000110 919487686
	\ 11100101100001111110001111110100 3850888180
	3850888180 3544819506 919487686 bit-xor expect==
	;

: test-bit-shr
	"0fedcba9" "fedcba98" parse-hex  4 bit-shr str.hex expect==
	"00fedcba" "fedcba98" parse-hex  8 bit-shr str.hex expect==
	"000fedcb" "fedcba98" parse-hex 12 bit-shr str.hex expect==
	"0000fedc" "fedcba98" parse-hex 16 bit-shr str.hex expect==
	"00000fed" "fedcba98" parse-hex 20 bit-shr str.hex expect==
	"000000fe" "fedcba98" parse-hex 24 bit-shr str.hex expect==
	"0000000f" "fedcba98" parse-hex 28 bit-shr str.hex expect==
	"00000000" "fedcba98" parse-hex 32 bit-shr str.hex expect==
	
	\ 11111000000000000000000000000000 4160749568
	\ 00000011111000000000000000000000 65011712

	65011712 4160749568 6 bit-shr expect==

	\ 10000000000000000000000000000000
	\ 2147483648
	\ 1073741824
	\ 536870912

	1073741824  1 31 bit-shl 1 bit-shr expect==
	536870912  1 31 bit-shl 2 bit-shr expect==
	;
	
: test-bit-shl
	"8abcdef0" "98abcdef" parse-hex  4 bit-shl str.hex expect==
	"abcdef00" "98abcdef" parse-hex  8 bit-shl str.hex expect==
	"bcdef000" "98abcdef" parse-hex 12 bit-shl str.hex expect==
	"cdef0000" "98abcdef" parse-hex 16 bit-shl str.hex expect==
	"def00000" "98abcdef" parse-hex 20 bit-shl str.hex expect==
	"ef000000" "98abcdef" parse-hex 24 bit-shl str.hex expect==
	"f0000000" "98abcdef" parse-hex 28 bit-shl str.hex expect==
	"00000000" "98abcdef" parse-hex 32 bit-shl str.hex expect==
	
	2147483648  1 31 bit-shl expect==
	
	\ 11000000000000000000000000000000 3221225472
	\ 10000000000000000000000000000000 2147483648
	\ 00000000000000000000000000000000 0

	3221225472 3 30 bit-shl expect==
	2147483648 3 31 bit-shl expect==
	0 3 32 bit-shl expect==
	;

: test-bit-rotl
	"876abcd9" "9876abcd" parse-hex  4 bit-rotl str.hex expect==
	"76abcd98" "9876abcd" parse-hex  8 bit-rotl str.hex expect==
	"6abcd987" "9876abcd" parse-hex 12 bit-rotl str.hex expect==
	"abcd9876" "9876abcd" parse-hex 16 bit-rotl str.hex expect==
	"bcd9876a" "9876abcd" parse-hex 20 bit-rotl str.hex expect==
	"cd9876ab" "9876abcd" parse-hex 24 bit-rotl str.hex expect==
	"d9876abc" "9876abcd" parse-hex 28 bit-rotl str.hex expect==
	"9876abcd" "9876abcd" parse-hex 32 bit-rotl str.hex expect==
	;

: test-bit-rotr
	"d9876abc" "9876abcd" parse-hex  4 bit-rotr str.hex expect==
	"cd9876ab" "9876abcd" parse-hex  8 bit-rotr str.hex expect==
	"bcd9876a" "9876abcd" parse-hex 12 bit-rotr str.hex expect==
	"abcd9876" "9876abcd" parse-hex 16 bit-rotr str.hex expect==
	"6abcd987" "9876abcd" parse-hex 20 bit-rotr str.hex expect==
	"76abcd98" "9876abcd" parse-hex 24 bit-rotr str.hex expect==
	"876abcd9" "9876abcd" parse-hex 28 bit-rotr str.hex expect==
	"9876abcd" "9876abcd" parse-hex 32 bit-rotr str.hex expect==
	;
	
: test-bit-low32
	\ have to test numerically since e.g. str.hex always truncates to 32 bits
	\ so would not be a valid test
	188900976391764 bit-low32 4019746388 expect==
	;
	
: test-bit-count-ones-slow
	4 "84210000" parse-hex bit-count-ones-slow expect==
	32 "ffffffff" parse-hex bit-count-ones-slow expect==
	0 0 bit-count-ones-slow expect==
	21 "C6F37D9B" parse-hex bit-count-ones-slow expect==
	;
	
: test-bit-count-ones
	4 "84210000" parse-hex bit-count-ones expect==
	32 "ffffffff" parse-hex bit-count-ones expect==
	0 0 bit-count-ones expect==
	21 "C6F37D9B" parse-hex bit-count-ones expect==
	;

: test-bit-first-one-slow 
	 0 "80000000" parse-hex bit-first-one-slow expect==
	 4 "08000000" parse-hex bit-first-one-slow expect==
	 8 "00800000" parse-hex bit-first-one-slow expect==
	12 "00080000" parse-hex bit-first-one-slow expect==
	16 "00008000" parse-hex bit-first-one-slow expect==
	20 "00000800" parse-hex bit-first-one-slow expect==
	24 "00000080" parse-hex bit-first-one-slow expect==
	28 "00000008" parse-hex bit-first-one-slow expect==
	31 "00000001" parse-hex bit-first-one-slow expect==
	void "00000000" parse-hex bit-first-one-slow expect==
	
	 5 "041ab3fd" parse-hex bit-first-one-slow expect==
	23 "0000011a" parse-hex bit-first-one-slow expect==
	27 "0000001a" parse-hex bit-first-one-slow expect==
	
	\ test bad value (> 32 bits)
	\ 8 0000 0000
	void 34359738368 bit-first-one-slow expect==
	\ 8 0400 0000
	9 34363932672 bit-first-one-slow expect==
	\ 8 0000 0001
	31 34359738369 bit-first-one-slow expect==
	;

: test-bit-first-one
	 0 "80000000" parse-hex bit-first-one expect==
	 4 "08000000" parse-hex bit-first-one expect==
	 8 "00800000" parse-hex bit-first-one expect==
	12 "00080000" parse-hex bit-first-one expect==
	16 "00008000" parse-hex bit-first-one expect==
	20 "00000800" parse-hex bit-first-one expect==
	24 "00000080" parse-hex bit-first-one expect==
	28 "00000008" parse-hex bit-first-one expect==
	31 "00000001" parse-hex bit-first-one expect==
	void "00000000" parse-hex bit-first-one expect==
	
	 5 "041ab3fd" parse-hex bit-first-one expect==
	23 "0000011a" parse-hex bit-first-one expect==
	27 "0000001a" parse-hex bit-first-one expect==
	
	\ test bad value (> 32 bits)
	\ 8 0000 0000
	void 34359738368 bit-first-one expect==
	\ 8 0400 0000
	9 34363932672 bit-first-one expect==
	\ 8 0000 0001
	31 34359738369 bit-first-one expect==
	;
	
: test-bit-leading-ones-slow
	32 "ffffffff" parse-hex bit-leading-ones-slow expect==
	25 "ffffff8f" parse-hex bit-leading-ones-slow expect==
	20 "fffff7ff" parse-hex bit-leading-ones-slow expect==
	16 "ffff1fff" parse-hex bit-leading-ones-slow expect==
	14 "fffcffff" parse-hex bit-leading-ones-slow expect==
	11 "ffefffff" parse-hex bit-leading-ones-slow expect==
	 5 "faffffff" parse-hex bit-leading-ones-slow expect==
	 1 "8fffffff" parse-hex bit-leading-ones-slow expect==
	 0 "7fffffff" parse-hex bit-leading-ones-slow expect==
	;

: test-bit-leading-ones
	32 "ffffffff" parse-hex bit-leading-ones expect==
	25 "ffffff8f" parse-hex bit-leading-ones expect==
	20 "fffff7ff" parse-hex bit-leading-ones expect==
	16 "ffff1fff" parse-hex bit-leading-ones expect==
	14 "fffcffff" parse-hex bit-leading-ones expect==
	11 "ffefffff" parse-hex bit-leading-ones expect==
	 5 "faffffff" parse-hex bit-leading-ones expect==
	 1 "8fffffff" parse-hex bit-leading-ones expect==
	 0 "7fffffff" parse-hex bit-leading-ones expect==
	;
	
: test-bit-leading-zeros
	32 "00000000" parse-hex bit-leading-zeros expect==
	31 "00000001" parse-hex bit-leading-zeros expect==
	24 "0000008f" parse-hex bit-leading-zeros expect==
	21 "000004ff" parse-hex bit-leading-zeros expect==
	18 "00002fff" parse-hex bit-leading-zeros expect==
	15 "0001ffff" parse-hex bit-leading-zeros expect==
  	 8 "008fffff" parse-hex bit-leading-zeros expect==
  	 5 "04ffffff" parse-hex bit-leading-zeros expect==
  	 1 "7fffffff" parse-hex bit-leading-zeros expect==
 	 0 "ffffffff" parse-hex bit-leading-zeros expect==
	;
	
: test-avg-stddev
	@locals [ VALS ]
	[ 4 -8 -22 12 16 5 -10 1 ] VALS!

	-0.25 VALS average expect==f 
	11.66994001698380000 VALS stddev.p expect==f 
	12.47569064793040000 VALS stddev.s expect==f
	;
	
: test-fp-frac-part
	\ these should work as exact comparisons
	0.125 123.125 fp-frac-part expect==
	0.125 -123.125 fp-frac-part expect==
	0.0625 5768.0625 fp-frac-part expect==
	0.0625 -5768.0625 fp-frac-part expect==
	0.0078125 9876.0078125 fp-frac-part expect==
	0.0078125 -9876.0078125 fp-frac-part expect==
	0.0009765625 572129.0009765625 fp-frac-part expect==
	0.0009765625 -572129.0009765625 fp-frac-part expect==
	;
	
: test-round
	124 123.7 round expect==
	-124 -123.7 round expect==
	123 123.4 round expect==
	-123 -123.4 round expect==
	1 0.517 round expect==
	-1 -0.517 round expect==
	0 0.489 round expect==
	0 -0.489 round expect==
	;
	
: test-fp-mantissa
	@locals [ m p ]
	12345.8125e23 fp-mantissa p! m!
	0.123458125 m expect==f
	28 p expect==
	
	0.00008125 fp-mantissa p! m!
	0.8125 m expect==f 
	-4 p expect==
	
	-12345.8125e23 fp-mantissa p! m!
	-0.123458125 m expect==f
	28 p expect==
	
	-0.00008125 fp-mantissa p! m!
	-0.8125 m expect==f 
	-4 p expect==
	
	0.1234567 fp-mantissa p! m!
	0.1234567 m expect==f 
	0 p expect==
	
	-0.1234567 fp-mantissa p! m!
	-0.1234567 m expect==f 
	0 p expect==
	;
	
: test-fmt-ndecimal
	"12.37" 12.365 2 fmt-ndecimal expect==
	"12.36" 12.364 2 fmt-ndecimal expect==
	
	"-12.37" -12.365 2 fmt-ndecimal expect==
	"-12.36" -12.364 2 fmt-ndecimal expect==
	
	"0.126" 0.1258 3 fmt-ndecimal expect==
	"0.125" 0.1254 3 fmt-ndecimal expect==
	
	"-0.126" -0.1258 3 fmt-ndecimal expect==
	"-0.125" -0.1254 3 fmt-ndecimal expect==
	
	"765.1238" 765.12375 4 fmt-ndecimal expect==
	"765.1237" 765.12374 4 fmt-ndecimal expect==
	
	"-765.1238" -765.12375 4 fmt-ndecimal expect==
	"-765.1237" -765.12374 4 fmt-ndecimal expect==
	;
	
: test-fp-exp-string
	"e+123" 123 fp-exp-string expect==
	"e+5" 5 fp-exp-string expect==
	"" 0 fp-exp-string expect==
	"e-7" -7 fp-exp-string expect==
	"e-45" -45 fp-exp-string expect==
	;
	
: test-fmt-float 
	"7.81e-3" 0.0078125 4 2 fmt-float expect==
	"7.8125e-3" 0.0078125 2 4 fmt-float expect==
	"6.25e-2" 0.0625 4 2 fmt-float expect==
	"6.3e-2" 0.0625 4 1 fmt-float expect==
	"1.25e-1" 0.125 4 2 fmt-float expect==
	"1.13" 1.125 4 2 fmt-float expect==
	"12.01" 12.0078125 4 2 fmt-float expect==
	"12.00781" 12.0078125 4 5 fmt-float expect==
	"123.13" 123.125 4 2 fmt-float expect==
	"1234.13" 1234.125 4 2 fmt-float expect==
	"1234.51e+1" 12345.125 4 2 fmt-float expect==
	"1234.56e+2" 123456.0078125 4 2 fmt-float expect==
	"1234.57e+5" 123456789.123456 4 2 fmt-float expect==

	"-7.81e-3" -0.0078125 4 2 fmt-float expect==
	"-7.82e-3" -0.0078175 4 2 fmt-float expect==
	
	"-12.00782" -12.0078175 4 5 fmt-float expect==
	;
	
: test-fmt-percent
	"54.12" 0.5412 2 fmt-percent expect==
	"65.3" 0.653 1 fmt-percent expect==
	"1.00" 0.0100 2 fmt-percent expect==
	"100.00" 1.0 2 fmt-percent expect==
	"12" 0.12 0 fmt-percent expect==
	"15" 0.147 0 fmt-percent expect==
	"0.10" 0.001 2 fmt-percent expect==
	"12.346" 0.123456 3 fmt-percent expect==
	;
	
: test-int-packing
	\ packing
	#xd4 pack-int8 #xd4 chr expect==
	
	#xabcd pack-int16-LE #xcd chr #xab chr + expect==
	#xabcd pack-int16-BE #xab chr #xcd chr + expect==
	
	#xcd9876 pack-int24-LE #x76 chr #x98 chr + #xcd chr + expect==
	#xcd9876 pack-int24-BE #xcd chr #x98 chr + #x76 chr + expect==
	
	#xabcd9876 pack-int32-LE #x76 chr #x98 chr + #xcd chr + #xab chr + expect==
	#xabcd9876 pack-int32-BE #xab chr #xcd chr + #x98 chr + #x76 chr + expect==
	
	\ unpacking
	#xe3 chr unpack-int8 #xe3 expect==
	
	#xcd chr #xab chr + unpack-int16-LE #xabcd expect==
	#xcd chr #xab chr + unpack-int16-BE #xcdab expect==
	
	#xcd chr #x98 chr + #x76 chr + unpack-int24-LE #x7698cd expect==
	#xcd chr #x98 chr + #x76 chr + unpack-int24-BE #xcd9876 expect==
	
	#x76 chr #x98 chr + #xcd chr + #xab chr + unpack-int32-LE #xabcd9876 expect==
	#x76 chr #x98 chr + #xcd chr + #xab chr + unpack-int32-BE #x7698cdab expect==
	
	;
	