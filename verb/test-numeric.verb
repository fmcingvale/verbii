\ Test numeric module and other number-related things
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

"unittest" import
"numeric" import

: test-parse-hex
	2595453966 "9ab37c0e" parse-hex expect==
	2068551320 "7b4b9698" parse-hex expect==
	2503746217 "953c22a9" parse-hex expect==
	2235264886 "853b6f76" parse-hex expect==
	3302115232 "c4d247a0" parse-hex expect==
	4032181163 "f05633ab" parse-hex expect==
	1190136849 "46f00c11" parse-hex expect==
	         0 "00000000" parse-hex expect==
	4294967295 "ffffffff" parse-hex expect==
	  11259375   "ABCDEF" parse-hex expect==
	;
	
: test-str.hex
	2882400152 str.hex "abcdef98" expect==
	2271562428 str.hex "87654abc" expect==
	4275830784 str.hex "fedc0000" expect==
	4294967295 str.hex "ffffffff" expect==
	      2748 str.hex "00000abc" expect==
		    15 str.hex "0000000f" expect==
			 0 str.hex "00000000" expect==
	;
	
: test-bit-not-and-or-xor
	\ 11001001100010100110001011100110
	\ 00110110011101011001110100011001

	913677593 3381289702 bit-not expect==
	
	\ 01000000100001000000001100001000 1082393352
	\ 10000100000001000010000100010001 2214863121
	\ 11000100100001000010001100011001 3296994073
	3296994073 1082393352 2214863121 bit-or expect==

	\ 11110011000011111011111001111101 4077895293
	\ 10001100111100001110000111000110 2364596678
	\ 10000000000000001010000001000100 2147524676
	2147524676 4077895293 2364596678 bit-and expect==

	\ 11010011010010011010011100110010 3544819506
	\ 00110110110011100100010011000110 919487686
	\ 11100101100001111110001111110100 3850888180
	3850888180 3544819506 919487686 bit-xor expect==
	;

: test-str.bin 
	"00000000.00010010.11010110.10000111" 1234567 str.bin expect==
	"10100100.10001011.11010011.11001111" 2760627151 str.bin expect==
	"11110100.11010000.01111011.11100011" 4107303907 str.bin expect==
	"00000011.01000100.11010111.10011111" 54843295 str.bin expect==
	;
	
: test-bit-shr
	"0fedcba9" "fedcba98" parse-hex  4 bit-shr str.hex expect==
	"00fedcba" "fedcba98" parse-hex  8 bit-shr str.hex expect==
	"000fedcb" "fedcba98" parse-hex 12 bit-shr str.hex expect==
	"0000fedc" "fedcba98" parse-hex 16 bit-shr str.hex expect==
	"00000fed" "fedcba98" parse-hex 20 bit-shr str.hex expect==
	"000000fe" "fedcba98" parse-hex 24 bit-shr str.hex expect==
	"0000000f" "fedcba98" parse-hex 28 bit-shr str.hex expect==
	"00000000" "fedcba98" parse-hex 32 bit-shr str.hex expect==
	
	\ 11111000000000000000000000000000 4160749568
	\ 00000011111000000000000000000000 65011712

	65011712 4160749568 6 bit-shr expect==

	\ 10000000000000000000000000000000
	\ 2147483648
	\ 1073741824
	\ 536870912

	1073741824  1 31 bit-shl 1 bit-shr expect==
	536870912  1 31 bit-shl 2 bit-shr expect==
	;
	
: test-bit-shl
	"8abcdef0" "98abcdef" parse-hex  4 bit-shl str.hex expect==
	"abcdef00" "98abcdef" parse-hex  8 bit-shl str.hex expect==
	"bcdef000" "98abcdef" parse-hex 12 bit-shl str.hex expect==
	"cdef0000" "98abcdef" parse-hex 16 bit-shl str.hex expect==
	"def00000" "98abcdef" parse-hex 20 bit-shl str.hex expect==
	"ef000000" "98abcdef" parse-hex 24 bit-shl str.hex expect==
	"f0000000" "98abcdef" parse-hex 28 bit-shl str.hex expect==
	"00000000" "98abcdef" parse-hex 32 bit-shl str.hex expect==
	
	2147483648  1 31 bit-shl expect==
	
	\ 11000000000000000000000000000000 3221225472
	\ 10000000000000000000000000000000 2147483648
	\ 00000000000000000000000000000000 0

	3221225472 3 30 bit-shl expect==
	2147483648 3 31 bit-shl expect==
	0 3 32 bit-shl expect==
	;

: test-bit-rotl
	"876abcd9" "9876abcd" parse-hex  4 bit-rotl str.hex expect==
	"76abcd98" "9876abcd" parse-hex  8 bit-rotl str.hex expect==
	"6abcd987" "9876abcd" parse-hex 12 bit-rotl str.hex expect==
	"abcd9876" "9876abcd" parse-hex 16 bit-rotl str.hex expect==
	"bcd9876a" "9876abcd" parse-hex 20 bit-rotl str.hex expect==
	"cd9876ab" "9876abcd" parse-hex 24 bit-rotl str.hex expect==
	"d9876abc" "9876abcd" parse-hex 28 bit-rotl str.hex expect==
	"9876abcd" "9876abcd" parse-hex 32 bit-rotl str.hex expect==
	;

: test-bit-rotr
	"d9876abc" "9876abcd" parse-hex  4 bit-rotr str.hex expect==
	"cd9876ab" "9876abcd" parse-hex  8 bit-rotr str.hex expect==
	"bcd9876a" "9876abcd" parse-hex 12 bit-rotr str.hex expect==
	"abcd9876" "9876abcd" parse-hex 16 bit-rotr str.hex expect==
	"6abcd987" "9876abcd" parse-hex 20 bit-rotr str.hex expect==
	"76abcd98" "9876abcd" parse-hex 24 bit-rotr str.hex expect==
	"876abcd9" "9876abcd" parse-hex 28 bit-rotr str.hex expect==
	"9876abcd" "9876abcd" parse-hex 32 bit-rotr str.hex expect==
	;
	
: test-bit-low32
	\ have to test numerically since e.g. str.hex always truncates to 32 bits
	\ so would not be a valid test
	188900976391764 bit-low32 4019746388 expect==
	;
	
: test-bit-count-ones-slow
	4 "84210000" parse-hex bit-count-ones-slow expect==
	32 "ffffffff" parse-hex bit-count-ones-slow expect==
	0 0 bit-count-ones-slow expect==
	21 "C6F37D9B" parse-hex bit-count-ones-slow expect==
	;
	
: test-bit-count-ones
	4 "84210000" parse-hex bit-count-ones expect==
	32 "ffffffff" parse-hex bit-count-ones expect==
	0 0 bit-count-ones expect==
	21 "C6F37D9B" parse-hex bit-count-ones expect==
	;

: test-bit-first-one-slow 
	 0 "80000000" parse-hex bit-first-one-slow expect==
	 4 "08000000" parse-hex bit-first-one-slow expect==
	 8 "00800000" parse-hex bit-first-one-slow expect==
	12 "00080000" parse-hex bit-first-one-slow expect==
	16 "00008000" parse-hex bit-first-one-slow expect==
	20 "00000800" parse-hex bit-first-one-slow expect==
	24 "00000080" parse-hex bit-first-one-slow expect==
	28 "00000008" parse-hex bit-first-one-slow expect==
	31 "00000001" parse-hex bit-first-one-slow expect==
	void "00000000" parse-hex bit-first-one-slow expect==
	
	 5 "041ab3fd" parse-hex bit-first-one-slow expect==
	23 "0000011a" parse-hex bit-first-one-slow expect==
	27 "0000001a" parse-hex bit-first-one-slow expect==
	
	\ test bad value (> 32 bits)
	\ 8 0000 0000
	void 34359738368 bit-first-one-slow expect==
	\ 8 0400 0000
	9 34363932672 bit-first-one-slow expect==
	\ 8 0000 0001
	31 34359738369 bit-first-one-slow expect==
	;

: test-bit-first-one
	 0 "80000000" parse-hex bit-first-one expect==
	 4 "08000000" parse-hex bit-first-one expect==
	 8 "00800000" parse-hex bit-first-one expect==
	12 "00080000" parse-hex bit-first-one expect==
	16 "00008000" parse-hex bit-first-one expect==
	20 "00000800" parse-hex bit-first-one expect==
	24 "00000080" parse-hex bit-first-one expect==
	28 "00000008" parse-hex bit-first-one expect==
	31 "00000001" parse-hex bit-first-one expect==
	void "00000000" parse-hex bit-first-one expect==
	
	 5 "041ab3fd" parse-hex bit-first-one expect==
	23 "0000011a" parse-hex bit-first-one expect==
	27 "0000001a" parse-hex bit-first-one expect==
	
	\ test bad value (> 32 bits)
	\ 8 0000 0000
	void 34359738368 bit-first-one expect==
	\ 8 0400 0000
	9 34363932672 bit-first-one expect==
	\ 8 0000 0001
	31 34359738369 bit-first-one expect==
	;
	
: test-basic-mathops
	12 12 expect==
	-34 -34 expect==
	20 8 expect!=

	#123.125 #123.125 expect==
	#-4.5 #-4.5 expect==
	#45.125 #35.125 expect!=

	123.125 #123.125 expect==
	-4.5 #-4.5 expect==
	45.125 #35.125 expect!=

	123 #123 expect==
	-45 #-45 expect==
	123 #1234 expect!=
	#987.0 987 expect==
	
	\ make sure expect==f is working ...
	10 10.0000000000001 expect==f
	12 12.1 expect!=f
	
	71.78504672897196 7681 107 / expect==f
	1.204044397141554 7919 6577 / expect==f
	275.1680469808764 1827391 6641 / expect==f
	
	( *** rounding of / -- should round to nearest *** ) 

	( round down 8.3 -> 8 ) 
	8 639 77 /mod nip expect==
	23 639 77 /mod drop expect==

	-8 -639 77 /mod nip expect==
	-23 -639 77 /mod drop expect==

	8 639 77 // expect==
	-8 -639 77 // expect==
	
	23 639 77 mod expect==
	-23 -639 77 mod expect==

	( round down 7.8 -> 7 ) 
	7 335 43 // expect==
	34 335 43 mod expect==

	-7 -335 43 // expect==
	-34 -335 43 mod expect==
	
	( round 6.5 -> 6 ) 
	6 403 62 // expect==
	31 403 62 mod expect==
	
	-6 -403 62 // expect==
	-31 -403 62 mod expect==
 
	( floor )
	3 3.21 floor expect==
	4 4 floor expect==
	-4 -3.21 floor expect==
	-5 -5 floor expect==
	
	( this was a c++ & c# bug case with # > 32 bits ) 
	5750699319 11501398638 2 /mod nip expect==
	0 11501398638 2 /mod drop expect==
	
	( numerical limits -- non-error cases )
	( ports are required to support UP TO these max values )

	9007199254740991 9007199254740981 10 + expect==
	-9007199254740991 -9007199254740971 20 - expect==

	( relational operators )
	10 20 >= expect-false
	30 20 >= expect-true
	40 40 >= expect-true

	-12 8 > expect-false
	100 2 > expect-true
	212 -84 > expect-true
	123 123 > expect-false
	-456 -456 > expect-false

	10 20 < expect-true
	30 10 < expect-false
	40 40 < expect-false

	15 20 <= expect-true
	35 21 <= expect-false
	40 40 <= expect-true

	( combinations of rich math operations )
	30 10 20 + expect==
	31 10 #21 + expect==
	
	33 #11 22 + expect==
	44 #11 #33 + expect==

	-10 10 20 - expect==
	-11 10 #21 - expect==
	-9 #11 20 - expect==
	-55 #22 #77 - expect==

	200 10 20 * expect==
	210 10 #21 * expect==
	144 #12 12 * expect==
	400 #10 #40 * expect==

	0.5 10 20 / expect==
	2 40 #20 / expect==
	15 #30 2 / expect==
	4 #100 #25 / expect==
	
	( more math operations )
	-123 123 neg expect==
	456 -456 neg expect==

	456 123 456 max expect==
	200 -500 200 max expect==
	300 300 -44 max expect==
	444 444 444 max expect==

	100 100 200 min expect==
	-400 -400 500 min expect==
	-40 123 -40 min expect==
	77 77 77 min expect==

	123 123 abs expect==
	99 -99 abs expect==
	0 0 abs expect==
	;
	
: test-float-precision
	@locals [ list ]
	#1.2345678 #0.3456789 #8.8567843 3 make-list list!

	4 f.setprec 
	"[ 1.235 0.3457 8.857 ]" list str expect==

	2 f.setprec
	"[ 1.2 0.35 8.9 ]" list str expect==

	1 f.setprec
	"[ 1 0.3 9 ]" list str expect==
	
	\ set back to default
	17 f.setprec
	
	\ make sure that worked ... make a power of 2 so MAYBE it will
	\ be portable ...
	"#5.9604644775390625e-08" 1 { 2 / } 24 repeat repr expect==
	;
	
: test-sin
	\ 0, 90, 180, 270
	0 0 sin expect==f 
	1 PI 2 / sin expect==f 
	0 PI sin expect==f 
	-1 3 4 / PI * sin expect==f
	\ 2 per quadrant
	0.17364817766693033 10 180 / PI * sin expect==f 
	0.8910065241883678 63 180 / PI * sin expect==f 
	0.9396926207859083 110 180 / PI * sin expect==f 
	0.48480962024633717 151 180 / PI * sin expect==f 
	-0.39073112848927355 203 180 / PI * sin expect==f 
	-0.9455185755993168 251 180 / PI * sin expect==f 
	-0.9743700647852352 283 180 / PI * sin expect==f 
	0.5299192642332 321 180 / PI * sin expect==f 
	;
	
: test-cos
	\ 0, 90, 180, 270
	1 0 cos expect==f 
	0 PI 2 / cos expect==f 
	-1 PI cos expect==f 
	0 3 4 / PI * cos expect==f
	\ 2 per quadrant
	0.984807753012208 10 180 / PI * cos expect==f 
	0.4539904997395468 63 180 / PI * cos expect==f 
	-0.34202014332566893 110 180 / PI * cos expect==f 
	-0.8746197071394 151 180 / PI * cos expect==f 
	-0.9205048534524404 203 180 / PI * cos expect==f 
	-0.32556815445715664 251 180 / PI * cos expect==f 
	0.22495105434386492 283 180 / PI * cos expect==f 
	0.7771459614569711 321 180 / PI * cos expect==f 
	;
	
: test-acos 
	2.67033938499429793 -0.891 acos expect==f
	1.78851221820100594 -0.216 acos expect==f
	1.13404277084559488 0.423 acos expect==f
	0.61113026917198360 0.819 acos expect==f 
	;

: test-asin
	-0.7923423866392785 -0.712 asin expect==f
	-0.3267851765314954 -0.321 asin expect==f
	0.28900642817350133 0.285 asin expect==f
	1.05927332310081910 0.872 asin expect==f
	;
	
: test-tan 
	\ each quadrant
	3.00956967386283128 1.25 tan expect==f 
	-1.6157594239734600 2.125 tan expect==f 
	0.69655085111146013 3.75 tan expect==f 
	-1.6773264066243891 5.25 tan expect==f 
	;
	
: test-atan
	\ one per quadrant
	0.24781151673870185 0.21 0.83 atan2 expect==f
	2.02186598278342009 0.64 -0.31 atan2 expect==f
	-1.0471116657986533 -0.71 0.41 atan2 expect==f
	-2.7460215028469865 -0.38 -0.91 atan2 expect==f
	;
	
: test-sqrt
	\ integers
	47453132.81212578 2251799813685248 sqrt expect==f 
	31487.864424250813 991485606 sqrt expect==f
	\ floats
	1.3592361825672535e+63 1847523e120 sqrt expect==f 
	\ keep numbers > UNITTEST-TINY-FLOAT for valid test
	9.863524729950243e-06 9.728912009834e-11 sqrt expect==f
	
	1.3407807929942596e+154 FLOAT-MAX sqrt expect==f
	;
	
: test-log
	1 E-VAL log expect==f 
	14.442702213911256 1872345 log expect==f 
	299.322976849677283 987e127 log expect==f
	-1.6460323971461603 0.1928134 log expect==f
	;
	
: test-exp 
	E-VAL 1 exp expect==f 
	4.34923514106274090 1.47 exp expect==f 
	2.61186521103813154e+58 134.51 exp expect==f
	0.04321391826377224 PI neg exp expect==f
	;

: test-pow
	1529.20940336129787 3.129 6.428 pow expect==f 
	6350.707917786241 -8.927 4 pow expect==f 
	1.127506316997835e-11 88.72 -5.62 pow expect==f 
	;
	
: test-avg-stddev
	@locals [ VALS ]
	[ 4 -8 -22 12 16 5 -10 1 ] VALS!

	-0.25 VALS average expect==f 
	11.66994001698380000 VALS stddev.p expect==f 
	12.47569064793040000 VALS stddev.s expect==f
	;
	