\ Pseudo-random number generation (for non-cryptographic use)
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

"numeric" import

\ ==================================================================================
\ this is the public API -- use names without the -xor32 prefix so the algorithm
\ could be changed later without breaking compatibility
\ ==================================================================================

\ ** TODO need to bind this dynamically to one of the random* modules 

\ returns random number between 0..1 )
\ ( -- n )
: random xorshift32 MAX_INT32 / ;

\ Returns random integer on the interval [a, b)
\ ( a b -- n )
: randint @( a b -- n )
	b a - random * a + floor \ floor((b-a)*random + a)
	;

\ Return random float on the interval [a, b)
: randfloat @( a b -- n )
	b a - random * a +
	;
	
\ make nr random integers on interval [a,b) and return as list
: randint-list @( a b nr -- list )
	[ ] list!
	@{ list a b randint append list! } nr repeat
	list
	;
	
\ make nr random floats on interval [a,b) and return as list
: randfloat-list @( a b nr -- list )
	[ ] list!
	@{ list a b randfloat append list! } nr repeat
	list
	;

'BOX-MULLER-MEAN void make-var
'BOX-MULLER-SIGMA void make-var
'BOX-MULLER-NEXT void make-var

: box-muller-next
	\ algorithm: https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
	@locals [ u0 u1 z0 z1 mag angle ]
	BOX-MULLER-NEXT void? not if >>return-next
	random u0!
	random u1!
	
	-2 u0 log * sqrt BOX-MULLER-SIGMA * mag!
	2 PI * u1 * angle!
	mag angle cos * BOX-MULLER-MEAN + z0!
	mag angle sin * BOX-MULLER-MEAN + z1!
	z1 BOX-MULLER-NEXT!
	z0 return
	
	@return-next BOX-MULLER-NEXT void BOX-MULLER-NEXT!
	;
	
: random-normal-init @( mean sigma )
	mean BOX-MULLER-MEAN!
	sigma BOX-MULLER-SIGMA!
	void BOX-MULLER-NEXT!
	;
	
: random-normal box-muller-next ;

\ make nr normal random floats on interval mean+[0,1) with given sigma and return as list
: random-normal-list @( mean sigma nr -- list )
	mean sigma random-normal-init
	[ ] list!
	@{ list random-normal append list! } nr repeat
	list
	;
	
	
	