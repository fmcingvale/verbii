\ Pseudo-random number generation (for non-cryptographic use)
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

"numeric" import
"random-xorshift32" import
"random-mersenne" import
"random-xoshiro128++" import
"random-xoshiro128starstar" import
"random-worker" import

\ ==================================================================================
\ this is the public API -- use names without the -xor32 prefix so the algorithm
\ could be changed later without breaking compatibility
\ ==================================================================================

\ uncomment one to choose default random module, or set at runtime via code
\ (if switching modules, remember to re-seed before using)
\ 'RANDOM-MODULE "xorshift32" make-var
\ 'RANDOM-MODULE "mersenne" make-var
'RANDOM-MODULE "xoshiro128++" make-var
\ 'RANDOM-MODULE "xoshiro128**" make-var

\ seed random number generator in one of several ways:
\
\	* text - generate seed from the fnv-1a hash of text
\ 		the string should contain at least 128 bits of information
\		(so i.e. a string of hex chars [= 4 bits each] would need to be length 32.
\	
\	* list of 4 integers - use the values directly as the 128 bit seed 
\
\	* null - generate own seed
: random-seed ( seedval )
	@locals [ n vals ]
	\ seed what kind of seed i received:
	seedval string? if >>seed-is-text 
	seedval list? if >>seed-is-list 
	seedval null? if >>seed-is-null
	"Bad seed value (expecting string, list or null): " seedval str + error
	
	@seed-is-text
			\ "SEEDTEXT:" . seedtext . CR
		seedval length 4 < if >>tooshort
		\ pad to length 4
		@pad
			seedval length 4 mod 0 == if >>divide 
			seedval "*" + seedtext! <<pad
		@divide
			\ "PADDED:" . seedtext . CR
		\ divide into 4 chunks of equal length and set vals list from the hashes
		seedval length 4 / floor n!
		[ ] vals!
		{ seedval length 0 != }
			{ vals
					\ "CHUNK:" . seedtext 0 n slice . CR
				seedval 0 n slice fnv-1a-32 append!
				seedval n -1 slice seedval! 
			} /while
			
		>>use-seed 
		
	@seed-is-list
		seedval vals!
		>>use-seed
		
	@seed-is-null
		\ use worker3 to generate 4 random 32 bit integers for seed
		\ (worker3 APPEARS to have the best randomness performance, from demo-randomness.verb,
		\ of the 3 worker methods)
		[ ] vals!
		{ vals randworker3-generate-32 append! } 4 repeat
		>>use-seed
		
	@use-seed
		\ "VALS:" . vals . CR
	\ decide how to use vals based on active random module
	RANDOM-MODULE "xorshift32" == if >>xor32
	RANDOM-MODULE "mersenne" == if >>mersenne
	RANDOM-MODULE "xoshiro128++" == if >>xos128++
	RANDOM-MODULE "xoshiro128**" == if >>xos128**
	RANDOM-MODULE "worker" == if >>worker
	RANDOM-MODULE "worker2" == if >>worker2
	RANDOM-MODULE "worker3" == if >>worker3
	"Unknown random module: " RANDOM-MODULE str + error 
	
	@xor32
		\ only need 32 bits of state, so just use first val
		vals 0 get xorshift32-seed return
	
	@mersenne
		\ 32 bit seed
		vals 0 get mersenne-random-seed return
	
	@xos128++
		\ uses 128 bits
		vals unmake drop xoshiro128pp-seed
			\ "STATE:" . XOSHIRO128PP-STATE . CR 
		return

	@xos128**
		\ uses 128 bits
		vals unmake drop xoshiro128ss-seed return
	
	@worker
		\ not really a seed value - just calculates a calibration constant - but
		\ fits here in the sense of initializing the generator
		randworker-calibrate return
	
	@worker2
		\ as with worker above, this is just a calibration
		init-randworker2 return
	
	@worker3
		\ nothing to do -- will init itself when needed
		return
		
	@tooshort
		"Seed value too short (must be >= 4), got: " seedtext + error
	;
		
\ returns random 32 bit integer
: random-int32 ( -- n )
	RANDOM-MODULE "xorshift32" == if >>xor32 
	RANDOM-MODULE "mersenne" == if >>mersenne
	RANDOM-MODULE "xoshiro128++" == if >>xos128++
	RANDOM-MODULE "xoshiro128**" == if >>xos128**
	RANDOM-MODULE "worker" == if >>worker
	RANDOM-MODULE "worker2" == if >>worker2
	RANDOM-MODULE "worker3" == if >>worker3
	"Unknown random module: " RANDOM-MODULE str + error 
	
	@xor32 
		xorshift32 return
		
	@mersenne
		mersenne-random-extract return
		
	@xos128++
		xoshiro128pp-next return
	
	@xos128**
		xoshiro128ss-next return
	
	@worker
		randworker-gen32bit return
		
	@worker2
		randworker2-generate-32 return
		
	@worker3
		randworker3-generate-32 return
	;

\ returns random number between [0..1)
\ ( -- n )
: random ( -- n ) random-int32 MAX-INT32 1 + / ;

\ Returns random integer on the interval [a, b)
\ ( a b -- n )
: randint ( a b -- n )
	b a - random * a + floor \ floor((b-a)*random + a)
	;

\ Return random float on the interval [a, b)
: randfloat ( a b -- n )
	b a - random * a +
	;
	
\ make nr random integers on interval [a,b) and return as list
: randint-list ( a b nr -- list )
	[ ] list!
	{ list a b randint append list! } nr repeat
	list
	;
	
\ make nr random floats on interval [a,b) and return as list
: randfloat-list ( a b nr -- list )
	[ ] list!
	{ list a b randfloat append list! } nr repeat
	list
	;

'BOX-MULLER-MEAN void make-var
'BOX-MULLER-SIGMA void make-var
'BOX-MULLER-NEXT void make-var

: box-muller-next
	\ algorithm: https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
	@locals [ u0 u1 z0 z1 mag angle ]
	BOX-MULLER-NEXT void? not if >>return-next
	random u0!
	random u1!
	
	-2 u0 log * sqrt BOX-MULLER-SIGMA * mag!
	2 PI * u1 * angle!
	mag angle cos * BOX-MULLER-MEAN + z0!
	mag angle sin * BOX-MULLER-MEAN + z1!
	z1 BOX-MULLER-NEXT!
	z0 return
	
	@return-next BOX-MULLER-NEXT void BOX-MULLER-NEXT!
	;
	
: random-normal-init ( mean sigma )
	mean BOX-MULLER-MEAN!
	sigma BOX-MULLER-SIGMA!
	void BOX-MULLER-NEXT!
	;
	
: random-normal box-muller-next ;

\ make nr normal random floats on interval mean+[0,1) with given sigma and return as list
: random-normal-list ( mean sigma nr -- list )
	mean sigma random-normal-init
	[ ] list!
	{ list random-normal append list! } nr repeat
	list
	;
	
	
	