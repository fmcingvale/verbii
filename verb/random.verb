\ Pseudo-random number generation (for non-cryptographic use)
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

"hashing" import

: str.b ( n -- ; get n as binary string )
	32 "" -rot
	@loop ( s n i )
		dup 0 == if >>done ( i==0? )
		over 1 bit-and 0 == if >>zero
			rot "1" swap + -rot >>next ( prepend 1 )
		@zero
			rot "0" swap + -rot ( prepend 0 )
		@next ( s n i )
			swap 1 bit-shr swap 1 - ( s n>>1 --i )
			<<loop
	@done
		drop drop ( leave string on stack )
		\ put in dotted form for readability
		dup 0 8 slice "." + swap
		dup 8 8 slice "." + swap 
		dup 16 8 slice "." + swap 
		24 8 slice
		+ + + 
		;

\ 32-bit xor-shift pseudo random number generator
\ ported from: https://en.wikipedia.org/wiki/Xorshift
'XORSHIFT_32_STATE void make-var

: xorshift32-seed ( n -- ; seed randomizer with seed n )
	XORSHIFT_32_STATE!
	;

\ on startup, set default seed using hash of current date/time as string plus current runtime as string.
\ there appears to be enough variability in startup time that even running the script multiple times
\ in the same second will give a unique starting seed (of course, this is all considered non-cryptogrphic
\ RNG anyways, but at least trying to give better than 1-second resolution on this)
time-string " " + run-time str + hash-fnv-32 xorshift32-seed

: xorshift32 ( -- n ; returns random n )
	XORSHIFT_32_STATE ( x )
	dup 13 bit-shl ( x x<<13 )
	bit-xor ( x ^ x<<13 )
	dup 17 bit-shr ( x x>>17 )
	bit-xor ( x ^ x>>17 )
	dup 5 bit-shl ( x x<<5 )
	bit-xor ( x ^ x>>5 )
	dup XORSHIFT_32_STATE!
	( leave state on stack as result )
	;

\ ==================================================================================
\ this is the public API -- use names without the -xor32 prefix so the algorithm
\ could be changed later without breaking compatibility
\ ==================================================================================

\ returns random number between 0..1 )
\ ( -- n )
: random xorshift32 MAX_INT32 / ;

\ Returns random integer on the interval [a, b)
\ ( a b -- n )
: randint @( a b -- n )
	b a - random * a + floor \ floor((b-a)*random + a)
	;

\ Return random float on the interval [a, b)
: randfloat @( a b -- n )
	b a - random * a +
	;
	
\ make nr random integers on interval [a,b) and return as list
: randint-list @( a b nr -- list )
	[ ] list!
	@{ list a b randint append list! } nr repeat
	list
	;
	
\ make nr random floats on interval [a,b) and return as list
: randfloat-list @( a b nr -- list )
	[ ] list!
	@{ list a b randfloat append list! } nr repeat
	list
	;

'BOX-MULLER-MEAN void make-var
'BOX-MULLER-SIGMA void make-var
'BOX-MULLER-NEXT void make-var
'PI 3.1415926535897931 make-var

: box-muller-next
	\ algorithm: https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
	@locals [ u0 u1 z0 z1 mag angle ]
	BOX-MULLER-NEXT void? not if >>return-next
	random u0!
	random u1!
	
	-2 u0 log * sqrt BOX-MULLER-SIGMA * mag!
	2 PI * u1 * angle!
	mag angle cos * BOX-MULLER-MEAN + z0!
	mag angle sin * BOX-MULLER-MEAN + z1!
	z1 BOX-MULLER-NEXT!
	z0 return
	
	@return-next BOX-MULLER-NEXT void BOX-MULLER-NEXT!
	;
	
: random-normal-init @( mean sigma )
	mean BOX-MULLER-MEAN!
	sigma BOX-MULLER-SIGMA!
	void BOX-MULLER-NEXT!
	;
	
: random-normal box-muller-next ;

\ make nr normal random floats on interval mean+[0,1) with given sigma and return as list
: random-normal-list @( mean sigma nr -- list )
	mean sigma random-normal-init
	[ ] list!
	@{ list random-normal append list! } nr repeat
	list
	;
	
	
	