
\ Hashing functions
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE

\ FNV-1a 32-bit hash function
\
\ This is much faster than fnv-128 since it uses native 32-bit integers.
\
\ Constants from https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
'FNV32-PRIME 16777619 make-var
'FNV32-OFFSET 2166136261 make-var

"numeric" import

: hash-fnv-32 ( text -- hash, as integer, 32-bits )
	\ for each byte:
	\	hash = hash XOR byte
	\	hash = hash * FNV32-PRIME

	\ called with stack: [ hash char ]
	{
		ord bit-xor ( hash^c )
		FNV32-PRIME * ( hash*prime )
	}
	\ init hash = FNV32-OFFSET
	FNV32-OFFSET
	fold
	\ keep 32-bits only
	4294967295 bit-and ( (hash*prime)&0xffffffff )
	;

\ max unsigned 32-bit value
'MAX_INT32 4294967295 make-var

\ ref: https://theartincode.stanis.me/008-djb2/ (djb2 hash)
: hash-djb2 ( string -- hash )
	\ for each char in string, hash = hash * 33 + c, with initial value 5381
	{ ord swap 33 * + } 5381 fold
	MAX_INT32 bit-and ( keep 32 bits only )
	;


