
\ LZW Compression
\
\ This is based on the Python version, but more functional-style using fold, etc.:
\    http://rosettacode.org/wiki/LZW_compression#Python
\
\ Lke the Python version, this compresses to a list of codes, so would need a further encoding 
\ step to convert to a binary stream before this could actually be useful.
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE
\
\ (I'm not sure how basing code on existing Rosetta code [under the GFDL] affects its copyright status.
\ Clearly this code has minimal textual similarity to the original, but the basic algorithm is the same.
\ My purpose of marking this above is to ensure the code is under a free license; if anyone has an 
\ objection please let me know.)
	
: compress ( text -- output )
	@locals [ cmap ]
	
	[ ] make-dict cmap! \ maps text sequences to codes
	
	\ start by adding all single characters to the map as chr(i) -> i
	::{ ( i )
			cmap i chr i put cmap!
	} 0 1 256 for-range

	[ ] output! \ append codes here as generated

	\ fold over all chars in text, updating cmap, output and leaving remaining text in accumulator ...
	text
	::{	( buf c )	\ args from fold (accumulator & next char of text)
		@locals [ buf+c ]	\ <- closures can have their own locals, instead of cluttering namespace in outer scope
		
		buf c + buf+c! \ add c to current input buffer
		cmap buf+c get void? not if >>matched \ if buf+c in cmap, keeping adding more
		\ else, buf is in cmap but buf+c is not, so output the code for buf and add buf+c to cmap
		output cmap buf get append output!
		\ add buf+c to cmap with code=len(cmap)
		cmap buf+c cmap length put cmap!
		\ i just output the code for buf so next buf is just c -- return it to fold as accumulator
		c return
		
		@matched
			\ buf+c is in cmap so it becomes next buffer (return to fold as accumulator)
			buf+c return
	} "" ( initial buf is empty ) fold
	
	\ now, the accumulator left on stack is any chars leftover from buf -- if not empty, then
	\ it is guaranteed to be in cmap since it means i had matched it and was waiting to add
	\ more text when the fold ended. so just add its code ...
	dup length 0 == if >>done 
	output cmap rot get append output!
	@done
		output
	;
	
: decompress ( compressed -- text )
	@locals [ i dmap w ]
	
	[ ] make-dict dmap! \ this maps codes -> strings
	\ init dict to contain 0..255 mapping to first 256 ascii chars
	::{  ( i )
		\ general note: dict keys have to be strings, so 'i str' will be the pattern here and below
		dmap i str i chr put dmap!
	} 0 1 256 for-range
	
	\ note: there is no stringio-like object in verbii (yet, at least) so this is inefficient since it
	\ creates a new string for each char added
	
	compressed 0 get chr w! \ w = chr(compressed[0])
	
	compressed 1 -1 slice \ fold over compressed[1:]
	::{ ( text code ) \ args from fold -- accumulator & next element from compressed
		@locals [ entry ]
		dmap code str get void? not if >>in-dmap \ true if code is in dmap
		dmap length code == if >>new-code \ code i haven't seen before?
		\ else bad value
		"Bad compressed value:" code str + error
		
		@in-dmap
			dmap code str get entry! >>got-entry
		@new-code
			w w 0 get + entry!
		@got-entry
			text entry + text!
			
			\ add w + entry[0] to dmap
			dmap dmap length str w entry 0 get + put dmap!
			
			entry w!
		
			text \ return text to fold as updated accumulator
	} w ( initial value of text ) fold
	
	\ final accumulator left on stack is output text, so just leave it there
	;
	
: test-for-range
	"Count 0 .. 100 by 10:" . { . } 0 10 11 for-range CR
	"Count -100 .. 100 by 25:" . { . } -100 25 9 for-range CR
	;
	
test-for-range

: test-compress-decompress ( text )
	"Input text:  " . text . "length =" . text length . CR
	text compress
	"Compressed:  " . dup . "length =" . dup length . CR
	decompress
	"Decompressed:" . dup . "length =" . length . CR
	;
	
"TOBEORNOTTOBEORTOBEORNOT" test-compress-decompress
\ this kind of sequence is the tricky one for lzw where the decompressor will
\ see codes that are not already in its dictionary ...
"AAAAAAAAAAAAAAAAAAAAAAAAA" test-compress-decompress

"a ab abc abcd abcde abcdef abcde abcd abc ab a" test-compress-decompress



