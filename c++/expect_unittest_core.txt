>> ( unittest_core - test basic language features, roughly in the order that they will usually be implemented )
=> 
>> ( very basic check first )
=> 
>> 1
=> 1 
>> 2
=> 1 2 
>> 3
=> 1 2 3 
>> 4 5 6 7
=> 1 2 3 4 5 6 7 
>> . . . . CR 
7 6 5 4 
=> 1 2 3 
>> 7 6 5 4
=> 1 2 3 7 6 5 4 
>> ( math +, -, * )
=> 1 2 3 7 6 5 4 
>> clear
=> 
>> 10 20 30 40
=> 10 20 30 40 
>> +
=> 10 20 70 
>> -
=> 10 -50 
>> * 
=> -500 
>> +
*** Stack underflow ***
>> ( *** rounding of / -- should round to nearest *** )
=> 
>> ( round down 8.3 -> 8 )
=> 
>> clear
=> 
>> 639 77 /
=> 8 
>> -639 77 /
=> 8 -8 
>> 639 77 /mod
=> 8 -8 23 8 
>> -639 77 /mod
=> 8 -8 23 8 -23 -8 
>> 639 77 mod
=> 8 -8 23 8 -23 -8 23 
>> -639 77 mod
=> 8 -8 23 8 -23 -8 23 -23 
>> ( round down 7.8 -> 7 )
=> 8 -8 23 8 -23 -8 23 -23 
>> clear
=> 
>> 335 43 /
=> 7 
>> -335 43 /
=> 7 -7 
>> 335 43 /mod
=> 7 -7 34 7 
>> -335 43 /mod
=> 7 -7 34 7 -34 -7 
>> 335 43 mod
=> 7 -7 34 7 -34 -7 34 
>> -335 43 mod
=> 7 -7 34 7 -34 -7 34 -34 
>> ( round 6.5 -> 6 )
=> 7 -7 34 7 -34 -7 34 -34 
>> clear
=> 
>> 403 62 /
=> 6 
>> -403 62 /
=> 6 -6 
>> 403 62 /mod
=> 6 -6 31 6 
>> -403 62 /mod
=> 6 -6 31 6 -31 -6 
>> 403 62 mod
=> 6 -6 31 6 -31 -6 31 
>> -403 62 mod
=> 6 -6 31 6 -31 -6 31 -31 
>> ( numerical limits )
=> 6 -6 31 6 -31 -6 31 -31 
>> clear
=> 
>> 1073741823
=> 1073741823 
>> -1073741823
=> 1073741823 -1073741823 
>> 1073741824
*** Integer overflow ***
>> -1073741824
*** Integer overflow ***
>> 1073741823 1 +
*** Integer overflow ***
>> -1073741823 1 -
*** Integer overflow ***
>> 2000000
=> 1073741823 -1073741823 2000000 
>> 1000
=> 1073741823 -1073741823 2000000 1000 
>> *
*** Integer overflow ***
>> 100 0 /
*** Divide by zero ***
>> ( parsing errors )
=> 1073741823 -1073741823 
>> : aaa 123 456
*** End of input while looking for ; ***
>> ( bad comment
*** End of input looking for ) ***
>> ( interpreter errors )
=> 1073741823 -1073741823 
>> foobarbadword
*** Unknown word foobarbadword ***
>> ( stack errors )
=> 1073741823 -1073741823 
>> clear
=> 
>> +
*** Stack underflow ***
>> 10 +
*** Stack underflow ***
>> ( booleans )
=> 
>> clear
=> 
>> 12 12 ==
=> true 
>> -34 -34 ==
=> true true 
>> 20 8 ==
=> true true false 
>> -12 8 >
=> true true false false 
>> 100 2 >
=> true true false false true 
>> 212 -84 >
=> true true false false true true 
>> 123 123 >
=> true true false false true true false 
>> -456 -456 >
=> true true false false true true false false 
>> ( jumps )
=> true true false false true true false false 
>> clear
=> 
>> 11 22 >>THREE @FIVE 55 66 >>SEVEN @THREE 33 44 <<FIVE @SEVEN 77 88
=> 11 22 33 44 55 66 77 88 
>> ( if )
=> 11 22 33 44 55 66 77 88 
>> clear
=> 
>> 100 100 == if >>TRUE >>FALSE @TRUE 1234 >>END @FALSE 5678 @END
=> 1234 
>> 200 200 == if >>TRUE 8888 >>END @TRUE 5678 @END
=> 1234 5678 
>> 100 300 == if >>TRUE >>FALSE @TRUE 9999 >>END @FALSE 8765 @END
=> 1234 5678 8765 
>> 300 200 == if >>TRUE 4321 >>END @TRUE 9999 @END
=> 1234 5678 8765 4321 
>> ( defining words )
=> 1234 5678 8765 4321 
>> clear
=> 
>> : aaa 111 222 333 444 ;
=> 
>> : bbb 99 88 77 ;
=> 
>> aaa
=> 111 222 333 444 
>> bbb
=> 111 222 333 444 99 88 77 
>> clear
=> 
>> ( show that forward references are fine )
=> 
>> : ccc 11 ddd 88 ;
=> 
>> : ddd 22 eee 77 ;
=> 
>> : eee 33 fff 66 ;
=> 
>> : fff 44 55 ;
=> 
>> ccc
=> 11 22 33 44 55 66 77 88 
>> ( alternate syntax )
=> 11 22 33 44 55 66 77 88 
>> clear
=> 
>> def ggg 123 456 789 ;
=> 
>> ggg
=> 123 456 789 
>> ( make sure return doesn't crash )
=> 123 456 789 
>> def zzz 123 456 return ;
=> 123 456 789 
>> zzz
=> 123 456 789 123 456 
>> return
=> 123 456 789 123 456 
