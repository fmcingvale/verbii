
\
\ Experimental verbii bootloader/repl
\
\ Copyright (c) 2022 Frank McIngvale, see LICENSE
\

\ NOTE - only builtin words allowed here, at least in the functions
\ that init the interpreter

\ load .b file, run its __main__, then delete __main__
: deserialize-and-run ( filename -- )
	deserialize
	\ run __main__ but be careful -- the __main__ I'm about to run might want to 
	\ redefine __main__ itself (maybe it loads another module, etc.), so do a little
	\ trick: first dump __main__ to a list, delete __main__, then run the dumped list
	'__main__ .dumpword
	del __main__
	call
	;
	
\ assumes interpreter has just started - get init & compiler loaded
: init-interpreter ( -- )

	\ load precompiled init & compiler libraries
	"../lib/init.verb.b" deserialize-and-run 
	"../lib/compiler.verb.b" deserialize-and-run

	\ load patches file -- .verb only for now, add caching later once this is working
	
	\ "../lib/patches.verb" read-file 
	\ compile & load words into interpreter
	\ compile-and-load-string
	\ run main & delete
	 \ __main__ 
	\ '__main__ ,,del
	;

\ run read-eval-print loop
\
\ at this point, the compiler/init must be loaded, so i can use any words now
: repl ( -- )
	@loop
		">> " prompt
		dup void? if >>eof
		\ "GOT: " . . CR
		compile-and-load-string
		\ do same trick as above to safely run & delete __main__
		'__main__ .dumpword
		del __main__
		call
		.S
		<<loop
	@eof
		drop
		CR "Exiting on EOF" . CR
	;

\ load filename, respecting NOCACHE setting
: load-file-maybe-cached ( filename -- )
	NOCACHE ref if >>nocache
	\ do cached load
	cached-compile-and-load
	return

	\ ignore any .b file - load source file and compile
	@nocache
		read-file
		compile-and-load-string
		;
	
\ load & run file
: run-file ( filename -- )
	load-file-maybe-cached
	\ same trick as above to delete __main__ before running
	'__main__ .dumpword
	del __main__
	call
	;

\ first, must init interpreter for anything else to work
\ (no userwords are loaded yet .. no compiler, no init lib)
init-interpreter

\ parsed from cmdline args - set defaults
var FILENAME 1
void FILENAME set!

var NOCACHE 1
false NOCACHE set!

var BADARGS 1
false BADARGS set!

\ parse cmdline args
cmdline-args 
{ 
	\ "ARG:" . dup . CR 
	dup "-nocache" == if >>set-nocache
	dup file-exists? if >>set-filename
	\ else, don't know what it is
	"Unrecognized command line argument: " swap + . CR
	true BADARGS set! return

	@set-nocache
		drop
		true NOCACHE set! return
	@set-filename
		FILENAME ref void? not if >>have-filename
		FILENAME set! return
	@have-filename
		"Extra filename given on command line: " swap + . CR
		true BADARGS set! return
} 
for-each

\ want to do a clean exit instead of throwing error so
\ host side doesn't restart me and i loop on the same error
BADARGS ref if >>exit 

\ "GOT ARGS:" . CR
\ "	Filename:" . FILENAME ref . CR
\ "	Nocache:" . NOCACHE ref . CR

FILENAME ref void? if >>do-repl
\ run FILENAME
FILENAME ref run-file >>exit

\ no filename, run interactive repl loop
@do-repl
	repl

@exit
	return



