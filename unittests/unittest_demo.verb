\
\ more involved unittests -- run as a whole file instead of as lines in -test mode
\ Copyright (c) 2022 Frank McIngvale, see LICENSE
\

( cannot do multiline strings with -test so do a check here ... )
"   here is
   a multiline
   string of
   testing 


   joy


   the

   \ oh and this is not a comment

   end
   .
" . CR

"""

	here is a
	" triple " quoted "
	string so I can have other random "" quotes "" within it

	lets hope "" that " worked

	\ and this should not be
	\ a comment
	\ here either

	the
	end
	.

	p.s. this
	
	string contains

	leading tabs as

	well
""" . CR

( create a counter function that remembers its current count )
: make-countdown ( N -- closure )
	{ self . self 1 - self! } swap make-closure
	;

"Counting down from 10:" .
10 make-countdown
10 repeat
CR

\ create a counter object that accepts messages:
\	'get - return current counter value
\	'tick - decrement counter
\
\ message is passed on top of stack when calling closure
: make-counter-obj ( N -- closure )
	{
		( takes message from top of stack )
		dup 'get == if >>get
		dup 'tick == if >>tick
		"Bad command in counter: " swap str + error
		@get
			drop self return
		@tick
			drop self 1 - self!
	} swap make-closure
	;

"Counting down from 20:" .
20 make-counter-obj
\ make another closure bound to this counter.
\ in it, print then decrement counter
{ 'get self call . 'tick self call } swap make-closure
\ print & decrement 20 times
20 repeat
CR

( calculate all factors of an integer )
	
: factors ( N -- ; print factors )
	1 ( N i )
	@loop
	2dup >= ( N i N>=i )
	if >>check >>done
		@check 2dup mod 0 == ( N i N%i==0 )
			if >>isfactor >>recur 
			@isfactor
				dup . 
			@recur ( N i )
			1 + <<loop
	@done 
	;

"* Factors *" . CR
"Factors of 200:" . 200 factors CR
"Factors of 1000:" . 1000 factors CR
"Factors of 41*107:" . 41 107 * factors CR

( -- mutually recursive functions -- )
: even? ( n -- is even? )
	abs dup? 0 == 
	if >>even 1 - odd? return 
	@even true ;

: odd? ( n -- is odd? )
	abs dup? 0 == if >>even 1 - even? return @even false ;

"* Mutual recursion *" . CR
"Expect true true false false:" . CR
"      " . 100 even? . 64 even? . 31 even? . 151 even? . CR
"Expect false false true true:" . CR
"      " . 200 odd? . 44 odd? . 181 odd? . 211 odd? . CR

( -- countdown that only prints numbers that pass a test -- )
: countdown-test ( N test -- ; print countdown of N where test is true )
	@loop
		over 0 < if >>done
		2dup call if >>true >>recur
		@true
			over .
		@recur
			swap 1 - swap <<loop @done ;

"* Countdown by testing *" . CR
"Count by 1:" . 20 { drop true } countdown-test CR
"Count by evens:" . 40 { even? } countdown-test CR
"Count by odds:" . 40 { odd? } countdown-test CR
"Count by 5s:" . 100 { 5 mod 0 == } countdown-test CR

: nmax ( xn ... x1 NR -- max of NR numbers from stack )
	{ max } swap 1 - repeat ; ( call 'max' NR-1 times )

"Expect 50:" .
5 10 50 30 -20 8 19 41 0 12 10 nmax . CR

\ there are no builtin control structures in verbii, other than 'if', '>>' and '<<',
\ so you can invent whichever ones you like.
\
\ this is like a combination of a (for ..) and a (while ..)

\ for-while: loop that begins at start, increments by given value each time,
\			 and stops when cond-while evaluates to false. cond-while and lambda
\			 are called with current counter on top of stack.
\ 			 cond-while is checked at the START of each loop.
"* For-While *" . CR
: for-while ( start increment cond-while lambda )
	>L >L >L >L ( L3: lambda, L2: cond-while, L1: increment, L0: current )
	@loop
		L0 ref L2 ref call if >>continue >>end ( cond-end true|false for current counter? )
	@continue
		L0 ref L3 ref call ( call lambda with current value )
		L0 ref L1 ref + L0 set! ( current += increment )
		<<loop
	@end
		LP 4 + LP! ( clean up locals )
	;

"Count 1 .. 10:" . 1 1 { 10 <= } { . } for-while CR
"Count 20 .. 0, by 4's:" . 20 -4 { 0 >= } { . } for-while CR

"Upper triangle of stars ..." . CR 
15 -1 { 0 > } { { 42 .c 32 .c } swap repeat CR } for-while 

( https://rosettacode.org/wiki/Multiplication_tables )

: .cn ( c n -- ; print char n times )
	@loop
		dup? 0 == if >>done
		swap dup .c swap 1 - <<loop
	@done drop 
	;

: spaces ( n -- ; print n spaces ) 32 swap .cn ;

: .w ( obj width -- ; print obj with minimum width, left padded )
	swap str dup length rot swap - ( str width-len )
	dup 0 > if >>dopad
	drop >>done
	@dopad spaces
	@done . 
	;

"Multiplication table ..." . CR
1 1 { 10 < } { 
	dup . ( print row label )
	1 1 { 10 < } {
		( stack is: outer-counter inner-counter -- i can't destroy outer counter
		  because it is only refreshed after all inner loops are finished, so copy
		  it over to multiply ) 
		over ( outer inner outer )
		2dup <  if >>skip ( only print upper triangle )
		* 4 .w >>done ( print width=4 ) 
		@skip drop drop 5 spaces @done
		} for-while CR
} for-while

( -- test fold -- )

"Expect 160:" .
[ 10 21 32 43 54 ] { + } 0 fold . CR
( reverse string )
"Expect fedcba:" . 
"abcdef" { swap + } "" fold . CR
( reverse list )
"Expect [ 99 88 77 66 ]:" . CR
"      " . [ 66 77 88 99 ] { 1 make-list swap + } [ ] fold . CR

( -- test filter -- )

"Expect [ 6 7 8 9 ]:" . CR  
"      " . [ 1 2 3 4 5 6 7 8 9 ] { 5 > } filter . CR
"Expect [ 0 10 30 50 70 ]:" . CR 
"      " . [ 0 10 -20 30 -40 50 -60 70 -80 ] { 0 >= } filter . CR
"Expect [ 0 10 30 50 70 ]:" . CR 
"      " . [ 0 10 -20 30 -40 50 -60 70 -80 ] { 0 >= } filter . CR
"Expect lmnop:" . "ablcdmenfgohipjk" { "l" >= } filter . CR
"Expect lmnop:" . "ablcdmenfgohipjk" { "l" >= } filter . CR

( -- test map -- )

"Expect [ 3 9 15 21 27 ]:" . CR
\ make new sequence of 3x each value
"      " . [ 1 3 5 7 9 ] { 3 * } map . CR

\ triple each char in string
"Expect aaabbbcccdddeeefff:" . 
"abcdef" { dup dup + + } map . CR
\ chars doubled with - between
"Expect a-ab-bc-cd-de-ef-f" .
"abcdef" { dup "-" swap + + } map . CR

"Expect 1 .. 10:" .
[ 1 2 3 4 5 6 7 8 9 10 ] { . } for-each CR

"Expect 10 .. 1:" .
[ 1 2 3 4 5 6 7 8 9 10 ] { . } for-each-reverse CR

"Expect 0a 1b 2c 3d 4e:" . CR
"      " . "abcde" { ( i elem ) over str puts . drop } for-each-i CR

: to-upper ( string -- first char of string as uppercase [unchanged if not alphabetic] )
	ord
	dup 97 < if >>not-lower
	dup 122 > if >>not-lower
	32 - chr return
	@not-lower chr
	;

: to-lower ( string -- first char of string as uppercase [unchanged if not alphabetic] )
	ord
	dup 65 < if >>not-upper
	dup 90 > if >>not-upper
	32 + chr return
	@not-upper chr
	;

"Expect XYZ 123 ABC !@$ DEF:" . CR
"      " . "Xyz 123 abC !@$ dEf" { to-upper } map . CR

"Expect abc 432 xyz &%# def:" . CR
"      " . "AbC 432 xYZ &%# DEf" { to-lower } map . CR

( --- some more non-rosetta tasks --- )


( -- test that dup'd lists correctly show changes -- )
"""Expect [ 10 20 30 hello 50 ] x 4:""" . CR
10 20 30 40 50 5 make-list
dup dup dup
3 "hello" put
. . . . CR

( -- unmake must create new list on unmaking lambdas to prevent modification --- )
"* unmake lambda" . CR
"Expect <{ 11 22 33 44 return }> [ 11 22 88888 44 return ]" . CR
"      " . { 11 22 33 44 } dup unmake 2 88888 put swap . . CR
clear 

( -- make-lambda must deepcopy list -- )
"* make-lambda" . CR
"Expect <{ 11 22 33 44 }> [ 11 22 977 44 ]" . CR
"      " . 
\ make lambda then modify input list to ensure it doesn't affect lambda
11 22 33 44 4 make-list dup make-lambda swap 2 977 put swap . . CR

( -- same with make-closue -- )
"* make-closure" . CR
"Expect <{ 11 22 33 44 } :: 999> [ 11 22 777 44 ]" . CR
"      " . [  11 22 33 44 ] dup 999 make-closure swap 2 777 put swap . .  CR

( -- same with unmake - should not be able to edit closure -- )
"* unmake closure" . CR
"Expect <{ 77 66 55 44 } :: 543>" . CR
"      " . [ 77 66 55 44 ] 543 make-closure dup unmake drop 2 3333 put drop . CR

( -- now with some deeper lists -- )
"Expect [ 1 2 [ 3 888 [ 5 777 ] 7 8 ] 9 555 ] [ 1 2 [ 3 888 [ 5 777 ] 7 8 ] 9 555 ]:" . CR
"      " . 
[ 1 2 [ 3 4 [ 5 6 ] 7 8 ] 9 10 ] dup
dup 2 get 1 888 put drop
dup 2 get 2 get 1 777 put drop
dup 4 555 put drop
swap . . CR

( -- now with deepcopy of the first list -- )
"Expect [ 1 2 [ 3 4 [ 5 6 ] 7 8 ] 9 10 ] [ 1 2 [ 3 888 [ 5 777 ] 7 8 ] 9 555 ]:" . CR
"      " . 
[ 1 2 [ 3 4 [ 5 6 ] 7 8 ] 9 10 ] dup deepcopy
dup 2 get 1 888 put drop
dup 2 get 2 get 1 777 put drop
dup 4 555 put drop
swap . . CR

"Count to 5:" . 
[ 1 2 3 4 5 ] { . } for-each CR

( - nested for-each - )
"Count to 9:" . 
[ [ 1 2 3 ] [ 4 5 6 ] [ 7 8 9 ] ] { { . } for-each } for-each CR

( - more fold tests - )
"Expect ABCDE:" . 
[ "A" "B" "C" "D" "E" ] { + } "" fold . CR

( - nested fold - )
"Expect ABcDEfGHi:" . 
[ [ "A" "B" "c" ] [ "D" "E" "f" ] [ "G" "H" "i" ] ] { { + } "" fold + } "" fold . CR

( - nested map - )
"Expect [ [ 2 4 6 8 ] [ 10 12 14 16 ] ]:" . CR
"      " . 
[ [ 1 2 3 4 ] [ 5 6 7 8 ] ] { { 2 * } map } map . CR

( - nested filter - )
( keep lists with at least 2 elements > 0 )
"Expect [ [ -32 -8 0 4 12 ] [ 10 20 30 ] ]:" . CR
"      " . 
[ [ -32 -8 0 4 12 ] [ -4 -3 -2 -1 0 ] [ 10 20 30 ] ] { { 0 > } filter length 2 >= } filter . CR

( - map nested in repeat - )
"Expect [ 2 4 6 ] [ 4 8 12 ] [ 8 16 24 ] [ 16 32 48 ]:" . CR
"      " . 
[ 1 2 3 ]
{
	{ 2 * } map dup . 
} 4 repeat drop CR

: int-range ( start end -- list ; makes list of integers from start to end [inclusive] by +1 )
	[ ] -rot 1 swap '<= 2 make-list make-lambda ( [ ] start 1 { end != } ) 
	{ append } for-while
	;

"Expect [ 0 .. 10 ]:" . 0 10 int-range . CR
"Expect [ -10 .. 10, evens ]:" . -10 10 int-range { even? } filter . CR
"Expect [ -10 .. 10, odds ]:" . -10 10 int-range { odd? } filter . CR


"END STACK:" . .S CR





