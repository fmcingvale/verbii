( -- unittest_core - test basic language features, roughly in the order that they will usually be implemented -- )
( -- Copyright (c) 2022 Frank McIngvale, see LICENSE -- )

( very basic check first )
1
2
3
4 5 6 7
. . . . CR 
7 6 5 4

( math +, -, * )
clear
10 20 30 40 50
+
-
* 
+

( *** rounding of / -- should round to nearest *** )

( round down 8.3 -> 8 )
clear
639 77 /mod
77 * +
-639 77 /mod
77 * +
639 77 //
-639 77 //
639 77 mod
-639 77 mod

( round down 7.8 -> 7 )
clear
335 43 /mod
43 * +
-335 43 /mod
43 * +
335 43 //
-335 43 //
335 43 mod
-335 43 mod

( round 6.5 -> 6 )
clear
403 62 /mod
62 * +
-403 62 /mod
62 * +
403 62 //
-403 62 //
403 62 mod
-403 62 mod
clear

( this was a c++ & c# bug case with # > 32 bits )
11501398638 2 /mod
clear

( numerical limits -- non-error cases )
( ports are required to support UP TO these max values )
clear

9007199254740991
-9007199254740991
9007199254740981 10 +
-9007199254740971 20 -

( == )
clear
12 12 ==
-34 -34 ==
20 8 ==

clear
#123.125 #123.125 ==
#-4.5 #-4.5 ==
#45.125 #35.125 ==

123.125 #123.125 ==
-4.5 #-4.5 ==
45.125 #35.125 ==

clear
123 #123 ==
-45 #-45 ==
123 #1234 ==
#987.0 987 ==

clear
"hello" "hello" ==
"hello5" "hello" ==

clear
'abc 'abc ==
'abc 'abcd ==
'abc "abc" ==

clear
( lambdas are never equal to anything, but it should not cause an error to compare them )
{ 1 2 3 } { 1 2 3 } ==
{ 10 20 30 } dup ==
{ 11 22 33 } 112233 ==

clear
1 1 == 2 2 == ==
1 2 == 2 3 == ==
1 1 == 2 1 == ==

clear

( void only equal to void )
2 void ==
void 2 ==
void void ==
clear

( > )
-12 8 >
100 2 >
212 -84 >
123 123 >
-456 -456 >
clear

"abcde" "abcde" >
"abcdf" "abcde" >
"abcdc" "abcde" >
"abbde" "abcde" >
"abdde" "abcde" >
clear

'abcde 'abcde >
'abcdf 'abcde >
'abcdc 'abcde >
'aacde 'abcde >
'adcde 'abcde >
clear

[ 1 2 3 4 5 ] [ 1 2 3 4 5 ] >
[ 1 2 3 4 3 ] [ 1 2 3 4 5 ] >
[ 1 2 3 4 6 ] [ 1 2 3 4 5 ] >
[ 1 2 1 4 5 ] [ 1 2 3 4 5 ] >
[ 1 2 4 4 5 ] [ 1 2 3 4 5 ] >
clear

( check with unequal length lists - again like a string test )
[ 1 2 3 4 5 ] [ 1 2 3 4 ] >
[ 1 2 3 ] [ 1 2 3 4 ] >
clear

( make sure f.setprec is working )
4 f.setprec
#1.2345678 . CR

1 f.setprec
#0.3456789 . CR

2 f.setprec
#8.8567843 . CR

( jumps )
clear
11 22 >>THREE @FIVE 55 66 >>SEVEN @THREE 33 44 <<FIVE @SEVEN 77 88

( if )
clear
100 100 == if >>TRUE >>FALSE @TRUE 1234 >>END @FALSE 5678 @END
200 200 == if >>TRUE 8888 >>END @TRUE 5678 @END
100 300 == if >>TRUE >>FALSE @TRUE 9999 >>END @FALSE 8765 @END
300 200 == if >>TRUE 4321 >>END @TRUE 9999 @END
clear

( calling lists )
111 222 333 444 '+ '* '- 7 make-list
call
clear

( defining words )
clear
: aaa 111 222 333 444 ;
: bbb 99 88 77 ;
aaa
bbb
clear

( show that forward references are fine )
: ccc 11 ddd 88 ;
: ddd 22 eee 77 ;
: eee 33 fff 66 ;
: fff 44 55 ;
ccc

( alternate syntax )
clear
def ggg 123 456 789 ;
ggg
clear

( make sure return doesn't crash )
def zzz 123 456 return ;
zzz
clear
return

( local stack )
clear
10 20 30 40
>L 
>L 
>L 
>L 

L>
L>
L>
L>

clear
10 20 30 40
>L 
>L 
>L 
>L 

111 LP set!
222 LP 1 + set!
333 LP 2 + set!
444 LP 3 + set!
L>
L>
L>
L>

( var )
clear
var x 4
11 x set! 22 x 1 + set! 33 x 2 + set! 44 x 3 + set!
x 1 + ref
x 3 + ref
x 2 + ref
x ref

( check that int+addr works as well )
clear
123 3 x + set!
3 x + ref

clear
( show that address math works )

var y 4
y dup 1 + dup 1 + dup 1 + ( y y+1 y+2 y+3 ) 123 swap set! 456 swap set! 789 swap set! 910 swap set!
y 3 + dup 1 - dup 1 - dup 1 - ref . ref . ref . ref . CR

( show redefining after del works )
clear
del x   
var x 1

( check that 'return' at the top level works correctly )
clear
10 20 == if >>T return @T 4444
5555

