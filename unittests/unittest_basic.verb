\
\ test library functions and other basic things not covered in unittest_core
\ Copyright (c) 2022 Frank McIngvale, see LICENSE
\

10 20 30 
depth
. . . . CR
depth

10 20 30 40 50 60
SP 3 + SP!

"Hello world!" . CR
clear

10 20 30
drop
drop
drop

111 222
dup
dup

0
dup?
clear

11 22 33
swap
swap
clear

11 22 33 44
1 pick
drop
2 pick
drop
3 pick
drop
4 pick

clear
10 20 30 40
over

clear
10 20 30 40 50 60
2dup

clear
10 20 30 40
2drop

clear
10 20 30 40 50 60
2over 

clear
10 20 30 40 50 60
2swap

( logical operations )
clear
true
false

clear
true not
false not

clear
true true or
true false or
false true or
false false or

clear
true true and
true false and
false true and
false false and

( stack operations )
clear
11 22 33 44 55 66 77
4 ndrop

clear
111 222 333 444 555
5 ndrop

clear
111 222 333
nip

clear
10 20 30 tuck

clear
10 20 30 40
rot
-rot

( relational operators )
clear
10 20 >=
30 20 >=
40 40 >=

clear
10 20 <
30 10 <
40 40 <

clear
15 20 <=
35 21 <=
40 40 <=

( combinations of rich math operations )
clear
10 20 +
10 #21 +
#11 22 +
#11 #33 +

clear
10 20 -
10 #21 -
#11 20 -
#22 #77 -

clear
10 20 *
10 #21 *
#12 12 *
#10 #40 *

clear
10 20 /
40 #20 /
#30 2 /
#100 #25 /

clear
"hello" " " "world"
+
+

clear
'abc 'def 'ghi
+
+

( more math operations )
clear
123 
neg
-456
neg

clear
123 456 
max
-500 200 
max
300 -44
max
444 444 
max

clear
100 200 
min
-400 500 
min
123 -40 
min
77 77
min

clear
123
abs
-99
abs
0
abs

clear
10 20 30 40 
.S

: foobar 11 22 33 44 ;
'foobar .dumpword
( ensure i can't modify word from dumped list )
2 777 put
'foobar .dumpword

clear
( -- lambdas -- )
{ 4 5 6 }
call
clear
{ 1 2 3 { 7 8 9 } 4 5 6 }
call
3 ndrop
call

clear
{ 111 222 333 }
dup
dup
call
3 ndrop
call
3 ndrop
call

clear

( -- simple example of passing lambdas to another function -- )
def saything ( lambda -- ) dup "The" . 1 swap call "is" . 2 swap call CR ;

( called with cmd on TOS )
{ 1 == if >>one "blue" . return @one "ocean" . }
{ 1 == if >>one "green" . return @one "grass" . }
{ 1 == if >>one "red" . return @one "rose" . }
saything
saything
saything

clear
: zzz { 10 . 20 . "Hello lambda!" . 30 . 40 . } call CR ;
( subtlety here -- have to run zzz at least twice to make sure it's working -- )
( the FIRST time, the { .. } will be parsed and directly pushed as a lambda object ... )
( ... modifying the source to remove the { .. } and replacing it with the lambda object that )
( ... will be pushed as an immediate value on subsequent runs )
( so have to run the SECOND time to make sure the modified wordlist is correct )
zzz
zzz
zzz ( once more for good measure )

( this will fail if comments aren't removed in the syntax layer since the )
( interpreter expects the name immediately after 'var' )
var ( hello ) t33 ( there ) 1
1445 t33 set! 
t33 ref . CR

clear
( line comments )
"Expect 1 2 3 4: 1 2" . ( make sure \ inside a comment is ignored ) "3 4" . CR
"Expect 5 6 7 8: 5 6 7 8" . CR \ ( this comment should be ignored ) "9 10 11 12" . CR
clear
11
\ a line comment
22
\ another line comment
33 \ yet another line comment
44
"Stack should be: 11 22 33 44" . CR
clear

"Expect A B C D: A B" . ( make sure these are ignored \n \r \t \b ) "C D" . CR
( make sure saving lambdas to vars works )
clear
{ 133 244 355 } t33 set!
t33 ref call 
t33 ref call

clear
123 ( make sure that ( nested ( comments ) are ) handled ok ) 456

( string parsing )
clear
"hello world here"
. CR
" hello with leading trailing space "
. CR
"oneword"
. CR
"""and some embedded"quote"chars << here"""
. CR
"|.......|.......|....|.........|....." . CR
"here    with    some embedded  spaces" . CR
( assume tabs are printed as 8 spaces )
"|.......|.......|.......|.......|.......|.......|.......|......." . CR
"and		now		with			tabs" . CR
"..." puts "...|......|......|.......|......|..........|.........." puts "..." puts CR
">>>" puts "   now    with   leading and    trailing   space      " puts "<<<" puts CR
clear

( string/symbol 'get' )
"abcdefghi"
dup 3 get
drop dup 0 get
drop dup 8 get
drop dup -1 get
drop dup -3 get
drop dup -9 get
clear

'klmnopqrst
dup 2 get
drop dup 0 get
drop dup 9 get
drop dup -4 get
drop dup -1 get
drop dup -10 get
clear

( length operator )
"hello"
length
'bigsymbol
length

( lists )
clear
10 20 30 40 
4 make-list
dup length

clear
0 make-list
length

clear
11 22 33 3 make-list
44 55 66 77 4 make-list
+
length

clear
11 22 2 make-list 33 44 55 3 make-list 66 1 make-list 0 make-list 77 88 99 3 make-list
5 make-list
length

clear
"Hello" "world" 123 2 make-list "the end" 3 make-list

clear
( list literals )
[ 11 22 33 ]
call
clear
: aaa + ;
: bbb - ;
: ccc * ;
[ 10 20 30 40 bbb ccc aaa ]
call
clear
del aaa
del bbb
del ccc

( show that literals are correctly handled in literal lists )
[ 11 [ hello "world of fun" ] [ 4.25 #8.125 ] [ true false null ] void another-symbol ]
clear

( show that lists are callable )
[    [ [ 2 8 + ] call ] call [ 12 8 + [ 40 10 - ] call ] call ] 
call
clear

( deep list comparisons )
[ 1 2 3 ] [ 1 2 3 ] 
==
[ 1 2 3 ] [ 1 2 4 ]
==
[ 1 2 3 4 ] [ 1 2 3 4 5 ]
==
[ 1 2 3 4 5 ] [ 1 2 3 4 ]
==
[ 1 2 [ 3 4 [ 5 6 ] 7 8 ] 9 10 ] dup
==
[ 1 2 [ 3 4 [ 5 6 ] 7 8 ] 9 10 ] [ 1 2 [ 3 4 [ 5 61 ] 7 8 ] 9 10 ]
==
clear

( list get )
[ 11 22 33 44 55 66 ]
dup 2 get
drop dup 0 get
drop dup 5 get
drop dup -1 get
drop dup -3 get
drop dup -6 get
clear

( list put )
[ 10 20 30 40 50 ] 
2 "abc" put
0 'xyz put
4 false put
clear

[ 11 22 33 44 55 ]
-1 "hello" put
-3 #8.125 put
-5 'world put
clear

( slicing )
"abcdefghijklmnop" 4 5 slice
"abcdefghijklmnop" -5 3 slice
"zooming" 3 100 slice
"hello world" 4 -1 slice
"questionable" 4 0 slice
"________X__________" 8 1 slice

clear
'hello-a-long-symbol 4 3 slice
'short 3 100 slice
'simple -4 2 slice
'what-about-zero 6 0 slice
depth

clear
10 20 30 40 50 60 70 80 90 100 10 make-list
dup 4 3 slice
drop
dup -5 4 slice
drop
dup 3 100 slice
drop
dup 6 -1 slice
drop
dup 7 0 slice
drop
dup 7 1 slice
clear

( dictionaries )

[ [ "zzz" 444 ] [ "uuu" 333 ] [ "bbb" 555 ] [ "eee" 999 ] ] make-dict
dup
"uuu" get
drop
dup "zyzyz" get
drop
"xyz" 888 put
"bbb" 444 put
clear

( string / symbol make/unmake )
clear
65 66 67 68 4 make-string
66 67 68 69 70 5 make-symbol

clear
"Hello world!" unmake
make-symbol
unmake
make-string

clear
( test that repr makes expected strings for all types )
1234 repr . CR
#3.75 repr . CR
4.125 repr . CR
true repr . CR
false repr . CR
10 20 'hello 11.5 4 make-list repr . CR
{ 1 2 3 a b c } repr . CR
[ 10 20 30 x y z ] 'abc :: repr . CR
'a-long-symbol repr . CR
"hello there world" repr . CR
null repr . CR

( repeat for str )
1234 str . CR
#3.75 str . CR
4.125 str . CR
true str . CR
false str . CR
10 20 'hello 11.5 4 make-list str . CR
{ 1 2 3 a b c } str . CR
[ 10 20 30 x y z ] 'abc :: str . CR
'a-long-symbol str . CR
"hello there world" str . CR
null str . CR

{ 10 20 30 40 }
unmake
unmake
clear

( type testing )
123 int?
#123 int?
#446 float?
123 float?
clear
"hello" string?
"there" symbol?
'world symbol?
'foobar string?
clear
true bool?
false bool?
1 bool?
clear
null null?
0 null?
null void?
clear
void void?
void null?
0 void?
clear

10 'word #13.125 3 4 5 3 make-list "end" 5 make-list
make-lambda
unmake
unmake

clear
( append should modify original object )
10 20 30 3 make-list
dup dup 
40 append ( all should change )

clear
( '+' must create new lists )
40 50 60 3 make-list >L 
10 20 30 3 make-list >L 
L0 ref L1 ref +
L0 ref
L1 ref
LP 2 + LP! \ clean up locals

( tests of 'any' )
clear "abcde" { "e" == } any
clear "01234" { "9" == } any
clear 10 20 30 40 4 make-list { 30 > } any
clear 10 20 30 40 4 make-list { 0 <  } any

clear "mnopqr" dup { "m" >= } all swap { "r" <= } all and
clear "1234.567" dup { "0" >= } all swap { "9" <= } all and
clear "1234567" dup { "0" >= } all swap { "9" <= } all and

clear
( closures )
[ 11 22 33 ] "hello world" make-closure
clear
[ 11 self 22 self 33 self ] 7654 make-closure
call
clear
[ 111 222 333 ] [ "hello" 4321 "world!" false ] make-closure
unmake
clear

\ bind list in closure, modify list in closure and show that
\ the changes are visible afterwards in var
var MYSTATE 1
0 make-list MYSTATE set!
[ self 99 append drop self 88 append drop self 77 append drop ] MYSTATE ref make-closure
call
"Expect [ 99 88 77 ]:" . MYSTATE ref . CR

( -- bit operations -- )

\ 11001001100010100110001011100110
\ 00110110011101011001110100011001

"Expect 913677593:" . 3381289702 bit-not . CR

\ 10000000000000000000000000000000
\ 2147483648
\ 1073741824
\ 536870912

"Expect 2147483648:" . 1 31 bit-shl . CR
"Expect 1073741824:" . 1 31 bit-shl 1 bit-shr . CR
"Expect 536870912:" . 1 31 bit-shl 2 bit-shr . CR

\ 11111000000000000000000000000000 4160749568
\ 00000011111000000000000000000000 65011712

"Expect 65011712:" . 4160749568 6 bit-shr . CR

\ 11000000000000000000000000000000 3221225472
\ 10000000000000000000000000000000 2147483648
\ 00000000000000000000000000000000 0

"Expect 3221225472:" . 3 30 bit-shl . CR
"Expect 2147483648:" . 3 31 bit-shl . CR
"Expect 0:" . 3 32 bit-shl . CR

\ 110
\ 011
\ 001
\ 000
"Expect 6:" . 3 1 bit-shl . CR
"Expect 3:" . 3 1 bit-shl 1 bit-shr . CR
"Expect 1:" . 3 1 bit-shl 2 bit-shr . CR
"Expect 0:" . 3 1 bit-shl 3 bit-shr . CR

\ 01000000100001000000001100001000 1082393352
\ 10000100000001000010000100010001 2214863121
\ 11000100100001000010001100011001 3296994073
"Expect 3296994073:" . 1082393352 2214863121 bit-or . CR

\ 11110011000011111011111001111101 4077895293
\ 10001100111100001110000111000110 2364596678
\ 10000000000000001010000001000100 2147524676
"Expect 2147524676:" . 4077895293 2364596678 bit-and . CR

\ 11010011010010011010011100110010 3544819506
\ 00110110110011100100010011000110 919487686
\ 11100101100001111110001111110100 3850888180
"Expect 3850888180:" . 3544819506 919487686 bit-xor . CR
