\
\ test library functions and other basic things not covered in unittest_core
\ Copyright (c) 2022 Frank McIngvale, see LICENSE
\

10 20 30 
depth
. . . . CR
depth

10 20 30 40 50 60
SP 3 + SP!

"Hello world!" . CR
clear

clear
: zzz { 10 . 20 . "Hello lambda!" . 30 . 40 . } call CR ;
( THE FOLLOWING IS OBSOLETE -- this was how it worked when lambas were replaced at runtime )
( subtlety here -- have to run zzz at least twice to make sure it's working -- )
( the FIRST time, the { .. } will be parsed and directly pushed as a lambda object ... )
( ... modifying the source to remove the { .. } and replacing it with the lambda object that )
( ... will be pushed as an immediate value on subsequent runs )
( so have to run the SECOND time to make sure the modified wordlist is correct )
zzz
zzz
zzz ( once more for good measure )

( this will fail if comments aren't removed in the syntax layer since the )
( interpreter expects the name immediately after 'var' )
var ( hello ) t33 ( there ) 1
1445 t33 set! 
t33 ref . CR

clear
( line comments )
"Expect 1 2 3 4: 1 2" . ( make sure \ inside a comment is ignored ) "3 4" . CR
"Expect 5 6 7 8: 5 6 7 8" . CR \ ( this comment should be ignored ) "9 10 11 12" . CR
clear
11
\ a line comment
22
\ another line comment
33 \ yet another line comment
44
"Stack should be: 11 22 33 44" . CR
clear

"Expect A B C D: A B" . ( make sure these are ignored \n \r \t \b ) "C D" . CR
( make sure saving lambdas to vars works )
clear
{ 133 244 355 } t33 set!
t33 ref call 
t33 ref call

clear
123 ( make sure that ( nested ( comments ) are ) handled ok ) 456

( string parsing )
clear
"hello world here"
. CR
" hello with leading trailing space "
. CR
"oneword"
. CR
"""and some embedded"quote"chars << here"""
. CR
"|.......|.......|....|.........|....." . CR
"here    with    some embedded  spaces" . CR
( assume tabs are printed as 8 spaces )
"|.......|.......|.......|.......|.......|.......|.......|......." . CR
"and		now		with			tabs" . CR
"..." puts "...|......|......|.......|......|..........|.........." puts "..." puts CR
">>>" puts "   now    with   leading and    trailing   space      " puts "<<<" puts CR
clear


\ ** BELOW ARE ALL DEPRECATED so not moved to new unittests **

clear
( closures )
[ 11 22 33 ] "hello world" make-closure
clear
[ 11 self 22 self 33 self ] 7654 make-closure
call
clear
[ 111 222 333 ] [ "hello" 4321 "world!" false ] make-closure
unmake
clear

\ bind list in closure, modify list in closure and show that
\ the changes are visible afterwards in var
var MYSTATE 1
0 make-list MYSTATE set!
{ self 99 append drop self 88 append drop self 77 append drop } MYSTATE ref make-closure
call
"Expect [ 99 88 77 ]:" . MYSTATE ref . CR

\ this was a bug in the interpreters -- bad assumption that closures & dicts didn't need to be
\ pushed as literals ...
10 20 [ 111 222 333 ] 77 :: 30 40 5 make-list make-lambda
call
clear
111 222 [ 33 44 55 ] 888 :: 333 444 5 make-list make-lambda
call
clear
11 22 [ ] make-dict 33 44 5 make-list make-lambda
call
clear
