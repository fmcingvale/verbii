Global TODO

* More expect-* things to further automate unittests

* More error checking of input types in library/tests/demos

* 63-bit integers
	* or ... maybe 52 since some host languages use floats for ints??

* add bit level operations -- limit to 32 bits
	* add random number generator (pcg32)

* improve exp by reducing x like dividing by 100,1000,1e6,etc. and adjusting
  at end since values for powers of 10 can be in a table (exp algorithm seems
  to have trouble with larger values)
  
* add cmdline params: -stack -locals -heap to give values for memory sizes

* sort out usage of null/NULL/'void' in ports for consistency. add some unittests
that include null to make sure it is handled correctly. also make sure voids are 
never visible from verbii code

* make sure no ports still looking for false_jump after 'if'

* shouldn't syntax-next return void on end of input instead of null? check/change across ports.

* why do we need a list AND a lambda? why not just call lists? there needs to be something different about lambdas to justify the separate type (like closures?) .. binding a list of values to lambdas that are pushed on call?

* 'var NAME' and 'del NAME' should be syntax in compiler, rewritten to 'NAME count var and 'NAME del so they can be implemented outside of interpreter correctly

* ensure consistent behavior between ports on when lists are copied -- prime example is .dumpword - it should create a copy of the objlist because it is not safe for programs to try and edit words directly -- the compiler is allowed to transform the objlist so cannot assume the source code matches 1:1 with the compiled objlist

* make sure ports all implement the same builtins (c++ has more that are not in other ports right now)

* all ports should implement var as making a new word, like chicken port

* add open-input-file, open-output-file, open-string, read-line, read-char, write-string, write-char ... basically I/O with ports concept like scheme

* add \ for line comments
