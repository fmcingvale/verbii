Global TODO

---[   Periodic  ]------------------------------------------------------

* run all unittests, demos, etc. with -stats across ports to make sure
  everything matches (# userwords, # tail calls, builtin words, max stack/locals depth)
  and no Notices are given (i.e. stack/locals not clean)

---[    Ports    ]------------------------------------------------------

* node.js

* scala

* swift

---[    Demos    ]------------------------------------------------------

* simple demo games (i.e. 'guess the number', etc. beginner programming type things)

* Chess engine

* (mini) scheme -> verbii translator

* more rosettacode tasks:
	* https://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm
	* https://rosettacode.org/wiki/Heronian_triangles
	* https://rosettacode.org/wiki/Additive_primes
	* https://rosettacode.org/wiki/Anti-primes
	* https://rosettacode.org/wiki/S-expressions
	* https://rosettacode.org/wiki/Bulls_and_cows
	* https://rosettacode.org/wiki/Prime_decomposition

---[  Libraries  ]------------------------------------------------------

* JSON export

---[   Features   ]------------------------------------------------------

* can vars be done completely with closures/self??
	- if so then:
		- phase 1: rewrite existing vars in closure style (can be done a little at a time)
		- phase 2: once that is done, remove existing var framework
					- eliminate allocate functions in interpreters

	- requires that userwords can be closures -- changes to hosts 
	
* run-time is very wrong in c++ port (try verb/n128.verb for example)

* i think COUNT in "var NAME COUNT" is not really gaining anything -- just make it 'var NAME' then
  NAME can be defined to get value and NAME! to set value. if arrays are needed then
  just store a list to NAME

* slightly change 'if' semantics:
	1. pop bool from stack
	2. if true, run next word (i.e. do nothing)
	3. if false, skip over next word and continue

	* in other words, word after 'if' no longer has to be a jump, but if it is
	  a jump, code will continue to work as it always has

* the L0,L1, etc should become:
	: L3 LP 3 + ref ;
	: L3! LP 3 + set! ;

* pick should be 0-based for consistency with other 0-indexed functions
	* I think I should just add names S0, S0! S1 S1! etc to initlib instead

* need to extend ,,del (or maybe just get rid of 'del NAME' and always make del stack-based??)
  to delete entries from more objects:
	dict STRING ,,del ( delete a key from dictionary )
	SYMBOL ,,del ( delete a word )
	list INDEX ,,del ( delete entry from list )

* chicken needs backtraces

---[    Tests     ]------------------------------------------------------

* reorganize tests by category?
 
---[   Clean-up   ]------------------------------------------------------

* chicken - minimize imports across all files

* check all places (in all ports) where files are opened to make sure any errors are returned
  as verbii errors and don't crash the host language

* need a better way to find lib/ than hardcoding/assuming path in repls

* More error checking of input types in library/tests/demos

* make sure ports all implement the same builtins (c++ has more that are not in other ports right now)

* c++ reports (sometimes vastly) different # of tail calls with -stats than other ports

* in native.* the pop* functions should take a 'where' argument like chicken

* chicken: cleanout old comments

---[ Optimization ]------------------------------------------------------

* why do interpreters check for symbols last in main loop? symbols account for about 70-80% of
  code (going by boot/init/compiler .b files) so shouldn't they be checked first?

* compiler.verb -- in byte-compile, all words for __main__ get pushed to stack and then
  a huge list made at the end. this leads to stack overflows for large files (like the unittests
  where everything is in __main__). would be better to add items in chunks (maybe do an append
  every N words, for example)  so compilation won't overflow the stack. for now i just bumped up the
  stack size in all ports.

* I think the native make-word should be renamed to something like set-word and 
  make-word should be implemented in verbii and perform optimizations at creation time
  examples:
	* convert jumps into offsets so no searching is required at runtime

	* convert words into indexes so they can be called without lookup at runtime
		* WORDS in interpreter would then be a list

	* accept : name @( arg ... -- local ... ) as an alternate way to specify
		@args and @locals. this should be additive so code can also do @locals
		when more temporaries are needed than make sense to list in the function signature

	* try inlining small functions
		* the question would be should this be done recursively and to what depth?
			i.e. 
				: 3dup dup dup dup ;
				: 9dup 3dup 3dup 3dup ;

			should 9dup be expanded to the 3dups, then the 3dups expanded to dups,
			then the dups expanded to their lowest level form?

* improve exp by reducing x like dividing by 100,1000,1e6,etc. and adjusting
  at end since values for powers of 10 can be in a table (exp algorithm seems
  to have trouble with larger values)

	* i think i should add more math functions (sin,cos,log,exp,etc.) -- these
  are all basically 1-liners so isn't saving significant code space now to
  omit them.

	* math: gcd, sqrt
	
* the chicken argument dispatch to builtins is really slow ... rework

---[   Unsorted   ]------------------------------------------------------


